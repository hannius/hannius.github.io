<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>让一切随风</title>
  
  <subtitle>Martin&#39;s Blog</subtitle>
  <link href="http://www.leiyawu.com/atom.xml" rel="self"/>
  
  <link href="http://www.leiyawu.com/"/>
  <updated>2021-01-08T09:50:16.000Z</updated>
  <id>http://www.leiyawu.com/</id>
  
  <author>
    <name>Martin Lei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.leiyawu.com/2021/01/12/hello-world/"/>
    <id>http://www.leiyawu.com/2021/01/12/hello-world/</id>
    <published>2021-01-12T10:44:25.677Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>bootstrap.memory_lock简要说明</title>
    <link href="http://www.leiyawu.com/2019/10/17/bootstrap-memory-lock/"/>
    <id>http://www.leiyawu.com/2019/10/17/bootstrap-memory-lock/</id>
    <published>2019-10-17T02:30:41.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall">https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall</a></p><h5 id="bootstrap-memory-lock"><a href="#bootstrap-memory-lock" class="headerlink" title="bootstrap.memory_lock"></a>bootstrap.memory_lock</h5><p>由于当jvm开始swapping时es的效率会降低，所以要保证它不swap，这对节点健康极其重要。实现这一目标的一种方法是将 bootstrap.memory_lock 设置为true。<br>要使此设置有效，首先需要配置其他系统设置。有关如何正确设置内存锁定的更多详细信息，请参阅启用bootstrap.memory_lock。</p><p>bootstrap.memory_lock: 是否锁住内存，避免交换(swapped)带来的性能损失,默认值是: false<br>bootstrap.system_call_filter: 是否支持过滤掉系统调用。elasticsearch 5.2以后引入的功能，在bootstrap的时候check是否支持seccomp。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">检查bootstrap.memory_lock设置是否生效:<br><span class="hljs-keyword">get</span> http:<span class="hljs-comment">//10.127.0.1:9200/_nodes?filter_path=**.mlockall</span><br>响应：<br>&#123;<br>    <span class="hljs-string">&quot;nodes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;9giihmDNRdS136KT52Gl5g&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;mlockall&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;X0zQESeeT8uJ9kVXvHpl-w&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;mlockall&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;w4hYw86rQhqL1ayGyUK1Kw&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;mlockall&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果看到mlockall为false，则表示mlockall请求失败。还将在日志中看到一行”Unable to lock JVM Memory”。</p><h5 id="elasticsearch报错之-memory-locking-requested-for-elasticsearch-process-but-memory-is-not-locked"><a href="#elasticsearch报错之-memory-locking-requested-for-elasticsearch-process-but-memory-is-not-locked" class="headerlink" title="elasticsearch报错之 memory locking requested for elasticsearch process but memory is not locked:"></a>elasticsearch报错之 memory locking requested for elasticsearch process but memory is not locked:</h5><p>安装elasticsearch报错如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[2019-01-14T03:57:16,453]</span><span class="hljs-comment">[ERROR]</span><span class="hljs-comment">[o.e.b.Bootstrap          ]</span> <span class="hljs-comment">[ip-172-31-30-62.ec2.internal]</span> node validation exception<br><span class="hljs-comment">[1]</span> bootstrap checks failed<br><span class="hljs-comment">[1]</span>: memory locking requested for elasticsearch process but memory <span class="hljs-keyword">is</span> not <span class="hljs-keyword">locked</span><br></code></pre></td></tr></table></figure><p>网上查找资料，发现都不是适应自己的环境。最后在官网找到了方法：</p><p>不过先跟大家声明一点就是：环境不一样解决的方法也不一样，这里是Centos7.5版本的系统，所有的服务都由systemd来管理。elasticsearch是6.5.4版本，使用RPM包的方式安装的。</p><p>现在我们开始解决问题：</p><h6 id="1、修改-etc-sysconfig-elasticsearch文件调整JVM内存大小"><a href="#1、修改-etc-sysconfig-elasticsearch文件调整JVM内存大小" class="headerlink" title="1、修改/etc/sysconfig/elasticsearch文件调整JVM内存大小"></a>1、修改/etc/sysconfig/elasticsearch文件调整JVM内存大小</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#ES_JAVA_OPTS=&quot;-Xms16g -Xmx16g&quot; (内存大小也可以在/etc/elasticsearch/jvm.options配置文件中定义，或者ES_HEAP_SIZE=16g)</span><br><span class="hljs-attr">JAVA_HOME</span>=/usr/java/jdk1.<span class="hljs-number">8.0</span>_51<br><span class="hljs-attr">ES_HEAP_SIZE</span>=<span class="hljs-number">16</span>g<br><span class="hljs-attr">MAX_OPEN_FILES</span>=<span class="hljs-number">655350</span><br><span class="hljs-attr">MAX_LOCKED_MEMORY</span>=unlimited<br></code></pre></td></tr></table></figure><p>替换16g为总内存的一半（Elasticsearch官方建议是主机总内存的一半）</p><h6 id="2、修改-etc-security-limits-conf文件内容"><a href="#2、修改-etc-security-limits-conf文件内容" class="headerlink" title="2、修改/etc/security/limits.conf文件内容"></a>2、修改/etc/security/limits.conf文件内容</h6><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">elasticsearch <span class="hljs-keyword">soft</span> memlock unlimited<br>elasticsearch hard memlock unlimited<br></code></pre></td></tr></table></figure><p>需要将elasticsearch替换为运行Elasticsearch程序的用户,使用root执行：service elasticsearch start实际上是以elasticsearch用户来执行</p><h6 id="3、在-etc-systemd-system-elasticsearch-service-d目录下创建一个文件override-conf，并添加下列内容"><a href="#3、在-etc-systemd-system-elasticsearch-service-d目录下创建一个文件override-conf，并添加下列内容" class="headerlink" title="3、在/etc/systemd/system/elasticsearch.service.d目录下创建一个文件override.conf，并添加下列内容"></a>3、在/etc/systemd/system/elasticsearch.service.d目录下创建一个文件override.conf，并添加下列内容</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Service]<br>LimitMEMLOCK=infinity<br>详情可以参考：https:<span class="hljs-regexp">//</span>www.elastic.co<span class="hljs-regexp">/guide/</span>en<span class="hljs-regexp">/elasticsearch/</span>reference<span class="hljs-regexp">/current/</span>setting-system-settings.html<span class="hljs-comment">#systemd</span><br></code></pre></td></tr></table></figure><h6 id="4、最后重新载入配置文件更新服务"><a href="#4、最后重新载入配置文件更新服务" class="headerlink" title="4、最后重新载入配置文件更新服务"></a>4、最后重新载入配置文件更新服务</h6><p>systemctl daemon-reload</p><h6 id="5、重启elasticsearch"><a href="#5、重启elasticsearch" class="headerlink" title="5、重启elasticsearch"></a>5、重启elasticsearch</h6><p>service elasticsearch restart</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall&quot;&gt;https://www.elastic.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kubernetes之secret</title>
    <link href="http://www.leiyawu.com/2018/11/14/kubernetes%E4%B9%8Bsecret/"/>
    <id>http://www.leiyawu.com/2018/11/14/kubernetes%E4%B9%8Bsecret/</id>
    <published>2018-11-14T07:36:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Secret解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。</p><h4 id="Secret类型："><a href="#Secret类型：" class="headerlink" title="Secret类型："></a>Secret类型：</h4><ol><li>Opaque：base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱。</li><li>kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。</li><li>kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/kubernetes.io/serviceaccount中。</li></ol><h5 id="1-Opaque-Secret"><a href="#1-Opaque-Secret" class="headerlink" title="1.Opaque Secret"></a>1.Opaque Secret</h5><p>Opaque类型的数据是一个map类型，要求value是base64编码格式： 比如来创建一个用户名为：admin，密码为： 1f2d1e2e67df的Secret 对象，首先把这用户名和密码做base64编码，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;admin&quot;</span> | base64</span><br>YWRtaW4=<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;1f2d1e2e67df&quot;</span> | base64</span><br>MWYyZDFlMmU2N2Rm<br></code></pre></td></tr></table></figure><p>然后就可以利用上面编码过后的数据来编写一个YAML文件：(secrets.yml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysecret<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  password:</span> MWYyZDFlMmU2N2Rm<br><span class="hljs-symbol">  username:</span> YWRtaW4=<br></code></pre></td></tr></table></figure><p>同样的就可以使用kubectl命令来创建了： 创建secret：kubectl create -f secrets.yml。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get secret</span><br><span class="hljs-attribute">NAME</span>                  TYPE                                  DATA      AGE<br><span class="hljs-attribute">default</span>-token-xxx   kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">45</span>d<br><span class="hljs-attribute">mysecret</span>              Opaque                                <span class="hljs-number">2</span>         <span class="hljs-number">7</span>s<br></code></pre></td></tr></table></figure><p>注意：其中default-token-xxx为创建集群时默认创建的secret，被serviceacount/default引用。 可以使用describe命令查看详情，如果想看到Data里面的详细信息，可以输出成YAML文件进行查看</p><p>如果是从文件创建secret，则可以用更简单的kubectl命令，比如创建tls的secret：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ kubectl <span class="hljs-meta">create</span> secret generic helloworld-tls \<br>  --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=<span class="hljs-meta">key</span>.pem \<br>  --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=cert.pem<br></code></pre></td></tr></table></figure><h5 id="2-Opaque-Secret的使用"><a href="#2-Opaque-Secret的使用" class="headerlink" title="2.Opaque Secret的使用"></a>2.Opaque Secret的使用</h5><p>创建好secret之后，有两种方式来使用它：</p><ul><li>以Volume方式</li><li>以环境变量方式</li><li>以Volume方式挂载制定的key</li></ul><h6 id="将Secret挂载到Volume中"><a href="#将Secret挂载到Volume中" class="headerlink" title="将Secret挂载到Volume中"></a>将Secret挂载到Volume中</h6><p>用一个Pod来验证下Volume挂载，创建一个Pod文件：(secret2-pod.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/my_project_id/pg:v1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/etc/secrets&quot;</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cp</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5432</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><p>查看Pod中对应的信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># ls <span class="hljs-regexp">/etc/</span>secrets<br>password  username<br># cat  <span class="hljs-regexp">/etc/</span>secrets/username<br>admin<br># cat  <span class="hljs-regexp">/etc/</span>secrets/password<br><span class="hljs-number">1</span>f2d1e2e67df<br></code></pre></td></tr></table></figure><p>查看输出日志：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>kubectl logs secret2-pod<br>password<br>username<br></code></pre></td></tr></table></figure><p>可以看到secret把两个key挂载成了两个对应的文件。</p><span id="more"></span><h6 id="将Secret导出到环境变量中"><a href="#将Secret导出到环境变量中" class="headerlink" title="将Secret导出到环境变量中"></a>将Secret导出到环境变量中</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wordpress-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">wordpress</span><br>        <span class="hljs-attr">visualize:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;wordpress&quot;</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;wordpress&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">WORDPRESS_DB_USER</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">WORDPRESS_DB_PASSWORD</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><p>主要上面环境变量中定义的secretKeyRef关键字，和configMapKeyRef比较类似，一个是从Secret对象中获取，一个是从ConfigMap对象中获取</p><p>创建上面的Pod：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> secret1<span class="hljs-literal">-pod</span>.yaml<br>pod <span class="hljs-string">&quot;secret1-pod&quot;</span> created<br></code></pre></td></tr></table></figure><p>然后查看Pod的日志输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl logs secret1-pod<br><span class="hljs-attribute">USERNAME</span>=admin<br><span class="hljs-attribute">PASSWORD</span>=admin321<br></code></pre></td></tr></table></figure><p>可以看到有 USERNAME 和 PASSWORD 两个环境变量输出出来。</p><h6 id="将Secret挂载指定的key"><a href="#将Secret挂载指定的key" class="headerlink" title="将Secret挂载指定的key"></a>将Secret挂载指定的key</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">511</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">tst/psd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">511</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">tst/usr</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/etc/secrets&quot;</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cp</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><p>可以直接用kubectl命令来创建用于docker registry认证的secret：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistrykey <span class="hljs-attribute">--docker-server</span>=DOCKER_REGISTRY_SERVER <span class="hljs-attribute">--docker-username</span>=DOCKER_USER <span class="hljs-attribute">--docker-password</span>=DOCKER_PASSWORD <span class="hljs-attribute">--docker-email</span>=DOCKER_EMAIL<span class="hljs-built_in"></span><br><span class="hljs-built_in">secret </span><span class="hljs-string">&quot;myregistrykey&quot;</span> created.<br></code></pre></td></tr></table></figure><p>查看secret的内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># kubectl get secret myregistrykey  -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br>  .dockercfg: eyJjY3IuY2NzLnRlbmNlbnR5dW4uY29tL3RlbmNlbnR5dW4iOnsidXNlcm5hbWUiOiIzMzIxMzM3OTk0IiwicGFzc3dvcmQiOiIxMjM0NTYuY29tIiwiZW1haWwiOiIzMzIxMzM3OTk0QHFxLmNvbSIsImF1dGgiOiJNek15TVRNek56azVORG94TWpNME5UWXVZMjl0In19<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2017</span><span class="hljs-number">-08</span><span class="hljs-number">-04</span>T02:<span class="hljs-number">06</span>:<span class="hljs-number">05</span>Z<br><span class="hljs-symbol">  name:</span> myregistrykey<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;1374279324&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-meta-keyword">/api/</span>v1<span class="hljs-meta-keyword">/namespaces/</span>default<span class="hljs-meta-keyword">/secrets/</span>myregistrykey<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">78f</span>6a423<span class="hljs-number">-78</span>b9<span class="hljs-number">-11e7</span>-a70a<span class="hljs-number">-525400</span>bc11f0<br><span class="hljs-symbol">type:</span> kubernetes.io/dockercfg<br></code></pre></td></tr></table></figure><p>也可以直接读取~/.dockercfg的内容来创建：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ kubectl <span class="hljs-meta">create</span> secret docker-registry myregistrykey \<br>  --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=<span class="hljs-string">&quot;~/.docker/config.json&quot;</span><br></code></pre></td></tr></table></figure><p>在创建Pod的时候，通过imagePullSecrets来引用刚创建的myregistrykey:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">foo</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">janedoe/awesomeapp:v1</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myregistrykey</span><br></code></pre></td></tr></table></figure><p>kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ kubectl run nginx --image nginx<br>deployment <span class="hljs-string">&quot;nginx&quot;</span> created<br>$ kubectl get pods<br>NAME                     READY     STATUS    RESTARTS   AGE<br>nginx<span class="hljs-number">-3137573019</span>-md1u2   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">13</span>s<br>$ kubectl exec nginx<span class="hljs-number">-3137573019</span>-md1u2 ls /run/secrets/kubernetes.io/serviceaccount<br>ca.crt<br><span class="hljs-keyword">namespace</span><br>token<br></code></pre></td></tr></table></figure><h5 id="Secret与ConfigMap对比"><a href="#Secret与ConfigMap对比" class="headerlink" title="Secret与ConfigMap对比"></a>Secret与ConfigMap对比</h5><p>相同点：</p><ul><li>key/value的形式</li><li>属于某个特定的namespace</li><li>可以导出到环境变量</li><li>可以通过目录/文件形式挂载(支持挂载所有key和部分key)</li></ul><p>不同点：</p><ul><li>Secret可以被ServerAccount关联(使用)</li><li>Secret可以存储register的鉴权信息，用在ImagePullSecret参数中，用于拉取私有仓库的镜像</li><li>Secret支持Base64加密</li><li>Secret分为kubernetes.io/Service Account，kubernetes.io/dockerconfigjson，Opaque三种类型,Configmap不区分类型</li><li>Secret文件存储在tmpfs文件系统中，Pod删除后Secret文件也会对应的删除。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Secret解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。&lt;/p&gt;
&lt;h4 id=&quot;Secret类型：&quot;&gt;&lt;a href=&quot;#Secret类型：&quot; class=&quot;headerlink&quot; title=&quot;Secret类型：&quot;&gt;&lt;/a&gt;Secret类型：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Opaque：base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱。&lt;/li&gt;
&lt;li&gt;kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。&lt;/li&gt;
&lt;li&gt;kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/kubernetes.io/serviceaccount中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;1-Opaque-Secret&quot;&gt;&lt;a href=&quot;#1-Opaque-Secret&quot; class=&quot;headerlink&quot; title=&quot;1.Opaque Secret&quot;&gt;&lt;/a&gt;1.Opaque Secret&lt;/h5&gt;&lt;p&gt;Opaque类型的数据是一个map类型，要求value是base64编码格式： 比如来创建一个用户名为：admin，密码为： 1f2d1e2e67df的Secret 对象，首先把这用户名和密码做base64编码，&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt; | base64&lt;/span&gt;&lt;br&gt;YWRtaW4=&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;1f2d1e2e67df&amp;quot;&lt;/span&gt; | base64&lt;/span&gt;&lt;br&gt;MWYyZDFlMmU2N2Rm&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以利用上面编码过后的数据来编写一个YAML文件：(secrets.yml)&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs dts&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;kind:&lt;/span&gt; Secret&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;  name:&lt;/span&gt; mysecret&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;type:&lt;/span&gt; Opaque&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;  password:&lt;/span&gt; MWYyZDFlMmU2N2Rm&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;  username:&lt;/span&gt; YWRtaW4=&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的就可以使用kubectl命令来创建了： 创建secret：kubectl create -f secrets.yml。&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs apache&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# kubectl get secret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;NAME&lt;/span&gt;                  TYPE                                  DATA      AGE&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;default&lt;/span&gt;-token-xxx   kubernetes.io/service-account-token   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;d&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;mysecret&lt;/span&gt;              Opaque                                &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;s&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：其中default-token-xxx为创建集群时默认创建的secret，被serviceacount/default引用。 可以使用describe命令查看详情，如果想看到Data里面的详细信息，可以输出成YAML文件进行查看&lt;/p&gt;
&lt;p&gt;如果是从文件创建secret，则可以用更简单的kubectl命令，比如创建tls的secret：&lt;/p&gt;
&lt;figure class=&quot;highlight sas&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sas&quot;&gt;$ kubectl &lt;span class=&quot;hljs-meta&quot;&gt;create&lt;/span&gt; secret generic helloworld-tls \&lt;br&gt;  --&lt;span class=&quot;hljs-meta&quot;&gt;from&lt;/span&gt;-&lt;span class=&quot;hljs-meta&quot;&gt;file&lt;/span&gt;=&lt;span class=&quot;hljs-meta&quot;&gt;key&lt;/span&gt;.pem \&lt;br&gt;  --&lt;span class=&quot;hljs-meta&quot;&gt;from&lt;/span&gt;-&lt;span class=&quot;hljs-meta&quot;&gt;file&lt;/span&gt;=cert.pem&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;2-Opaque-Secret的使用&quot;&gt;&lt;a href=&quot;#2-Opaque-Secret的使用&quot; class=&quot;headerlink&quot; title=&quot;2.Opaque Secret的使用&quot;&gt;&lt;/a&gt;2.Opaque Secret的使用&lt;/h5&gt;&lt;p&gt;创建好secret之后，有两种方式来使用它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以Volume方式&lt;/li&gt;
&lt;li&gt;以环境变量方式&lt;/li&gt;
&lt;li&gt;以Volume方式挂载制定的key&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;将Secret挂载到Volume中&quot;&gt;&lt;a href=&quot;#将Secret挂载到Volume中&quot; class=&quot;headerlink&quot; title=&quot;将Secret挂载到Volume中&quot;&gt;&lt;/a&gt;将Secret挂载到Volume中&lt;/h6&gt;&lt;p&gt;用一个Pod来验证下Volume挂载，创建一个Pod文件：(secret2-pod.yaml)&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attr&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attr&quot;&gt;spec:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;volumes:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;secrets&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;secret:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;secretName:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;mysecret&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;containers:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;registry.martin.com:5000/my_project_id/pg:v1&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;volumeMounts:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;secrets&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;mountPath:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/etc/secrets&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;readOnly:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;ports:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cp&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;containerPort:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5432&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;hostPort:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5432&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看Pod中对应的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs gradle&quot;&gt;# ls &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;secrets&lt;br&gt;password  username&lt;br&gt;# cat  &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;secrets/username&lt;br&gt;admin&lt;br&gt;# cat  &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;secrets/password&lt;br&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;f2d1e2e67df&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看输出日志：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs elixir&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;kubectl logs secret2-pod&lt;br&gt;password&lt;br&gt;username&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到secret把两个key挂载成了两个对应的文件。&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>生成k8s证书的三种方式</title>
    <link href="http://www.leiyawu.com/2018/08/21/%E7%94%9F%E6%88%90k8s%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.leiyawu.com/2018/08/21/%E7%94%9F%E6%88%90k8s%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2018-08-21T09:53:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据官方文档，生成k8s秘钥证书及相关管理证书有三种方式，其本质都是通过openssl:</p><ul><li>cfssl</li><li>easyrsa</li><li>openssl</li></ul><p>官方文档：<a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/">https://kubernetes.io/docs/concepts/cluster-administration/certificates/</a></p><h5 id="cfssl方式"><a href="#cfssl方式" class="headerlink" title="cfssl方式"></a>cfssl方式</h5><h6 id="1-cfssl下载地址"><a href="#1-cfssl下载地址" class="headerlink" title="1.cfssl下载地址:"></a>1.cfssl下载地址:</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">VERSION=R1.<span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;cfssl,cfssljson,cfssl-certinfo&#125;<br><span class="hljs-keyword">do</span><br>wget https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/$&#123;VERSION&#125;/</span><span class="hljs-variable">$&#123;i&#125;</span>_linux-amd64 -O <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><span class="hljs-variable">$&#123;i&#125;</span><br>done<br></code></pre></td></tr></table></figure><h6 id="2-生成CA配置文件"><a href="#2-生成CA配置文件" class="headerlink" title="2.生成CA配置文件"></a>2.生成CA配置文件</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir ssl &amp;&amp; cd ssl<br>cfssl print-defaults config &gt; config.json<br>cfssl print-defaults csr &gt; csr.json<br>cat &gt; ca-config.json &lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="3-生成CA签名配置文件"><a href="#3-生成CA签名配置文件" class="headerlink" title="3.生成CA签名配置文件"></a>3.生成CA签名配置文件</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> &gt; <span class="hljs-keyword">ca</span>-csr.json &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>:[&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>  &#125;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><span id="more"></span><h6 id="4-生成私钥和证书"><a href="#4-生成私钥和证书" class="headerlink" title="4.生成私钥和证书"></a>4.生成私钥和证书</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cfssl gencert -initca <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span><br></code></pre></td></tr></table></figure><h6 id="5-创建一个用于生成API-Server的密钥和证书的JSON配置文件"><a href="#5-创建一个用于生成API-Server的密钥和证书的JSON配置文件" class="headerlink" title="5.创建一个用于生成API Server的密钥和证书的JSON配置文件"></a>5.创建一个用于生成API Server的密钥和证书的JSON配置文件</h6><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cat &gt; kubernetes-csr.<span class="hljs-keyword">json </span>&lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;MASTER_IP&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;MASTER_CLUSTER_IP&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>  &#125;]<br>&#125; <br>EOF<br><span class="hljs-comment">#该文件需要包含所有使用该证书的ip和域名列表，包括etcd集群、kubernetes master集群、以及apiserver 集群内部cluster ip。</span><br></code></pre></td></tr></table></figure><h6 id="6-生成-kubernetes-证书和私钥"><a href="#6-生成-kubernetes-证书和私钥" class="headerlink" title="6.生成 kubernetes 证书和私钥"></a>6.生成 kubernetes 证书和私钥</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes<br></code></pre></td></tr></table></figure><h6 id="7-创建admin证书"><a href="#7-创建admin证书" class="headerlink" title="7.创建admin证书"></a>7.创建admin证书</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat &gt; <span class="hljs-keyword">admin</span>-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;admin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;system:masters&quot;,<br>      &quot;OU&quot;: &quot;System&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes <span class="hljs-keyword">admin</span>-csr.json | cfssljson -bare <span class="hljs-keyword">admin</span><br># 证书O配置为<span class="hljs-keyword">system</span>:masters 在集群内部<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span>的clusterrolebinding将<span class="hljs-keyword">system</span>:masters组和<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span> clusterrole绑定在一起<br></code></pre></td></tr></table></figure><h6 id="8-创建kube-proxy证书"><a href="#8-创建kube-proxy证书" class="headerlink" title="8.创建kube-proxy证书"></a>8.创建kube-proxy证书</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> &gt; kube-proxy-csr.json &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br>cfssl gencert -<span class="hljs-keyword">ca</span>=<span class="hljs-keyword">ca</span>.pem -<span class="hljs-keyword">ca</span>-key=<span class="hljs-keyword">ca</span>-key.pem -config=<span class="hljs-keyword">ca</span>-config.json -<span class="hljs-keyword">profile</span>=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy<br># 该证书用户名为<span class="hljs-built_in">system</span>:kube-proxy，预定义的<span class="hljs-built_in">system</span>:node-proxier clusterrolebindings将 <span class="hljs-built_in">system</span>:kube-proxy用户和<span class="hljs-built_in">system</span>:node-proxier角色绑定在一起<br></code></pre></td></tr></table></figure><h6 id="9-校验证书信息"><a href="#9-校验证书信息" class="headerlink" title="9.校验证书信息"></a>9.校验证书信息</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cfssl</span>-certinfo -cert kubernetes.pem<br><span class="hljs-attribute">openssl</span> x<span class="hljs-number">509</span>  -noout -text -in  kubernetes.pem<br></code></pre></td></tr></table></figure><h6 id="10-拷贝证书"><a href="#10-拷贝证书" class="headerlink" title="10.拷贝证书"></a>10.拷贝证书</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/ssl/</span> &amp;&amp; cp *.pem <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/ssl/</span><br></code></pre></td></tr></table></figure><h5 id="easyrsa方式"><a href="#easyrsa方式" class="headerlink" title="easyrsa方式"></a>easyrsa方式</h5><h6 id="1-下载："><a href="#1-下载：" class="headerlink" title="1.下载："></a>1.下载：</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">curl -L -O https:<span class="hljs-string">//storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz</span><br>tar xzf easy-rsa.tar.gz<br><span class="hljs-keyword">cd</span> easy-rsa-master/easyrsa3<br><span class="hljs-string">./easyrsa</span> init-pki<br><span class="hljs-string">./easyrsa</span> <span class="hljs-params">--batch</span> <span class="hljs-string">&quot;--req-cn=172.26.6.1@`date +%s`&quot;</span> build-ca nopass<br></code></pre></td></tr></table></figure><h6 id="2-生成-kubernetes-证书和私钥"><a href="#2-生成-kubernetes-证书和私钥" class="headerlink" title="2.生成 kubernetes 证书和私钥"></a>2.生成 kubernetes 证书和私钥</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">./easyrsa --<span class="hljs-attr">subject-alt-name=</span><span class="hljs-string">&quot;IP:172.26.6.1,IP:10.254.0.1,DNS:kubernetes.default&quot;</span> build-server-full kubernetes-<span class="hljs-keyword">master</span> <span class="hljs-title">nopass</span><br></code></pre></td></tr></table></figure><h6 id="3-签发admin证书"><a href="#3-签发admin证书" class="headerlink" title="3.签发admin证书"></a>3.签发admin证书</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./easyrsa</span> <span class="hljs-params">--dn-mode=org</span> <span class="hljs-params">--req-cn=admin</span> <span class="hljs-params">--req-org=system</span><span class="hljs-function">:masters</span> <span class="hljs-params">--req-c=</span> <span class="hljs-params">--req-st=</span> <span class="hljs-params">--req-city=</span> <span class="hljs-params">--req-email=</span> <span class="hljs-params">--req-ou=</span> build-client-full admin nopass<br></code></pre></td></tr></table></figure><h5 id="openssl方式"><a href="#openssl方式" class="headerlink" title="openssl方式"></a>openssl方式</h5><h6 id="1-生成ca"><a href="#1-生成ca" class="headerlink" title="1.生成ca"></a>1.生成ca</h6><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-meta">out</span> ca.<span class="hljs-meta">key</span> 2048<br>openssl req -x509 -new -nodes -<span class="hljs-meta">key</span> ca.<span class="hljs-meta">key</span> -subj <span class="hljs-string">&quot;/CN=172.26.6.1&quot;</span> -days 10000 -<span class="hljs-meta">out</span> ca.crt<br></code></pre></td></tr></table></figure><h6 id="2-kubernetes证书和私钥"><a href="#2-kubernetes证书和私钥" class="headerlink" title="2.kubernetes证书和私钥"></a>2.kubernetes证书和私钥</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out server<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>cat &gt;csr<span class="hljs-selector-class">.conf</span> &lt;&lt;EOF<br><span class="hljs-selector-attr">[ req ]</span><br>default_bits = <span class="hljs-number">2048</span><br>prompt = no<br>default_md = sha256<br>req_extensions = req_ext<br>distinguished_name = dn<br>    <br><span class="hljs-selector-attr">[ dn ]</span><br>C = &lt;country&gt;<br>ST = &lt;state&gt;<br>L = &lt;city&gt;<br>O = &lt;organization&gt;<br>OU = &lt;organization unit&gt;<br>CN = <span class="hljs-number">172.26</span>.<span class="hljs-number">6.1</span><br>    <br><span class="hljs-selector-attr">[ req_ext ]</span><br>subjectAltName = @alt_names<br>    <br><span class="hljs-selector-attr">[ alt_names ]</span><br>DNS.<span class="hljs-number">1</span> = kubernetes<br>DNS.<span class="hljs-number">2</span> = kubernetes<span class="hljs-selector-class">.default</span><br>DNS.<span class="hljs-number">3</span> = kubernetes<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><br>DNS.<span class="hljs-number">4</span> = kubernetes<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><br>DNS.<span class="hljs-number">5</span> = kubernetes<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span><br>IP.<span class="hljs-number">1</span> = <span class="hljs-number">172.26</span>.<span class="hljs-number">6.1</span><br>IP.<span class="hljs-number">2</span> = <span class="hljs-number">10.254</span>.<span class="hljs-number">0.1</span><br>    <br><span class="hljs-selector-attr">[ v3_ext ]</span><br>authorityKeyIdentifier=keyid,issuer:always<br>basicConstraints=CA:FALSE<br>keyUsage=keyEncipherment,dataEncipherment<br>extendedKeyUsage=serverAuth,clientAuth<br>subjectAltName=@alt_names<br>EOF<br><br>openssl req -new -key server<span class="hljs-selector-class">.key</span> -out server<span class="hljs-selector-class">.csr</span> -config csr<span class="hljs-selector-class">.conf</span><br>openssl x509 -req -<span class="hljs-keyword">in</span> server<span class="hljs-selector-class">.csr</span> -CA ca<span class="hljs-selector-class">.crt</span> -CAkey ca<span class="hljs-selector-class">.key</span> -CAcreateserial -out server<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span> -extensions v3_ext -extfile csr<span class="hljs-selector-class">.conf</span><br>openssl x509  -noout -text -<span class="hljs-keyword">in</span> ./server.crt<br></code></pre></td></tr></table></figure><h6 id="3-admin证书"><a href="#3-admin证书" class="headerlink" title="3.admin证书"></a>3.admin证书</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.key <span class="hljs-number">2048</span><br>openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">admin</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.csr -subj &quot;/O=system:masters/CN=dmin&quot;<br>openssl x509 -req -set_serial $(<span class="hljs-type">date</span> +%s%N) -<span class="hljs-keyword">in</span> <span class="hljs-keyword">admin</span>.csr -CA ca.crt -CAkey ca.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.crt -days <span class="hljs-number">365</span> -extensions v3_req -extfile req.conf<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据官方文档，生成k8s秘钥证书及相关管理证书有三种方式，其本质都是通过openssl:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cfssl&lt;/li&gt;
&lt;li&gt;easyrsa&lt;/li&gt;
&lt;li&gt;openssl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/certificates/&quot;&gt;https://kubernetes.io/docs/concepts/cluster-administration/certificates/&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;cfssl方式&quot;&gt;&lt;a href=&quot;#cfssl方式&quot; class=&quot;headerlink&quot; title=&quot;cfssl方式&quot;&gt;&lt;/a&gt;cfssl方式&lt;/h5&gt;&lt;h6 id=&quot;1-cfssl下载地址&quot;&gt;&lt;a href=&quot;#1-cfssl下载地址&quot; class=&quot;headerlink&quot; title=&quot;1.cfssl下载地址:&quot;&gt;&lt;/a&gt;1.cfssl下载地址:&lt;/h6&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;VERSION=R1.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;#123;cfssl,cfssljson,cfssl-certinfo&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;wget https:&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;pkg.cfssl.org&lt;span class=&quot;hljs-regexp&quot;&gt;/$&amp;#123;VERSION&amp;#125;/&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;_linux-amd64 -O &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;hljs-regexp&quot;&gt;/bin/&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;&lt;br&gt;done&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;2-生成CA配置文件&quot;&gt;&lt;a href=&quot;#2-生成CA配置文件&quot; class=&quot;headerlink&quot; title=&quot;2.生成CA配置文件&quot;&gt;&lt;/a&gt;2.生成CA配置文件&lt;/h6&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs arduino&quot;&gt;mkdir ssl &amp;amp;&amp;amp; cd ssl&lt;br&gt;cfssl print-defaults config &amp;gt; config.json&lt;br&gt;cfssl print-defaults csr &amp;gt; csr.json&lt;br&gt;cat &amp;gt; ca-config.json &amp;lt;&amp;lt;EOF&lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;signing&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;      &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;expiry&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;87600h&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;profiles&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;      &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;kubernetes&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;usages&amp;quot;&lt;/span&gt;: [&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;signing&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;key encipherment&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;server auth&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;client auth&amp;quot;&lt;/span&gt;&lt;br&gt;        ],&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;expiry&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;87600h&amp;quot;&lt;/span&gt;&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;EOF&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;3-生成CA签名配置文件&quot;&gt;&lt;a href=&quot;#3-生成CA签名配置文件&quot; class=&quot;headerlink&quot; title=&quot;3.生成CA签名配置文件&quot;&gt;&lt;/a&gt;3.生成CA签名配置文件&lt;/h6&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs stata&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ca&lt;/span&gt;-csr.json &amp;lt;&amp;lt; EOF&lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;CN&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;kubernetes&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;algo&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;rsa&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 2048&lt;br&gt;  &amp;#125;,&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;names&amp;quot;&lt;/span&gt;:[&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;CN&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;ST&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Beijing&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;BeiJing&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;O&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;k8s&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;OU&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;System&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;]&lt;br&gt;&amp;#125;&lt;br&gt;EOF&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>只在移动端网页内显示”Fork me on Github”</title>
    <link href="http://www.leiyawu.com/2018/08/19/%E5%8F%AA%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%86%85%E6%98%BE%E7%A4%BA%E2%80%9DFork-me-on-Github%E2%80%9D/"/>
    <id>http://www.leiyawu.com/2018/08/19/%E5%8F%AA%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%86%85%E6%98%BE%E7%A4%BA%E2%80%9DFork-me-on-Github%E2%80%9D/</id>
    <published>2018-08-19T07:48:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块"><a href="#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块" class="headerlink" title="1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块"></a>1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;_partials/head.swig&#x27; %&#125;</span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-添加代码，结果如下："><a href="#2-添加代码，结果如下：" class="headerlink" title="2.添加代码，结果如下："></a>2.添加代码，结果如下：</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;_partials/head.swig&#x27; %&#125;</span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;_third-party/analytics/index.swig&#x27; %&#125;</span><span class="xml"></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.forkMeOnGithub</span>&#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">display</span>: none;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.forkMeOnGithub</span>&#123;</span></span><br><span class="css"><span class="xml">   <span class="hljs-attribute">display</span>: inline;</span></span><br><span class="css"><span class="xml">   &#125;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="3-最后在之前引用代码块上套上div加上class就行了，代码如下"><a href="#3-最后在之前引用代码块上套上div加上class就行了，代码如下" class="headerlink" title="3.最后在之前引用代码块上套上div加上class就行了，代码如下"></a>3.最后在之前引用代码块上套上div加上class就行了，代码如下</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;forkMeOnGithub&quot;</span>&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://github.com/hannius&quot;</span>&gt;&lt;img <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;position........&lt;/a&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块&quot;&gt;&lt;a href=&quot;#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes RBAC  Detailed</title>
    <link href="http://www.leiyawu.com/2018/06/27/bernetes-RBAC-Detailed/"/>
    <id>http://www.leiyawu.com/2018/06/27/bernetes-RBAC-Detailed/</id>
    <published>2018-06-27T10:47:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>RBAC - 基于角色的访问控制<br>RBAC使用：rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/kube-apiserver.service<br>或者是：<br>$ cat <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-apiserver.yaml<br>...<br>    - --authorization-mode=Node,RBAC<br>...<br></code></pre></td></tr></table></figure><p>如果是二进制的方式搭建的集群，添加这个参数过后，记得要重启 apiserver 服务。</p><hr><h3 id="RBAC-API-对象"><a href="#RBAC-API-对象" class="headerlink" title="RBAC API 对象"></a>RBAC API 对象</h3><p>Kubernetes有一个很基本的特性就是它的所有资源对象都是模型化的 API 对象，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：</p><ul><li>Pods</li><li>ConfigMaps</li><li>Deployments</li><li>Nodes</li><li>Secrets</li><li>Namespaces</li></ul><p>上面这些资源对象的可能存在的操作有：</p><ul><li>create</li><li>get</li><li>delete</li><li>list</li><li>update</li><li>edit</li><li>watch</li><li>exec</li></ul><p>在更上层，这些资源和API Group 进行关联，比如Pods属于Core API Group，而Deployements属于 apps API Group，要在Kubernetes中进行RBAC的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：</p><ol><li>Rule：规则，规则是一组属于不同API Group 资源上的一组操作的集合</li><li>Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的Rules 元素，二者的区别在于，在Role 中，定义的规则只适用于单个命名空间，也就是和namespace 关联的，而ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外Role和 ClusterRole在Kubernetes中都被定义为集群内部的API 资源，和Pod、ConfigMap 这些类似，都是集群的资源对象，所以同样的可以使用kubectl相关的命令来进行操作</li><li>Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：</li></ol><ul><li>User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用KeyStone或者Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的API 来进行管理</li><li>Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin</li><li>Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和namespace 进行关联的，适用于集群内部运行的应用程序，需要通过API 来完成权限认证，所以在集群内部进行权限操作，都需要使用到 ServiceAccount</li></ul><ol start="4"><li>RoleBinding和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的Subject和Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding只会影响到当前namespace 下面的资源操作权限，而ClusterRoleBinding会影响到所有的 namespace。</li></ol><span id="more"></span><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>通过如下示例来演示RBAC的配置方法：</p><h4 id="创建一个只能访问某个-namespace-的用户"><a href="#创建一个只能访问某个-namespace-的用户" class="headerlink" title="创建一个只能访问某个 namespace 的用户"></a>创建一个只能访问某个 namespace 的用户</h4><p>创建一个 User Account，只能访问 kube-system这个命名空间：</p><ul><li>username: martin</li><li>group: op</li></ul><h5 id="第一步：创建用户凭证"><a href="#第一步：创建用户凭证" class="headerlink" title="第一步：创建用户凭证"></a>第一步：创建用户凭证</h5><p>Kubernetes没有User Account的API 对象，不过要创建一个用户帐号的话也是挺简单的，利用管理员分配的一个私钥就可以创建了。<br>创建方法有两种:</p><h6 id="1-使用OpenSSL证书来创建User；"><a href="#1-使用OpenSSL证书来创建User；" class="headerlink" title="1. 使用OpenSSL证书来创建User；"></a>1. 使用OpenSSL证书来创建User；</h6><ul><li>给用户martin创建一个私钥，命名成：martin.key：</li></ul><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ openssl genrsa -<span class="hljs-meta">out</span> martin.<span class="hljs-meta">key</span> 2048<br></code></pre></td></tr></table></figure><ul><li>使用刚刚创建的私钥创建一个证书签名请求文件：martin.csr，要注意需要确保在-subj参数中指定用户名和组(CN表示用户名，O表示组)：</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ openssl req -<span class="hljs-built_in">new</span> -<span class="hljs-built_in">key</span> martin.<span class="hljs-built_in">key</span> -out martin.csr -subj <span class="hljs-string">&quot;/CN=martin/O=op&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>然后找到Kubernetes集群的CA，我们使用的是kubeadm安装的集群，CA相关证书位于/etc/kubernetes/pki/目录下面，如果是二进制方式搭建的，应该在最开始搭建集群的时候就已经指定好了CA的目录(/data/kubernetes/ssl)，然后利用该目录下面的ca.crt和ca.key两个文件来批准上面的证书请求</p></li><li><p>生成最终的证书文件，这里设置证书的有效期为500天</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ openssl x509 -req -<span class="hljs-keyword">in</span> martin.csr -CA <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>ca.crt -CAkey <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>ca.key -CAcreateserial -out martin.crt -days <span class="hljs-number">500</span><br>现在查看当前文件夹下面是否生成了一个证书文件：<br>$ ls<br>martin.csr martin.key martin.crt<br></code></pre></td></tr></table></figure><ul><li>现在可以使用刚刚创建的证书文件和私钥文件在集群中创建新的凭证和上下文(Context):</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">martin</span> <span class="hljs-built_in">--client-certificate=martin.crt</span>  <span class="hljs-built_in">--client-key=martin.key</span><br></code></pre></td></tr></table></figure><ul><li>可以看到一个用户martin创建了，然后为这个用户设置新的 Context:</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">martin-context</span> <span class="hljs-built_in">--cluster=kubernetes</span> <span class="hljs-built_in">--namespace=kube-system</span> <span class="hljs-built_in">--user=martin</span><br></code></pre></td></tr></table></figure><p>到这里，用户martin就已经创建成功了，现在使用当前的这个配置文件来操作kubectl命令的时候，应该会出现错误，因为还没有为该用户定义任何操作的权限：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-builtin-name">get</span> pods <span class="hljs-attribute">--context</span>=martin-context<br><span class="hljs-builtin-name">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;martin&quot;</span> cannot list pods <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br></code></pre></td></tr></table></figure><h6 id="2-使用cfssl工具来创建，也是参考官方文档中的方法。"><a href="#2-使用cfssl工具来创建，也是参考官方文档中的方法。" class="headerlink" title="2. 使用cfssl工具来创建，也是参考官方文档中的方法。"></a>2. 使用cfssl工具来创建，也是参考官方文档中的方法。</h6><ul><li><p>CFSSL是CloudFlare开源的一款PKI/TLS工具。 CFSSL 包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。</p></li><li><p>CFSSL包括：</p><ul><li>一组用于生成自定义TLS PKI的工具</li><li>cfssl程序，是CFSSL的命令行工具</li><li>multirootca程序是可以使用多个签名密钥的证书颁发机构服务器</li><li>mkbundle程序用于构建证书池</li><li>cfssljson程序，从cfssl和multirootca程序获取JSON输出，并将证书，密钥，CSR和bundle写入磁盘</li></ul></li><li><p>PKI借助数字证书和公钥加密技术提供可信任的网络身份。通常，证书就是一个包含如下身份信息的文件：</p><ul><li>证书所有组织的信息</li><li>公钥</li><li>证书颁发组织的信息</li><li>证书颁发组织授予的权限，如证书有效期、适用的主机名、用途等</li><li>使用证书颁发组织私钥创建的数字签名</li></ul></li><li><p>cfssl工具，子命令介绍：</p><ul><li>bundle: 创建包含客户端证书的证书包</li><li>genkey: 生成一个key(私钥)和CSR(证书签名请求)</li><li>scan: 扫描主机问题</li><li>revoke: 吊销证书</li><li>certinfo: 输出给定证书的证书信息，跟cfssl-certinfo 工具作用一样</li><li>gencrl: 生成新的证书吊销列表</li><li>selfsign: 生成一个新的自签名密钥和签名证书</li><li>print-defaults: 打印默认配置，这个默认配置可以用作模板</li><li>serve: 启动一个HTTP API服务</li><li>gencert: 生成新的key(密钥)和签名证书</li><li>-ca：指明ca的证书</li><li>-ca-key：指明ca的私钥文件</li><li>-config：指明请求证书的json文件</li><li>-profile：与-config中的profile对应，是指根据config中的prof  ile段来生成证书的相关信息</li><li>ocspdump</li><li>ocspsign</li><li>info: 获取有关远程签名者的信息</li><li>sign: 签名一个客户端证书，通过给定的CA和CA密钥，和主机名</li><li>ocsprefresh</li><li>ocspserve</li></ul></li><li><p>创建认证中心(CA)，也就是Kubernetes集群的CA，上面用openssl时已经将其省略了，现cfssl操作说明下详细方法：</p><ol><li><p>CFSSL可以创建一个获取和操作证书的内部认证中心。运行认证中心需要一个CA证书和相应的CA私钥。任何知道私钥的人都可以充当CA颁发证书。因此，私钥的保护至关重要。</p></li><li><p>创建用来生成CA文件的JSON配置文件,配置证书生成策略，让CA软件知道颁发什么样的证书。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs axapta">[root@linux-node1 ssl]<span class="hljs-meta"># vim ca-config.json</span><br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>这个策略，有一个默认的配置，和一个profile，可以设置多个profile，这里的profile   是kubernetes。<br>默认策略，指定了证书的有效期是一年(<span class="hljs-number">8760</span>h)<br>kubernetes策略，指定了证书的用途<br>signing, 表示该证书可用于签名其它证书；生成的ca.pem 证书中   CA=TRUE<br><span class="hljs-keyword">server</span> auth：表示<span class="hljs-keyword">client</span>可以用该CA对<span class="hljs-keyword">server</span>提供的证书进行验证<br><span class="hljs-keyword">client</span> auth：表示<span class="hljs-keyword">server</span>可以用该CA对<span class="hljs-keyword">client</span>提供的证书进行验证<br></code></pre></td></tr></table></figure></li><li><p>创建用来生成CA证书签名请求（CSR）的JSON配置文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@linux-node1 ssl]<span class="hljs-comment"># vim ca-csr.json</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-section">术语介绍:</span><br><span class="hljs-section">CN: Common Name，浏览器使用该字段验证网站是否合法，一般写的是域名。非常重要。浏览器使用该字段验证网站是否合法</span><br><span class="hljs-section">C: Country， 国家</span><br><span class="hljs-section">L: Locality，地区，城市</span><br><span class="hljs-section">O: Organization Name，组织名称，公司名称</span><br><span class="hljs-section">OU: Organization Unit Name，组织单位名称，公司部门</span><br><span class="hljs-section">ST: State，州，省</span><br></code></pre></td></tr></table></figure></li><li><p>生成CA证书（ca.pem）和私钥（ca-key.pem）  </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@ linux-node1 ssl]<span class="hljs-comment"># cfssl gencert -initca ca-csr.json |   cfssljson -bare ca  </span><br><span class="hljs-comment">#初始化ca</span><br>[root@ linux-node1 ssl]<span class="hljs-comment"># ls -l ca*</span><br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 290 </span>Mar <span class="hljs-number"> 4 </span>13:45 ca-config.json<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1001 </span>Mar <span class="hljs-number"> 4 </span>14:09 ca.csr<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 208 </span>Mar <span class="hljs-number"> 4 </span>13:51 ca-csr.json<br>-rw-------<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1679 </span>Mar <span class="hljs-number"> 4 </span>14:09 ca-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1359 </span>Mar <span class="hljs-number"> 4 </span>14:09 ca.pem<br>该命令会生成运行CA所必需的文件ca-key.pem（私钥）和ca.pem（证书），还会生成ca.csr（证书签名请求），用于交叉签名或重新签名。<br></code></pre></td></tr></table></figure><p>小提示：</p></li></ol><ul><li>使用现有的CA私钥，重新生成：</li></ul> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cfssl gencert -initca -<span class="hljs-keyword">ca</span>-key key.pem <span class="hljs-keyword">ca</span>-csr.json |     cfssljson -bare <span class="hljs-keyword">ca</span><br></code></pre></td></tr></table></figure><ul><li>使用现有的CA私钥和CA证书，重新生成：</li></ul> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">cfssl gencert -renewca -ca cert.pem -ca-<span class="hljs-type">key</span> <span class="hljs-type">key</span>.pem<br></code></pre></td></tr></table></figure><ul><li>查看cert(证书信息)：cfssl certinfo -cert ca.pem</li><li>查看CSR(证书签名请求)信息：cfssl certinfo -csr ca.csr</li></ul></li><li><p>创建martin证书签名请求(Kubernetes集群的CA创建好了，再根据该CA证书来创建一个只能访问某个namespace的用户)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  martin cat martin-csr.json <br>&#123;<br>  &quot;CN&quot;: &quot;martin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;op&quot;, #<span class="hljs-keyword">system</span>:masters<br>      &quot;OU&quot;: &quot;System&quot;<br>    &#125;<br>  ]<br>&#125;<br>➜  martin <br>后续kube-apiserver使用RBAC对客户端(如kubelet、kube-proxy、Pod)请求进行授权；<br>kube-apiserver预定义了一些RBAC使用的RoleBindings，如<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span>将<span class="hljs-keyword">Group</span> op(<span class="hljs-keyword">system</span>:masters)与 <span class="hljs-keyword">Role</span> <span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span> 绑定，该<span class="hljs-keyword">Role</span>授予了调用kube-apiserver的所有API的权限；<br>OU指定该证书的<span class="hljs-keyword">Group</span>为op(<span class="hljs-keyword">system</span>:masters)，kubelet使用该证书访问 kube-apiserver时,由于证书被CA签名，所以认证通过，同时由于证书用户组为经过预授权的op(<span class="hljs-keyword">system</span>:masters)，所以被授予访问所有 API 的权限；<br></code></pre></td></tr></table></figure></li><li><p>生成martin证书和私钥</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  martin ls -lth<br>total <span class="hljs-number">4.0</span>K<br>-rw-r<span class="hljs-comment">--r-- 1 root root 218 Jun 26 11:59 martin-csr.json</span><br>➜  martin cfssl gencert -ca=/data/kubernetes/ssl/ca.pem -ca-key=/data/kubernetes/ssl/ca-key.pem -config=/data/kubernetes/ssl/ca-config.json -profile=kubernetes martin-csr.json|cfssljson -bare martin<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">37</span> [<span class="hljs-keyword">INFO</span>] generate received request<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">37</span> [<span class="hljs-keyword">INFO</span>] received CSR<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">37</span> [<span class="hljs-keyword">INFO</span>] generating key: rsa<span class="hljs-number">-2048</span><br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">38</span> [<span class="hljs-keyword">INFO</span>] encoded CSR<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">38</span> [<span class="hljs-keyword">INFO</span>] signed certificate <span class="hljs-keyword">with</span> <span class="hljs-type">serial</span> number <span class="hljs-number">451530418945753741698899402739082416074910829402</span><br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">38</span> [<span class="hljs-built_in">WARNING</span>] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable <span class="hljs-keyword">for</span><br>websites. <span class="hljs-keyword">For</span> more information see the Baseline Requirements <span class="hljs-keyword">for</span> the Issuance <span class="hljs-keyword">and</span> Management<br><span class="hljs-keyword">of</span> Publicly-<span class="hljs-keyword">Trusted</span> Certificates, v<span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-number">.6</span>, <span class="hljs-keyword">from</span> the CA/Browser Forum (https://cabforum.org);<br>specifically, section <span class="hljs-number">10.2</span><span class="hljs-number">.3</span> (&quot;Information Requirements&quot;).<br>➜  martin ls -lth<br>total <span class="hljs-number">16</span>K<br>-rw-r<span class="hljs-comment">--r-- 1 root root  993 Jun 26 16:20 martin.csr</span><br>-rw<span class="hljs-comment">------- 1 root root 1.7K Jun 26 16:20 martin-key.pem</span><br>-rw-r<span class="hljs-comment">--r-- 1 root root 1.4K Jun 26 16:20 martin.pem</span><br>-rw-r<span class="hljs-comment">--r-- 1 root root  218 Jun 26 11:59 martin-csr.json</span><br>➜  martin <br></code></pre></td></tr></table></figure></li><li><p>设置集群参数</p></li></ul><p>本段主要设置了需要访问的集群的信息。使用set-cluster设置了需要访问的集群，如下为kubernetes，这只是个名称，实际为–server指向的apiserver；–certificate-authority设置了该集群的公钥；–embed-certs为true表示将–certificate-authority证书写入到kubeconfig中；–server则表示该集群的kube-apiserver地址</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> <span class="hljs-built_in">--certificate-authority=/data/kubernetes/ssl/ca.pem</span> <span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--server=https://192.168.0.14:6443</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span><br><span class="hljs-string">Cluster</span> <span class="hljs-string">&quot;kubernetes&quot;</span> <span class="hljs-string">set</span>.<br>➜  <span class="hljs-string">martin</span> <span class="hljs-string">ls</span> -<span class="hljs-string">lth</span><br><span class="hljs-string">total</span> <span class="hljs-string">20K</span><br>-<span class="hljs-string">rw</span>------- <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-string">2</span>.<span class="hljs-string">0K</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:29 </span><span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span><br>-<span class="hljs-string">rw-r</span><span class="hljs-built_in">--r--</span> <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span>  <span class="hljs-string">993</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:20 </span><span class="hljs-string">martin</span>.<span class="hljs-string">csr</span><br>-<span class="hljs-string">rw</span>------- <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-string">1</span>.<span class="hljs-string">7K</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:20 </span><span class="hljs-string">martin-key</span>.<span class="hljs-string">pem</span><br>-<span class="hljs-string">rw-r</span><span class="hljs-built_in">--r--</span> <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-string">1</span>.<span class="hljs-string">4K</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:20 </span><span class="hljs-string">martin</span>.<span class="hljs-string">pem</span><br>-<span class="hljs-string">rw-r</span><span class="hljs-built_in">--r--</span> <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span>  <span class="hljs-string">218</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">11:59 </span><span class="hljs-string">martin-csr</span>.<span class="hljs-string">json</span><br>生成了新的文件：<span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span><br>➜  <span class="hljs-string">martin</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span> <br><span class="hljs-string">apiVersion</span>: <span class="hljs-string">v1</span><br><span class="hljs-string">clusters</span>:<br>- <span class="hljs-string">cluster</span>:<br>    <span class="hljs-string">certificate-authority-data</span>: <span class="hljs-string">xxx</span><br>    <span class="hljs-string">server</span>: <span class="hljs-string">https</span>://<span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">0</span>.<span class="hljs-string">14:6443</span><br><span class="hljs-string"></span>  <span class="hljs-string">name</span>: <span class="hljs-string">kubernetes</span><br><span class="hljs-string">contexts</span>: []<br><span class="hljs-string">current-context</span>: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">kind</span>: <span class="hljs-string">Config</span><br><span class="hljs-string">preferences</span>: &#123;&#125;<br><span class="hljs-string">users</span>: []<br>➜  <span class="hljs-string">martin</span> <br><br></code></pre></td></tr></table></figure><p>注意：–kubeconfig=martin.kubeconfig是将生成的相关信息全部写入martin.kubeconfig文件,如果不指定的话，默认是写入到“~/.kube/config ”</p><ul><li>设置客户端认证参数</li></ul><p>本段主要设置用户的相关信息，主要是用户证书。如下用户名为martin，证书为：/martin.pem，私钥为：./martin-key.pem。客户端的证书首先要经过集群CA的签署，否则不会被集群认可。此处使用的是ca认证方式，也可以使用token认证，如kubelet的TLS Boostrap机制下的bootstrapping使用的就是token认证方式。如下kubectl使用的是ca认证，不需要token字段</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">martin</span> <span class="hljs-built_in">--client-certificate=./martin.pem</span> <span class="hljs-built_in">--client-key=./martin-key.pem</span> <span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span>                                      <br><span class="hljs-string">User</span> <span class="hljs-string">&quot;martin&quot;</span> <span class="hljs-string">set</span>.<br>➜  <span class="hljs-string">martin</span> <br>可以看到<span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span>新增了如下内容：<br><span class="hljs-string">users</span>:<br>- <span class="hljs-string">name</span>: <span class="hljs-string">martin</span><br>  <span class="hljs-string">user</span>:<br>    <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure><ul><li>设置上下文参数,指定命名空间为：kube-system</li></ul><p>集群参数和用户参数可以同时设置多对，在上下文参数中将集群参数和用户参数关联起来。下面的上下文名称为martin-context，集群为kubenetes，用户为martin，表示使用martin的用户凭证来访问kubenetes集群的kube-system命名空间(增加–namspace来指定访问的命名空间)。</p><p>执行之前先看下:martin.kubeconfig文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">martin</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin.kubeconfig</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://192.168.0.14:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> []<br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">martin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">xxx</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">martin</span> <br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">martin-context</span> <span class="hljs-built_in">--cluster=kubernetes</span> <span class="hljs-built_in">--namespace=kube-system</span> <span class="hljs-built_in">--user=martin</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span>   <br><span class="hljs-string">Context</span> <span class="hljs-string">&quot;martin-context&quot;</span> <span class="hljs-string">created</span>.<br>➜  <span class="hljs-string">martin</span> <br></code></pre></td></tr></table></figure><p>再次查看martin.kubeconfig文件,发现内容做了如下改变：<br>之前：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">contexts:</span> [] <br></code></pre></td></tr></table></figure><p>现在：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">martin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-context</span><br></code></pre></td></tr></table></figure><p>增加了上下文的相关信息。</p><ul><li>设置默认上下文</li></ul><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">➜  martin kubectl config <span class="hljs-keyword">use</span>-<span class="hljs-keyword">context</span> martin-<span class="hljs-keyword">context</span> <span class="hljs-comment">--kubeconfig=martin.kubeconfig</span><br>Switched <span class="hljs-keyword">to</span> <span class="hljs-keyword">context</span> <span class="hljs-string">&quot;martin-context&quot;</span>.<br></code></pre></td></tr></table></figure><p>如果配置了多个环境项，可以通过切换不同的环境项名字或指定kubeconfig文件来访问到不同的集群环境。</p><ul><li>现在martin用户通过cfssl创建成功,可以看到所有关于martin用户的信息都写入了配置文件：martin.kubeconfig,不指定”-kubeconfig=”的话，默认是写入到”~/.kube/config”，如果之前有admin的相关信息，会追加到后面。martin.kubeconfig配置文件描述了集群、用户和上下文</li></ul><p>kubectl只是个go编写的可执行程序，只要为kubectl配置合适的kubeconfig，就可以在集群中的任意节点使用。kubectl默认会从$HOME/.kube目录下查找文件名为config的文件，也可以通过设置环境变量KUBECONFIG或者通过设置–kubeconfig去指定其它kubeconfig文件,总之kubeconfig就是为访问集群所作的配置。</p><p>如果之前”~/.kube/config”下配置的是admin账号信息，要用martin账号，则指定kubeconfig文件即可：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span>                               <br><span class="hljs-string">CURRENT</span>   <span class="hljs-string">NAME</span>         <span class="hljs-string">CLUSTER</span>      <span class="hljs-string">AUTHINFO</span>   <span class="hljs-string">NAMESPACE</span><br>*         <span class="hljs-string">kubernetes</span>   <span class="hljs-string">kubernetes</span>   <span class="hljs-string">admin</span>      <br>➜  <span class="hljs-string">martin</span> <br>➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span> <span class="hljs-built_in">--kubeconfig</span> <span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span><br><span class="hljs-string">CURRENT</span>   <span class="hljs-string">NAME</span>             <span class="hljs-string">CLUSTER</span>      <span class="hljs-string">AUTHINFO</span>   <span class="hljs-string">NAMESPACE</span><br>*         <span class="hljs-string">martin-context</span>   <span class="hljs-string">kubernetes</span>   <span class="hljs-string">martin</span>     <span class="hljs-string">kube-system</span><br>➜  <span class="hljs-string">martin</span> <br></code></pre></td></tr></table></figure><p>现在使用当前的这个配置文件来操作kubectl命令的时候，应该会出现错误，因为还没有为该用户定义任何操作的权限呢：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">➜  martin kubectl get pods --kubeconfig martin.kubeconfig<br><span class="hljs-keyword">Error </span>from server (Forbidden): pods is forbidden: User &quot;martin&quot; cannot list pods in the namespace &quot;default&quot;<br>➜  martin <br></code></pre></td></tr></table></figure><p>如果提示：“kubectl error: You must be logged in to the server (Unauthorized)”<br>则是没有指定martin.kubeconfig文件或者默认的”~/.kube/config”里面没有martin用户的相关证书信息，因为前面设置客户端认证的时候没有指定password，而是用了证书。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kubeuser</span>/<span class="hljs-string">foo</span>.<span class="hljs-string">kubernetes</span>.<span class="hljs-string">com</span> <span class="hljs-built_in">--username=kubeuser</span> <span class="hljs-built_in">--password=kubepassword</span> (用户名密码认证方式)<br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">martin</span> <span class="hljs-built_in">--client-certificate=./martin.pem</span> <span class="hljs-built_in">--client-key=./martin-key.pem</span> <span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span><br>(证书认证方式)<br></code></pre></td></tr></table></figure><p>另外可以通过：”Cfssl-Certinfo“命令来查看martin证书信息</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs prolog">➜  martin cfssl-certinfo -cert martin.pem<br>&#123;<br>  <span class="hljs-string">&quot;subject&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;common_name&quot;</span>: <span class="hljs-string">&quot;martin&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;organization&quot;</span>: <span class="hljs-string">&quot;op&quot;</span>,<br>    <span class="hljs-string">&quot;organizational_unit&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>,<br>    <span class="hljs-string">&quot;locality&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;op&quot;</span>,<br>      <span class="hljs-string">&quot;System&quot;</span>,<br>      <span class="hljs-string">&quot;martin&quot;</span><br>    ]<br>  &#125;,<br>  <span class="hljs-string">&quot;issuer&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;common_name&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;organization&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;organizational_unit&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>,<br>    <span class="hljs-string">&quot;locality&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;System&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes&quot;</span><br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><h5 id="第二步：创建角色"><a href="#第二步：创建角色" class="headerlink" title="第二步：创建角色"></a>第二步：创建角色</h5><p>用户创建完成后，接下来就需要给该用户添加操作权限，定义一个YAML文件，创建一个允许用户操作Deployment、Pod、ReplicaSets 的角色，如下定义：(martin-role.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  martin cat martin-role.yaml <br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> martin-role<br><span class="hljs-symbol">  namespace:</span> kube-system<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;replicasets&quot;</span>, <span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>] <span class="hljs-meta"># 也可以使用[<span class="hljs-string">&#x27;*&#x27;</span>]</span><br>➜  martin <br></code></pre></td></tr></table></figure><p>其中Pod属于core这个API Group，在YAML中用空字符就可以，而Deployment属于apps 这个API Group，ReplicaSets属于extensions这个API Group(<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/">点这里查文档</a>)，所以 rules下面的apiGroups 就综合了这几个资源的 API Group：[“”, “extensions”, “apps”]，其中verbs就是上面提到的可以对这些资源对象执行的操作，这里需要所有的操作方法，所以也可以使用[‘*’]来代替。</p><p>然后创建这个Role:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  martin kubectl create -f martin-role<span class="hljs-selector-class">.yaml</span> <br>role<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-role&quot;</span> created<br>➜  martin <br></code></pre></td></tr></table></figure><p>注意这里没有使用上面的martin-context这个上下文，因为木有权限</p><h5 id="第三步：创建角色权限绑定"><a href="#第三步：创建角色权限绑定" class="headerlink" title="第三步：创建角色权限绑定"></a>第三步：创建角色权限绑定</h5><p>Role创建完成了，但是很明显现在这个Role和我们的用户martin 还没有任何关系，这里就需要创建一个RoleBinding对象，在 kube-system这个命名空间下面将上面的martin-role角色和用户 martin进行绑定:(martin-rolebinding.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  martin cat martin-rolebinding.yaml <br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> RoleBinding<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> martin-rolebinding<br><span class="hljs-symbol">  namespace:</span> kube-system<br><span class="hljs-symbol">roleRef:</span><br>  <span class="hljs-meta">#apiGroup: rbac.authorization.k8s.io</span><br>  <span class="hljs-meta">#kind: ClusterRole</span><br><span class="hljs-symbol">  kind:</span> Role<br><span class="hljs-symbol">  name:</span> martin-role<br><span class="hljs-symbol">  apiGroup:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">subjects:</span><br>- apiGroup: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  kind:</span> User<br><span class="hljs-symbol">  name:</span> martin<br>  <span class="hljs-meta">#apiGroup: <span class="hljs-string">&quot;&quot;</span>  #会提示语法错误</span><br>➜  martin <br></code></pre></td></tr></table></figure><p>上面的YAML文件中看到了subjects关键字，这里就是上面提到的用来尝试操作集群的对象，这里对应上面的 User帐号martin，使用kubectl创建上面的资源对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  martin kubectl create -f martin-rolebinding<span class="hljs-selector-class">.yaml</span><br>rolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-rolebinding&quot;</span> created<br></code></pre></td></tr></table></figure><p>使用admin账号(martin账号无权限查看)查看role和rolebinding相关信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  martin kubectl <span class="hljs-keyword">get</span> rolebinding <span class="hljs-comment">--all-namespaces</span><br>NAMESPACE     <span class="hljs-type">NAME</span>                                             AGE<br>kube-<span class="hljs-built_in">public</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">system</span>   martin-rolebinding                               <span class="hljs-number">18</span>h<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-controller-manager   <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-scheduler            <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:cloud-provider                 <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:token-cleaner                  <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   ui-<span class="hljs-keyword">admin</span>-binding                                 <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">system</span>   ui-<span class="hljs-keyword">read</span>-binding                                  <span class="hljs-number">11</span>d<br>➜  martin <br>➜  martin kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">role</span> <span class="hljs-comment">--all-namespaces            </span><br>NAMESPACE     <span class="hljs-type">NAME</span>                                             AGE<br>kube-<span class="hljs-built_in">public</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">extension</span>-apiserver-authentication-reader        <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">system</span>   martin-<span class="hljs-keyword">role</span>                                      <span class="hljs-number">18</span>h<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-controller-manager   <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-scheduler            <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:cloud-provider                 <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:token-cleaner                  <span class="hljs-number">19</span>d<br>➜  martin<br></code></pre></td></tr></table></figure><h5 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h5><p>现在应该可以用上面的martin-context上下文来操作集群了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">➜  martin kubectl <span class="hljs-keyword">get</span> pods                                          <br>NAME                              READY     STATUS    RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746<span class="hljs-operator">-</span>vfnf8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>d<br>➜  martin <br>➜  martin kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-operator">-</span>n <span class="hljs-keyword">default</span><br>NAME                              READY     STATUS    RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746<span class="hljs-operator">-</span>vfnf8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>d<br>➜  martin <br>➜  martin kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-comment">--kubeconfig martin.kubeconfig</span><br>NAME                                    READY     STATUS    RESTARTS   AGE<br>coredns<span class="hljs-number">-77</span>c989547b<span class="hljs-operator">-</span>lcbfw                <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">1</span>          <span class="hljs-number">15</span>d<br>coredns<span class="hljs-number">-77</span>c989547b<span class="hljs-operator">-</span>xq4dr                <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">1</span>          <span class="hljs-number">15</span>d<br>heapster<span class="hljs-number">-77</span>b9c5bd7b<span class="hljs-operator">-</span>l5ms6               <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br>kubernetes<span class="hljs-operator">-</span>dashboard<span class="hljs-number">-66</span>c9d98865<span class="hljs-operator">-</span>g8l6l   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br>monitoring<span class="hljs-operator">-</span>grafana<span class="hljs-number">-7</span>c674cb7f6<span class="hljs-operator">-</span>nqvlw     <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br>monitoring<span class="hljs-operator">-</span>influxdb<span class="hljs-number">-644</span>db5c5b6<span class="hljs-operator">-</span>llnp9    <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br></code></pre></td></tr></table></figure><p>使用kubectl时并没有指定namespace，这是因为之前已经为该用户分配了权限，并且指定了kube-system命名空间写入到martin.kubeconfig文件中，如果使用default命名空间，在后面加上一个-n default，则会提示forbidden,如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">➜  martin kubectl <span class="hljs-builtin-name">get</span> pods -n<span class="hljs-built_in"> default </span>--kubeconfig martin.kubeconfig <br><span class="hljs-builtin-name">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;martin&quot;</span> cannot list pods <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br>➜  martin <br></code></pre></td></tr></table></figure><p>这是因为该用户并没有default这个命名空间的操作权限。</p><hr><h4 id="创建一个只能访问某个namespace的ServiceAccount"><a href="#创建一个只能访问某个namespace的ServiceAccount" class="headerlink" title="创建一个只能访问某个namespace的ServiceAccount"></a>创建一个只能访问某个namespace的ServiceAccount</h4><p>上面创建了一个只能访问某个命名空间下面的普通用户，前面也提到过subjects,下面还有一种类型的主题资源：ServiceAccount。</p><h5 id="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"><a href="#第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments" class="headerlink" title="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"></a>第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments</h5><p>首先来创建一个ServiceAccount对象：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  serviceaccount kubectl <span class="hljs-keyword">create</span> sa martin-sa -n kube-<span class="hljs-keyword">system</span><br>serviceaccount &quot;martin-sa&quot; created<br>➜  serviceaccount <br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> sa <br><span class="hljs-type">NAME</span>      SECRETS   AGE<br><span class="hljs-keyword">default</span>   <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> sa -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                   SECRETS   AGE<br><span class="hljs-keyword">admin</span>-<span class="hljs-keyword">user</span>             <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>coredns                <span class="hljs-number">1</span>         <span class="hljs-number">15</span>d<br><span class="hljs-keyword">default</span>                <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>heapster               <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>kubernetes-dashboard   <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>martin-sa              <span class="hljs-number">1</span>         <span class="hljs-number">13</span>s<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>当然也可以定义成YAML文件的形式来创建:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> martin-sa<br><span class="hljs-symbol">  namespace:</span> kube-system<br><br></code></pre></td></tr></table></figure><h5 id="第二步：创建一个Role对象：-martin-sa-role-yaml"><a href="#第二步：创建一个Role对象：-martin-sa-role-yaml" class="headerlink" title="第二步：创建一个Role对象：(martin-sa-role.yaml)"></a>第二步：创建一个Role对象：(martin-sa-role.yaml)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  serviceaccount <span class="hljs-keyword">cat</span> martin-<span class="hljs-keyword">sa</span>-role.yaml <br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: Role<br>metadat<span class="hljs-variable">a:</span><br>  name: martin-<span class="hljs-keyword">sa</span>-role<br>  namespace: kube-<span class="hljs-built_in">system</span><br>rule<span class="hljs-variable">s:</span><br>- apiGroup<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  resource<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-keyword">verb</span><span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>] # 也可以使用[<span class="hljs-string">&#x27;*&#x27;</span>]<br>- apiGroup<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>  resource<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]<br>  <span class="hljs-keyword">verb</span><span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br>➜  serviceaccount<br></code></pre></td></tr></table></figure><p>可以看到这里定义的角色没有创建、删除、更新Pod的权限，等会可以重点测试一下。</p><p>创建该Role对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  serviceaccount kubectl create -f martin-sa-role<span class="hljs-selector-class">.yaml</span> <br>role<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-sa-role&quot;</span> created<br></code></pre></td></tr></table></figure><h5 id="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml"><a href="#第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml" class="headerlink" title="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)"></a>第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin-sa-rolebinding.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-rolebinding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-role</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>创建这个资源对象：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  serviceaccount kubectl <span class="hljs-keyword">get</span> rolebinding -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                                             AGE<br>kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>martin-rolebinding                               <span class="hljs-number">22</span>h<br>➜  serviceaccount <br><br>➜  serviceaccount kubectl <span class="hljs-keyword">create</span> -f martin-sa-rolebinding.yaml <br>rolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io &quot;martin-sa-rolebinding&quot; created<br>➜  serviceaccount <br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> rolebinding               <br><span class="hljs-keyword">No</span> resources <span class="hljs-built_in">found</span>.<br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> rolebinding -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                                             AGE<br>kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>martin-rolebinding                               <span class="hljs-number">23</span>h<br>martin-sa-rolebinding                            <span class="hljs-number">26</span>s<br>可以看到martin-sa-rolebinding已经添加<br><br></code></pre></td></tr></table></figure><h5 id="第四步，验证这个ServiceAccount"><a href="#第四步，验证这个ServiceAccount" class="headerlink" title="第四步，验证这个ServiceAccount"></a>第四步，验证这个ServiceAccount</h5><p>一个ServiceAccount会生成一个Secret对象和它进行映射，这个Secret里面包含一个token：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stata">➜  serviceaccount kubectl get secret -<span class="hljs-keyword">n</span> kube-system<br>NAME                               <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br>admin-user-<span class="hljs-keyword">token</span>-xszp7             kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>coredns-<span class="hljs-keyword">token</span>-9ppnq                kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         15d<br>default-<span class="hljs-keyword">token</span>-fs7zj                kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         20d<br>heapster-<span class="hljs-keyword">token</span>-gn8g5               kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>kubernetes-dashboard-certs         Opaque                                0         11d<br>kubernetes-dashboard-key-holder    Opaque                                2         15d<br>kubernetes-dashboard-<span class="hljs-keyword">token</span>-tg782   kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>martin-<span class="hljs-keyword">sa</span>-<span class="hljs-keyword">token</span>-78s5j              kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         41m  #新增<br>➜  serviceaccount <br>➜  serviceaccount kubectl <span class="hljs-keyword">describe</span> secret martin-<span class="hljs-keyword">sa</span>-<span class="hljs-keyword">token</span>-78s5j -<span class="hljs-keyword">n</span> kube-system<br>Name:         martin-<span class="hljs-keyword">sa</span>-<span class="hljs-keyword">token</span>-78s5j<br>Namespace:    kube-system<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io/service-account.name=martin-<span class="hljs-keyword">sa</span><br>              kubernetes.io/service-account.uid=576ef41d-79e2-11e8-bede-5254004f2222<br><br><span class="hljs-keyword">Type</span>:  kubernetes.io/service-account-<span class="hljs-keyword">token</span><br><br>Data<br>====<br><span class="hljs-keyword">ca</span>.crt:     1359 bytes<br>namespace:  11 bytes<br><span class="hljs-keyword">token</span>:      xxx<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>==注意：查看时需要-n指定kube-system命名空间！==</p><p>然后可以利用这个token去登录Dashboard，就可以在Dashboard中来验证功能是否符合预期：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">➜  serviceaccount kubectl <span class="hljs-built_in">get</span> secret martin-sa-token-78s5j -o jsonpath=&#123;.data.token&#125; -n kube-<span class="hljs-built_in">system</span> |<span class="hljs-built_in">base64</span> -d #会生成一串很长的<span class="hljs-built_in">base64</span>后的字符串<br>xxxxxxxxxxxxxxxx<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>使用这里的xxx token去Dashboard页面进行登录：<br>会出现如下提示信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">configmaps <span class="hljs-keyword">is</span> forbidden: <span class="hljs-keyword">User</span> &quot;system:serviceaccount:kube-system:martin-sa&quot; cannot list configmaps <span class="hljs-keyword">in</span> the namespace &quot;default&quot;<br><span class="hljs-keyword">close</span><br><span class="hljs-built_in">warning</span><br>persistentvolumeclaims <span class="hljs-keyword">is</span> forbidden: <span class="hljs-keyword">User</span> &quot;system:serviceaccount:kube-system:martin-sa&quot; cannot list persistentvolumeclaims <span class="hljs-keyword">in</span> the namespace &quot;default&quot; <br></code></pre></td></tr></table></figure><p>这是因为登录进来后默认跳转到default命名空间，但是却没有改空间的权限，因此需要切换到kube-system命名空间下面:</p><p>原来url:<br><a href="https://xxx/#!/deployment?namespace=default">https://xxx/#!/deployment?namespace=default</a></p><p>修改为新url:<br><a href="https://xxx/#!/deployment?namespace=kube-system">https://xxx/#!/deployment?namespace=kube-system</a></p><p>可以看到能访问pod列表了，但是也会有一些其他额外的提示：events is forbidden: User “system:serviceaccount:kube-system:martin-sa” cannot list events in the namespace “kube-system”，这是因为当前登录用只被授权了访问pod和deployment的权限，同样的，访问下deployment看看可以了吗？</p><p>同样的，可以根据自己的需求来对访问用户的权限进行限制，可以自己通过Role定义更加细粒度的权限，也可以使用系统内置的一些权限……</p><hr><h4 id="创建一个可以访问所有-namespace-的ServiceAccount"><a href="#创建一个可以访问所有-namespace-的ServiceAccount" class="headerlink" title="创建一个可以访问所有 namespace 的ServiceAccount"></a>创建一个可以访问所有 namespace 的ServiceAccount</h4><p>刚刚创建的martin-sa这个ServiceAccount和一个Role角色进行绑定的，如果现在创建一个新的ServiceAccount，需要他操作的权限作用于所有的namespace，这个时候就需要使用到ClusterRole 和 ClusterRoleBinding 这两种资源对象了。</p><h5 id="第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml"><a href="#第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml" class="headerlink" title="第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)"></a>第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  serviceaccount <span class="hljs-keyword">cat</span> martin-sa2.yaml <br>apiVersion: v1<br>kind: ServiceAccount<br>metadat<span class="hljs-variable">a:</span><br>  name: martin-sa2<br>  namespace: kube-<span class="hljs-built_in">system</span><br>➜  serviceaccount <br>➜  serviceaccount kubectl create -<span class="hljs-keyword">f</span> martin-sa2.yaml <br>serviceaccount <span class="hljs-string">&quot;martin-sa2&quot;</span> created<br>➜  serviceaccount kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">sa</span>   <br>NAME      SECRETS   AGE<br>default   <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>➜  serviceaccount kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">sa</span> -n kube-<span class="hljs-built_in">system</span><br>NAME                   SECRETS   AGE<br>admin-user             <span class="hljs-number">1</span>         <span class="hljs-number">12</span>d<br>coredns                <span class="hljs-number">1</span>         <span class="hljs-number">15</span>d<br>default                <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>heapster               <span class="hljs-number">1</span>         <span class="hljs-number">12</span>d<br>kubernetes-dashboard   <span class="hljs-number">1</span>         <span class="hljs-number">12</span>d<br>martin-<span class="hljs-keyword">sa</span>              <span class="hljs-number">1</span>         <span class="hljs-number">1</span>h<br>martin-sa2             <span class="hljs-number">1</span>         <span class="hljs-number">12</span>s<br>➜  serviceaccount<br></code></pre></td></tr></table></figure><h5 id="第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml"><a href="#第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml" class="headerlink" title="第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):"></a>第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin-clusterolebinding.yaml</span>   <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa2-clusterrolebinding</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <br></code></pre></td></tr></table></figure><p>对比下之前的”martin-sa-rolebinding.yaml”</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin-sa-rolebinding.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-rolebinding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-role</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <br></code></pre></td></tr></table></figure><p>从上面可以看到没有为这个资源对象声明namespace，因为这是一个ClusterRoleBinding 资源对象，是作用于整个集群的，也没有单独新建一个ClusterRole对象，而是使用的 cluster-admin这个对象，这是Kubernetes集群内置的ClusterRole对象，可以使用kubectl get clusterrole 和kubectl get clusterrolebinding查看系统内置的一些集群角色和集群角色绑定，这里使用的 cluster-admin这个集群角色是拥有最高权限的集群角色，所以一般需要谨慎使用该集群角色。</p><p>创建上面集群角色绑定资源对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  serviceaccount kubectl create -f martin-clusterolebinding<span class="hljs-selector-class">.yaml</span> <br>clusterrolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-sa2-clusterrolebinding&quot;</span> created<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>通过ubectl get clusterrolebinding可以看到”martin-sa2-clusterrolebinding”已经加入其中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  serviceaccount kubectl <span class="hljs-keyword">get</span> clusterrolebinding <br><span class="hljs-type">NAME</span>                                                   AGE<br><span class="hljs-keyword">admin</span>-<span class="hljs-keyword">user</span>                                             <span class="hljs-number">12</span>d<br><span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span>                                          <span class="hljs-number">20</span>d<br>heapster                                               <span class="hljs-number">12</span>d<br>kubelet-bootstrap                                      <span class="hljs-number">19</span>d<br>martin-sa2-clusterrolebinding                          <span class="hljs-number">22</span>s<br></code></pre></td></tr></table></figure><h5 id="第三步，使用-ServiceAccount对应的token去登录Dashboard验证："><a href="#第三步，使用-ServiceAccount对应的token去登录Dashboard验证：" class="headerlink" title="第三步，使用 ServiceAccount对应的token去登录Dashboard验证："></a>第三步，使用 ServiceAccount对应的token去登录Dashboard验证：</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">➜  serviceaccount kubectl get secret -n kube-<span class="hljs-keyword">system</span>|grep martin-sa2-<span class="hljs-built_in">token</span>-q7bhr<br>martin-sa2-<span class="hljs-built_in">token</span>-q7bhr             kubernetes.io/service-account-<span class="hljs-built_in">token</span>   <span class="hljs-number">3</span>         <span class="hljs-number">34</span>m<br>➜  serviceaccount <br>➜  serviceaccount kubectl get secret martin-sa2-<span class="hljs-built_in">token</span>-q7bhr -o jsonpath=&#123;.data.token&#125; -n kube-<span class="hljs-keyword">system</span> |base64 -d<br>xxxxxxx<br><span class="hljs-meta">#会生成一串很长的base64后的字符串</span><br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>在最开始接触到RBAC认证的时候，可能不太熟悉，特别是不知道应该怎么去编写rules规则，可以去分析系统自带的clusterrole、clusterrolebinding这些资源对象的编写方法，利用 kubectl的get、describe、-o yaml这些操作，所以kubectl最基本的操作一定要掌握好。</p><p>RBAC只是Kubernetes中安全认证的一种方式，当然也是现在最重要的一种方式。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;RBAC - 基于角色的访问控制&lt;br&gt;RBAC使用：rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;$ cat &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;lib&lt;span class=&quot;hljs-regexp&quot;&gt;/systemd/&lt;/span&gt;system/kube-apiserver.service&lt;br&gt;或者是：&lt;br&gt;$ cat &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;kubernetes&lt;span class=&quot;hljs-regexp&quot;&gt;/manifests/&lt;/span&gt;kube-apiserver.yaml&lt;br&gt;...&lt;br&gt;    - --authorization-mode=Node,RBAC&lt;br&gt;...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果是二进制的方式搭建的集群，添加这个参数过后，记得要重启 apiserver 服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;RBAC-API-对象&quot;&gt;&lt;a href=&quot;#RBAC-API-对象&quot; class=&quot;headerlink&quot; title=&quot;RBAC API 对象&quot;&gt;&lt;/a&gt;RBAC API 对象&lt;/h3&gt;&lt;p&gt;Kubernetes有一个很基本的特性就是它的所有资源对象都是模型化的 API 对象，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;ConfigMaps&lt;/li&gt;
&lt;li&gt;Deployments&lt;/li&gt;
&lt;li&gt;Nodes&lt;/li&gt;
&lt;li&gt;Secrets&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面这些资源对象的可能存在的操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;get&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;edit&lt;/li&gt;
&lt;li&gt;watch&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在更上层，这些资源和API Group 进行关联，比如Pods属于Core API Group，而Deployements属于 apps API Group，要在Kubernetes中进行RBAC的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rule：规则，规则是一组属于不同API Group 资源上的一组操作的集合&lt;/li&gt;
&lt;li&gt;Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的Rules 元素，二者的区别在于，在Role 中，定义的规则只适用于单个命名空间，也就是和namespace 关联的，而ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外Role和 ClusterRole在Kubernetes中都被定义为集群内部的API 资源，和Pod、ConfigMap 这些类似，都是集群的资源对象，所以同样的可以使用kubectl相关的命令来进行操作&lt;/li&gt;
&lt;li&gt;Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用KeyStone或者Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的API 来进行管理&lt;/li&gt;
&lt;li&gt;Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin&lt;/li&gt;
&lt;li&gt;Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和namespace 进行关联的，适用于集群内部运行的应用程序，需要通过API 来完成权限认证，所以在集群内部进行权限操作，都需要使用到 ServiceAccount&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;RoleBinding和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的Subject和Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding只会影响到当前namespace 下面的资源操作权限，而ClusterRoleBinding会影响到所有的 namespace。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>基于k8s 动态配置及扩容maven nexus私服</title>
    <link href="http://www.leiyawu.com/2018/06/22/%E5%9F%BA%E4%BA%8Ek8s%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%A9%E5%AE%B9maven%20nexus%E7%A7%81%E6%9C%8D/"/>
    <id>http://www.leiyawu.com/2018/06/22/%E5%9F%BA%E4%BA%8Ek8s%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%A9%E5%AE%B9maven%20nexus%E7%A7%81%E6%9C%8D/</id>
    <published>2018-06-22T02:36:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置nexus"><a href="#配置nexus" class="headerlink" title="配置nexus"></a>配置nexus</h3><p>从官网下载了nexus之后还需要进行一些配置。<br>编辑bin/nexus.vmoptions 调整后的如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">Xms600M</span><br><span class="ruby"></span>-<span class="ruby">Xmx600M</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>MaxDirectMemorySize=1G</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>+UnlockDiagnosticVMOptions</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>+UnsyncloadClass</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>+LogVMOutput</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>LogFile=<span class="hljs-regexp">/data/docker</span><span class="hljs-regexp">/soft/nexus</span><span class="hljs-regexp">/log/jvm</span>.log</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>-OmitStackTraceInFastThrow</span><br><span class="ruby"></span>-<span class="ruby">Djava.net.preferIPv4Stack=<span class="hljs-literal">true</span></span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.home=.</span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.base=.</span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.etc=etc/karaf</span><br><span class="ruby"></span>-<span class="ruby">Djava.util.logging.config.file=etc/karaf/java.util.logging.properties</span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.data=<span class="hljs-regexp">/data/docker</span><span class="hljs-regexp">/soft/nexus</span><span class="hljs-regexp">/data</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>-<span class="ruby"><span class="hljs-regexp">Djava.io.tmpdir=/data</span><span class="hljs-regexp">/docker/soft</span><span class="hljs-regexp">/nexus/tmp</span></span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.startLocalConsole=<span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p>其中除了1，2行的jvm内存配置之外，最关键的就是，以下几个属性配置：</p><ul><li>-XX:LogFile=/data/docker/soft/nexus/log/jvm.log       # 日志文件生成位置</li><li>-Dkaraf.data=/data/docker/soft/nexus/data             # 仓库数据存放位置(上传的jar包)</li><li>-Djava.io.tmpdir=/data/docker/soft/nexus/tmp          # 临时文件存放位置</li></ul><h3 id="制作Docker镜像"><a href="#制作Docker镜像" class="headerlink" title="制作Docker镜像"></a>制作Docker镜像</h3><p>配置好nexus之后，需要再制作自己的docker镜像，因为k8s就是调度镜像容器的。 </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@master nexus]<span class="hljs-comment"># pwd</span><br>/data/docker/dockerfile/nexus<br>[root@master nexus]<span class="hljs-comment"># ls -lth </span><br>total 223M<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 146 </span>Jun<span class="hljs-number"> 21 </span>16:06 Dockerfile<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root 108M Jun<span class="hljs-number"> 21 </span>16:02 nexus3.tar.gz<br>drwxr-xr-x<span class="hljs-number"> 3 </span>root root 4.0K Jun<span class="hljs-number"> 21 </span>15:53 sonatype-work<br>drwxr-xr-x<span class="hljs-number"> 9 </span>root root 4.0K Jun<span class="hljs-number"> 21 </span>15:53 nexus-3.12.1-01<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root 115M Jun<span class="hljs-number"> 21 </span>15:36 nexus-3.12.1-01-unix.tar.gz.org<br></code></pre></td></tr></table></figure><p>docker镜像的制作很简单，新建一个Dockerfile文件：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">nexus</span>]<span class="hljs-comment"># cat Dockerfile </span><br>FROM registry.cn-hangzhou.aliyuncs.com/luhaoyuan/oracle-jdk8:latest<br><br>ADD nexus3.tar.gz /opt<br><br>ENTRYPOINT [<span class="hljs-string">&quot;/opt/nexus-3.12.1-01/bin/nexus&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li>第一行：nexus的运行是依赖JDK环境的，所以我们这里就使用jdk作为基础镜像；(镜像是基于centos7，比较大，后续可以考虑修改为alpine_3.6)</li><li>第二行：将我们配置过后的nexus(nexus-3.12.1-01)再重新打包一下，添加到容器中； </li><li>第三行：启动容器时，执行的命令，nexus的启动命令有start和run，由于start默认是启动在后台进程的，这样容器一启动就退出了。所以这里必须要使用run命令启动了。</li></ul><p>最后构建Docker镜像：<br>docker build -t registry.martin.com:5000/tools/nexus:3.12.1 .<br>registry.martin.com:5000为我registry地址,构建之后将改image push到私库,当然也可以用harbor<br>如果有做ca校验，需要将证书拷贝到指定的:/etc/docker/certs.d/xxx/ca.crt,然后docker login校验<br>再docker push registry.martin.com:5000/tools/nexus:3.12.1，不然会提示x509认证失败</p><span id="more"></span><h3 id="配置k8s-PV-PVC"><a href="#配置k8s-PV-PVC" class="headerlink" title="配置k8s PV-PVC"></a>配置k8s PV-PVC</h3><p>为了避免容器重启数据丢失，需要挂载主机的卷空间。<br>在k8s中，pod挂载主机的存储卷，就需要使用到了PV（PersistentVolume）和PVC（PersistentVolumeClaim）。<br>新建nexus3-pv-pvc.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># pwd</span><br><span class="hljs-string">/data/k8s/nexus</span><br>[<span class="hljs-string">root@master</span>  <span class="hljs-string">nexus</span>]<span class="hljs-comment"># ls -lth</span><br><span class="hljs-string">total</span> <span class="hljs-string">12K</span><br><span class="hljs-string">-rw-r--r--</span> <span class="hljs-number">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-number">777</span> <span class="hljs-string">Jun</span> <span class="hljs-number">21</span> <span class="hljs-number">18</span><span class="hljs-string">:49</span> <span class="hljs-string">nexus3-deployment.yaml</span><br><span class="hljs-string">-rw-r--r--</span> <span class="hljs-number">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-number">370</span> <span class="hljs-string">Jun</span> <span class="hljs-number">21</span> <span class="hljs-number">17</span><span class="hljs-string">:12</span> <span class="hljs-string">nexus3-service.yaml</span><br><span class="hljs-string">-rw-r--r--</span> <span class="hljs-number">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-number">525</span> <span class="hljs-string">Jun</span> <span class="hljs-number">21</span> <span class="hljs-number">16</span><span class="hljs-string">:49</span> <span class="hljs-string">nexus3-pv-pvc.yaml</span><br>[<span class="hljs-string">root@master</span>  <span class="hljs-string">nexus</span>]<span class="hljs-comment"># cat nexus3-pv-pvc.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3-data-pv</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3-data-pv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">500Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">hostPath:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/docker/soft/nexus</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3-data-pvc</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3-data-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">500Gi</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3-data-pv</span><br>[<span class="hljs-string">root@master</span>  <span class="hljs-string">nexus</span>]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>==注意：PV中的hostPath，指定了宿主主机上的挂载路径(node节点最好全部先创建好)==</p><h3 id="配置k8s-Deployment"><a href="#配置k8s-Deployment" class="headerlink" title="配置k8s Deployment"></a>配置k8s Deployment</h3><p>在k8s早期更多的是使用ReplicationController (RC)来控制保障pod，不过后来又出现了Deployment。<br>Deployment不仅包含了RC的所有功能，还具有：版本记录、回滚、暂停和启动等多种额外的强大功能。<br>所以可以尽量都使用Deployment,新建nexus3-deployment.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># cat nexus3-deployment.yaml </span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/tools/nexus:3.12.1</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9193</span><br>            <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus-data</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/docker/soft/nexus</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus-data</span><br>          <span class="hljs-attr">persistentVolumeClaim:</span><br>            <span class="hljs-attr">claimName:</span> <span class="hljs-string">nexus3-data-pvc</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span><br></code></pre></td></tr></table></figure><p>需要在volumes结点上引用之前创建的PVC：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">volumes</span>:<br>  - name: nexus-<span class="hljs-class"><span class="hljs-keyword">data</span></span><br>    persistentVolumeClaim:<br>      claimName: nexus3-<span class="hljs-class"><span class="hljs-keyword">data</span>-pvc</span><br></code></pre></td></tr></table></figure><p>在volumeMounts结点上，配置了挂载到容器中的路径：/data/docker/soft/nexus(node节点最好全部先创建好)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">volumeMounts:<br>  - name: nexus-data<br>    mountPath: <span class="hljs-regexp">/data/</span>docker<span class="hljs-regexp">/soft/</span>nexus<br></code></pre></td></tr></table></figure><p>最后的nodeSelector表示pod只在某个主机上运行,可以通过在k8s的master上使用:kubectl get nodes查看</p><h3 id="配置k8s-Service"><a href="#配置k8s-Service" class="headerlink" title="配置k8s Service"></a>配置k8s Service</h3><p>k8s中的pod的访问是不可靠的，随时可能发生pod停止-漂移-创建的过程。<br>所以要想能够稳定的访问，就必须要创建Service进行服务发现了，在Service中是根据selector来寻找pod的。<br>最后k8s上的Service只能在集群节点上访问，如果我们想要在集群外部进行访问的话，只有三种方式：</p><ul><li>NodePort、</li><li>LoadBalancer、</li><li>Ingress。 </li></ul><p>这里使用NodePort，绑定宿主机的端口来进行暴露服务。跟docker run -p 看上去效果相似。<br>新建nexus3-service.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># cat nexus3-service.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30031</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-ui</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>其中关键的地方就是spec.type节点配置NodePort类型了。<br>说明下的ports 端口的配置：</p><ul><li>port 属性定义了Service的虚端口；</li><li>targetPort 属性指定了后面pod上提供的端口，如果没有指定则默认与port相同(这里我们显视的指定了)；</li><li>nodePort 属性指定了绑定在宿主机(物理机)上的端口号，我们可以通过宿主机IP + 端口的形式访问到后方pod中的服。</li><li>name 如果有多个port配置的话，必须要为每个port指定一个名称。</li></ul><h3 id="k8s部署访问"><a href="#k8s部署访问" class="headerlink" title="k8s部署访问"></a>k8s部署访问</h3><h4 id="创建-PV-PVC"><a href="#创建-PV-PVC" class="headerlink" title="创建 PV-PVC"></a>创建 PV-PVC</h4><p>根据配置文件，创建PV-PVC：</p><p>kubectl create -f nexus3-pv-pvc.yaml</p><p>创建完成后，查看一下状态，是否正常： </p><p>kubectl get pv</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">NAME</span>             CAPACITY   <span class="hljs-keyword">ACCESS</span> MODES   RECLAIM POLICY   <span class="hljs-keyword">STATUS</span>    CLAIM                     STORAGECLASS   REASON    AGE<br>nexus3-<span class="hljs-keyword">data</span>-pv   <span class="hljs-number">500</span>Gi      RWO            Recycle          Bound     <span class="hljs-keyword">default</span>/nexus3-<span class="hljs-keyword">data</span>-pvc                            <span class="hljs-number">17</span>h<br></code></pre></td></tr></table></figure><h4 id="创建Deployment"><a href="#创建Deployment" class="headerlink" title="创建Deployment"></a>创建Deployment</h4><p>继续创建Deployment，创建完后会自动创建pod的，并维护pod数量始终为1。 </p><p>kubectl create -f nexus3-deployment.yaml </p><p>稍等几秒钟，查看pod状态： </p><p>kubectl get pod -o wide</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NAME</span>                      READY     STATUS    RESTARTS   AGE       IP           NODE<br><span class="hljs-attribute">nexus3</span>-<span class="hljs-number">68</span>f<span class="hljs-number">55</span>d<span class="hljs-number">9746</span>-vfnf<span class="hljs-number">8</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">12</span>h       <span class="hljs-number">10.20.7.12</span>   <span class="hljs-number">192.168.0.15</span><br></code></pre></td></tr></table></figure><p>==注意：默认不用-n指定namespace的都是用的default，-o wide可以看到详细的IP及node信息==</p><h4 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h4><p>创建Service，暴露服务：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> create -f nexus<span class="hljs-number">3</span>-service.yaml<br></code></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">kubectl</span> get svc<br><span class="hljs-attribute">NAME</span>            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                        AGE<br><span class="hljs-attribute">kubernetes</span>      ClusterIP   <span class="hljs-number">10.10.0.1</span>       &lt;none&gt;        <span class="hljs-number">443</span>/TCP                                        <span class="hljs-number">13</span>d<br><span class="hljs-attribute">nexus3</span>          NodePort    <span class="hljs-number">10.10.165.3</span>     &lt;none&gt;        <span class="hljs-number">8081</span>:<span class="hljs-number">30031</span>/TCP,<span class="hljs-number">5000</span>:<span class="hljs-number">30032</span>/TCP,<span class="hljs-number">8889</span>:<span class="hljs-number">30033</span>/TCP   <span class="hljs-number">12</span>h<br><span class="hljs-attribute">nginx</span>-service   ClusterIP   <span class="hljs-number">10.10.147.216</span>   &lt;none&gt;        <span class="hljs-number">80</span>/TCP                                         <span class="hljs-number">10</span>d<br></code></pre></td></tr></table></figure><p>==注意这里的访问，是访问宿主机的IP+端口，至于CLUSTER-IP这些都是虚拟的IP，无法在外部进行访问的==。</p><h3 id="访问Nexus"><a href="#访问Nexus" class="headerlink" title="访问Nexus"></a>访问Nexus</h3><p><a href="http://192.168.1.2:30031/">http://192.168.1.2:30031</a> (pod内container端口为：8081)</p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>借用k8s Deployment的升级方式:</p><ol><li>从官网下载最新的nexus安装包；</li><li>修改nexus配置文件，将上面旧版本的配置覆盖过来就行了；</li><li>修改Dockerfile文件，构建新的Docker镜像，将新打包的nexus放入镜像中。<br>如：docker build -t registry.martin.com:5000/tools/nexus:3.12.2 .<br>Ps: 不要忘记启动命令路径也要调整!</li><li>使用k8s命令升级Deployment：<br>如：kubectl set image deployment/nexus3 nexus3=registry.martin.com:5000/tools/nexus:3.12.2</li><li>回滚升级，如果发现升级了的不好用，或者出现问题，也可以回滚：<br>如：kubectl rollout undo deployment/nexus3</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实这个过程中里复杂了一部分，也简化了一部分。<br>复杂了pv-pvc过程，pv-pvc不用创建直接在Deployment中挂载hostPath也是可以的。<br>简化了Deployment，其实应该还需要加上cpu、内存等资源限制的。<br>这里只是在nexus配置文件中做了限制，如果出现内存泄漏问题，还是没办法解决!</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;配置nexus&quot;&gt;&lt;a href=&quot;#配置nexus&quot; class=&quot;headerlink&quot; title=&quot;配置nexus&quot;&gt;&lt;/a&gt;配置nexus&lt;/h3&gt;&lt;p&gt;从官网下载了nexus之后还需要进行一些配置。&lt;br&gt;编辑bin/nexus.vmoptions 调整后的如下：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs haml&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;Xms600M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Xmx600M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;MaxDirectMemorySize=1G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UnlockDiagnosticVMOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UnsyncloadClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+LogVMOutput&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;LogFile=&lt;span class=&quot;hljs-regexp&quot;&gt;/data/docker&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/soft/nexus&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/log/jvm&lt;/span&gt;.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;-OmitStackTraceInFastThrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Djava.net.preferIPv4Stack=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.home=.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.base=.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.etc=etc/karaf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Djava.util.logging.config.file=etc/karaf/java.util.logging.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.data=&lt;span class=&quot;hljs-regexp&quot;&gt;/data/docker&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/soft/nexus&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;Djava.io.tmpdir=/data&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/docker/soft&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/nexus/tmp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.startLocalConsole=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中除了1，2行的jvm内存配置之外，最关键的就是，以下几个属性配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-XX:LogFile=/data/docker/soft/nexus/log/jvm.log       # 日志文件生成位置&lt;/li&gt;
&lt;li&gt;-Dkaraf.data=/data/docker/soft/nexus/data             # 仓库数据存放位置(上传的jar包)&lt;/li&gt;
&lt;li&gt;-Djava.io.tmpdir=/data/docker/soft/nexus/tmp          # 临时文件存放位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;制作Docker镜像&quot;&gt;&lt;a href=&quot;#制作Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;制作Docker镜像&quot;&gt;&lt;/a&gt;制作Docker镜像&lt;/h3&gt;&lt;p&gt;配置好nexus之后，需要再制作自己的docker镜像，因为k8s就是调度镜像容器的。 &lt;/p&gt;
&lt;figure class=&quot;highlight tap&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs tap&quot;&gt;[root@master nexus]&lt;span class=&quot;hljs-comment&quot;&gt;# pwd&lt;/span&gt;&lt;br&gt;/data/docker/dockerfile/nexus&lt;br&gt;[root@master nexus]&lt;span class=&quot;hljs-comment&quot;&gt;# ls -lth &lt;/span&gt;&lt;br&gt;total 223M&lt;br&gt;-rw-r--r--&lt;span class=&quot;hljs-number&quot;&gt; 1 &lt;/span&gt;root root &lt;span class=&quot;hljs-number&quot;&gt; 146 &lt;/span&gt;Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;16:06 Dockerfile&lt;br&gt;-rw-r--r--&lt;span class=&quot;hljs-number&quot;&gt; 1 &lt;/span&gt;root root 108M Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;16:02 nexus3.tar.gz&lt;br&gt;drwxr-xr-x&lt;span class=&quot;hljs-number&quot;&gt; 3 &lt;/span&gt;root root 4.0K Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;15:53 sonatype-work&lt;br&gt;drwxr-xr-x&lt;span class=&quot;hljs-number&quot;&gt; 9 &lt;/span&gt;root root 4.0K Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;15:53 nexus-3.12.1-01&lt;br&gt;-rw-r--r--&lt;span class=&quot;hljs-number&quot;&gt; 1 &lt;/span&gt;root root 115M Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;15:36 nexus-3.12.1-01-unix.tar.gz.org&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;docker镜像的制作很简单，新建一个Dockerfile文件：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs crmsh&quot;&gt;[root@&lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nexus&lt;/span&gt;]&lt;span class=&quot;hljs-comment&quot;&gt;# cat Dockerfile &lt;/span&gt;&lt;br&gt;FROM registry.cn-hangzhou.aliyuncs.com/luhaoyuan/oracle-jdk8:latest&lt;br&gt;&lt;br&gt;ADD nexus3.tar.gz /opt&lt;br&gt;&lt;br&gt;ENTRYPOINT [&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/opt/nexus-3.12.1-01/bin/nexus&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第一行：nexus的运行是依赖JDK环境的，所以我们这里就使用jdk作为基础镜像；(镜像是基于centos7，比较大，后续可以考虑修改为alpine_3.6)&lt;/li&gt;
&lt;li&gt;第二行：将我们配置过后的nexus(nexus-3.12.1-01)再重新打包一下，添加到容器中； &lt;/li&gt;
&lt;li&gt;第三行：启动容器时，执行的命令，nexus的启动命令有start和run，由于start默认是启动在后台进程的，这样容器一启动就退出了。所以这里必须要使用run命令启动了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后构建Docker镜像：&lt;br&gt;docker build -t registry.martin.com:5000/tools/nexus:3.12.1 .&lt;br&gt;registry.martin.com:5000为我registry地址,构建之后将改image push到私库,当然也可以用harbor&lt;br&gt;如果有做ca校验，需要将证书拷贝到指定的:/etc/docker/certs.d/xxx/ca.crt,然后docker login校验&lt;br&gt;再docker push registry.martin.com:5000/tools/nexus:3.12.1，不然会提示x509认证失败&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-jenkins-ci-cd</title>
    <link href="http://www.leiyawu.com/2018/06/14/kubernetes-jenkins-ci-cd/"/>
    <id>http://www.leiyawu.com/2018/06/14/kubernetes-jenkins-ci-cd/</id>
    <published>2018-06-14T09:22:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h3><p>基于Jenkins的CI/CD流程如下所示:<br><img src="https://cos.leiyawu.com/docker/k8s/kubernetes-jenkins-ci-cd.png" alt="kubernetes-jenkins-ci-cd"></p><h3 id="流程说明："><a href="#流程说明：" class="headerlink" title="流程说明："></a>流程说明：</h3><ol><li>用户向Gitlab提交代码，代码中必须包含Dockerfile</li><li>将代码提交到远程仓库</li><li>用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建</li><li>Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库</li><li>Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项</li><li>生成应用的kubernetes YAML配置文件</li><li>更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息</li><li>更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看<a href="https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html">边缘节点配置</a></li><li>Jenkins调用kubernetes的API，部署应用</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;流程图：&quot;&gt;&lt;a href=&quot;#流程图：&quot; class=&quot;headerlink&quot; title=&quot;流程图：&quot;&gt;&lt;/a&gt;流程图：&lt;/h3&gt;&lt;p&gt;基于Jenkins的CI/CD流程如下所示:&lt;br&gt;&lt;img src=&quot;https://cos.leiyawu.com/do</summary>
      
    
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Pause容器</title>
    <link href="http://www.leiyawu.com/2018/06/13/Pause%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.leiyawu.com/2018/06/13/Pause%E5%AE%B9%E5%99%A8/</id>
    <published>2018-06-13T08:50:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pause容器定义"><a href="#Pause容器定义" class="headerlink" title="Pause容器定义"></a>Pause容器定义</h2><p>Pause容器，又叫Infra容器，本文将探究该容器的作用与原理。</p><p>在kubelet的配置中有这样一个参数：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">KUBELET_POD_INFRA_CONTAINER=--pod-infra-container-image=registry.access.redhat.com<span class="hljs-regexp">/rhel7/</span>pod-infrastructure:latest<br><br></code></pre></td></tr></table></figure><p>上面是openshift中的配置参数，kubernetes中默认的配置参数是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">KUBELET_POD_INFRA_CONTAINER</span>=--pod-infra-container-image=gcr.io/google_containers/pause-amd<span class="hljs-number">64</span>:<span class="hljs-number">3</span>.<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>Pause容器，是可以自己来定义，官方使用的gcr.io/google_containers/pause-amd64:3.0容器的代码见Github，使用C语言编写。</p><h2 id="Pause容器的作用"><a href="#Pause容器的作用" class="headerlink" title="Pause容器的作用"></a>Pause容器的作用</h2><p>检查nod节点的时候会发现每个node上都运行了很多的pause容器，例如如下:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@elk<span class="hljs-string">-02</span> bin]# docker ps<br>CONTAINER ID        IMAGE                                               COMMAND                  CREATED             STATUS              PORTS               NAMES<br>576c56bd6065        mirrorgooglecontainers/kubernetes-dashboard-amd64   &quot;/dashboard --inse...&quot;   2 hours ago         Up 2 hours                              k8s_kubernetes-dashboard_kubernetes-dashboard<span class="hljs-string">-66</span>c9d98865-jdbg8_kube-system_d2406f4f<span class="hljs-string">-6</span>de3<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_0<br>c4985381c2b7        d4b7466213fe                                        &quot;/coredns -conf /e...&quot;   2 hours ago         Up 2 hours                              k8s_coredns_coredns<span class="hljs-string">-77</span>c989547b-xq4dr_kube-system_d23ef2c4<span class="hljs-string">-6</span>de3<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_1<br>ba2fef1cbf00        mirrorgooglecontainers/pause-amd64:3.0              &quot;/pause&quot;                 2 hours ago         Up 2 hours                              k8s_POD_coredns<span class="hljs-string">-77</span>c989547b-xq4dr_kube-system_d23ef2c4<span class="hljs-string">-6</span>de3<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_1<br>ea6c2994b397        d4b7466213fe                                        &quot;/coredns -conf /e...&quot;   2 hours ago         Up 2 hours                              k8s_coredns_coredns<span class="hljs-string">-77</span>c989547b-lcbfw_kube-system_0696926b<span class="hljs-string">-6</span>d79<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_1<br>f61476c51230        mirrorgooglecontainers/pause-amd64:3.0              &quot;/pause&quot;                 2 hours ago         Up 2 hours                              k8s_POD_kubernetes-dashboard<span class="hljs-string">-66</span>c9d98865-jdbg8_kube-system_d2406f4f<span class="hljs-string">-6</span>de3<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_0<br>b6f61200d5ea        mirrorgooglecontainers/pause-amd64:3.0              &quot;/pause&quot;                 2 hours ago         Up 2 hours                              k8s_POD_coredns<span class="hljs-string">-77</span>c989547b-lcbfw_kube-system_0696926b<span class="hljs-string">-6</span>d79<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_1<br></code></pre></td></tr></table></figure><p>kubernetes中的pause容器主要为每个业务容器提供以下功能：</p><ul><li>在pod中担任Linux命名空间共享的基础；</li><li>启用pid命名空间，开启init进程。</li></ul><p>pause容器的作用可以从这个例子中看出，首先见下图：<br><img src="https://cos.leiyawu.com/docker/k8s/pause-container.png" alt="map"></p><h2 id="Pause容器测试"><a href="#Pause容器测试" class="headerlink" title="Pause容器测试"></a>Pause容器测试</h2><p>首先在节点上运行一个pause容器。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name pause -p <span class="hljs-number">8880</span>:<span class="hljs-number">80</span> martin/pause-amd<span class="hljs-number">64</span>:<span class="hljs-number">3</span>.<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>然后再运行一个nginx容器，nginx将为localhost:2398创建一个代理。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ cat <span class="hljs-symbol">&lt;&lt;EOF &gt;&gt;</span> nginx.conff<br>error_log stderr;<br>events &#123; worker_connections  <span class="hljs-number">1024</span>; &#125;<br>http &#123;<br>    access_log /dev/stdout combined;<br>    <span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span> default_server;<br>        server_name example.com www.example.com;<br>        <span class="hljs-keyword">location</span> / &#123;<br>            proxy_pass http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">2398</span>;<br>        &#125;<br>    &#125;<br>&#125;<br>EOF<br>$ docker run -d <span class="hljs-comment">--name nginx -v `pwd`/nginx.conf:/etc/nginx/nginx.conf --net=container:pause --ipc=container:pause --pid=container:pause nginx</span><br></code></pre></td></tr></table></figure><p>然后再为ghost创建一个应用容器，这是一款博客软件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker <span class="hljs-builtin-name">run</span> -d --name ghost <span class="hljs-attribute">--net</span>=container:pause <span class="hljs-attribute">--ipc</span>=container:pause <span class="hljs-attribute">--pid</span>=container:pause ghost<br><br></code></pre></td></tr></table></figure><p>现在访问<a href="http://localhost:8880/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0ghost%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%95%8C%E9%9D%A2%E4%BA%86%E3%80%82">http://localhost:8880/就可以看到ghost博客的界面了。</a></p><h2 id="Pause容器解析"><a href="#Pause容器解析" class="headerlink" title="Pause容器解析"></a>Pause容器解析</h2><p>pause容器将内部的80端口映射到宿主机的8880端口，pause容器在宿主机上设置好了网络namespace后，nginx容器加入到该网络namespace中，我们看到nginx容器启动的时候指定了–net=container:pause，ghost容器同样加入到了该网络namespace中，这样三个容器就共享了网络，互相之间就可以使用localhost直接通信，–ipc=contianer:pause –pid=container:pause就是三个容器处于同一个namespace中，init进程为pause，这时我们进入到ghost容器中查看进程情况。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># ps aux</span><br><span class="hljs-attribute">USER</span>       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br><span class="hljs-attribute">root</span>         <span class="hljs-number">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">1024</span>     <span class="hljs-number">4</span> ?        Ss   <span class="hljs-number">13</span>:<span class="hljs-number">49</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> /pause<br><span class="hljs-attribute">root</span>         <span class="hljs-number">5</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1</span>  <span class="hljs-number">32432</span>  <span class="hljs-number">5736</span> ?        Ss   <span class="hljs-number">13</span>:<span class="hljs-number">51</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> nginx: master p<br><span class="hljs-attribute">systemd</span>+     <span class="hljs-number">9</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">32980</span>  <span class="hljs-number">3304</span> ?        S    <span class="hljs-number">13</span>:<span class="hljs-number">51</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> nginx: worker p<br><span class="hljs-attribute">node</span>        <span class="hljs-number">10</span>  <span class="hljs-number">0</span>.<span class="hljs-number">3</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span> <span class="hljs-number">1254200</span> <span class="hljs-number">83788</span> ?       Ssl  <span class="hljs-number">13</span>:<span class="hljs-number">53</span>   <span class="hljs-number">0</span>:<span class="hljs-number">03</span> node current/in<br><span class="hljs-attribute">root</span>        <span class="hljs-number">79</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">4336</span>   <span class="hljs-number">812</span> pts/<span class="hljs-number">0</span>    Ss   <span class="hljs-number">14</span>:<span class="hljs-number">09</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> sh<br><span class="hljs-attribute">root</span>        <span class="hljs-number">87</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">17500</span>  <span class="hljs-number">2080</span> pts/<span class="hljs-number">0</span>    R+   <span class="hljs-number">14</span>:<span class="hljs-number">10</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> ps aux<br></code></pre></td></tr></table></figure><p>在ghost容器中同时可以看到pause和nginx容器的进程，并且pause容器的PID是1。而在kubernetes中容器的PID=1的进程即为容器本身的业务进程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://o-my-chenjian.com/2017/10/17/The-Pause-Container-Of-Kubernetes/">Kubernetes只Pause容器</a></p><p><a href="https://jimmysong.io/posts/what-is-a-pause-container/">kubernetes中的infra容器——Pause容器探究</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Pause容器定义&quot;&gt;&lt;a href=&quot;#Pause容器定义&quot; class=&quot;headerlink&quot; title=&quot;Pause容器定义&quot;&gt;&lt;/a&gt;Pause容器定义&lt;/h2&gt;&lt;p&gt;Pause容器，又叫Infra容器，本文将探究该容器的作用与原理。&lt;/p&gt;
&lt;p&gt;在</summary>
      
    
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://www.leiyawu.com/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>crontab、anacron、logrotate relationship</title>
    <link href="http://www.leiyawu.com/2018/05/24/crontab%E5%92%8Canacron%E5%92%8Clogrotate-relation/"/>
    <id>http://www.leiyawu.com/2018/05/24/crontab%E5%92%8Canacron%E5%92%8Clogrotate-relation/</id>
    <published>2018-05-24T08:33:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>服务器上的nginx使用logrotate来分割日志，设置为每天分割。但是logrotate似乎没有工作，日志并没有分割。服务器是CentOS 6。</p><p>为了找到原因，分析可能出错的地方。<br>如果是logrotate未执行，可能是crond没有启动，因为logrotate被/etc/cron.daily/logrotate脚本所启动，可以查看其中代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@test ~]<span class="hljs-comment"># cat /etc/cron.daily/logrotate</span><br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-regexp">/usr/</span>sbin<span class="hljs-regexp">/logrotate /</span>etc/logrotate.conf<br>EXITVALUE=$?<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$EXITVALUE</span> != <span class="hljs-number">0</span> ]; then<br>    <span class="hljs-regexp">/usr/</span>bin/logger -t logrotate <span class="hljs-string">&quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span><br>fi<br><span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可以看到logrotate运行时加载配置文件logrotate.conf，而这个配置文件除了设定一些分割日志相关的选项，还包含分割日志的配置文件目录/etc/logrotate.d。</p><p>nginx的日志分割配置文件就保存在logrotate.d目录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@test ~]<span class="hljs-comment"># cat !$</span><br>cat <span class="hljs-regexp">/etc/</span>logrotate.d/nginx<br><span class="hljs-regexp">/root/</span>*.log &#123;<br>    Daily<br>    Missingok<br>    rotate <span class="hljs-number">52</span><br>    compress<br>    delaycompress<br>    notifempty<br>    dateext<br>    create <span class="hljs-number">644</span> nobody nobody<br>    sharedscripts<br>    postrotate<br>    [ -f <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs<span class="hljs-regexp">/nginx.pid ] &amp;&amp; kill -USR1 `cat /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/logs/</span>nginx.pid`<br>    endscript<br>&#125;<br></code></pre></td></tr></table></figure><p>/root/*.log就是需要被分割的日志的目录，通配符*表示目录内的所有log文件都被分割，分割的规则就是{…}中的内容。这里把/root/*.log当做nginx日志只是为了测试。<br>在启动crond服务后，发现日志还是没有分割，于是想到会不会是/etc/logrotate.d/nginx配置文件的语法有问题，使用以下命令调试这个文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">logrotate -vfd <span class="hljs-regexp">/etc/</span>logrotate.d/nginx  <span class="hljs-comment"># -vfd 三个选项分别表示显示详情，强制分割日志，只是调试配置文件而不是真的分割日志</span><br></code></pre></td></tr></table></figure><p>输出结果表明有语法错误，Daily，Missingok 都应该是小写。改成daily，missingok。再次调试配置文件，可以正确分割日志：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@test ~]# ls <span class="hljs-string">-1</span> /root/<br>install<span class="hljs-string">-2017</span><span class="hljs-string">-5</span><span class="hljs-string">-14</span>.log<br>install<span class="hljs-string">-2017</span><span class="hljs-string">-5</span><span class="hljs-string">-14</span>.log<span class="hljs-string">-20170521</span>  #logrotate归档的日志<br></code></pre></td></tr></table></figure><p>上面猜测是crond执行/etc/cron.daily/内的脚本，实现定时执行计划任务，包括执行logrotate日志分割。<br>为了验证是否正确，网上搜索一番后找到了答案。如果没有crontab命令，先安装：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">yum install crontabs  <span class="hljs-meta">#安装crond，crond实际上来自cronie包，这个包作为crontabs包的依赖被安装</span><br>chkconfig --<span class="hljs-keyword">add</span> crond <span class="hljs-meta">#添加到开机启动列表</span><br>chkconfig crond <span class="hljs-keyword">on</span>    <span class="hljs-meta">#开机启动crond服务</span><br>/etc/<span class="hljs-keyword">init</span>.d/crond     <span class="hljs-meta">#立即启动crond</span><br><br></code></pre></td></tr></table></figure><span id="more"></span><p>以下文件或目录的作用：<br>cron计划任务有两种类型：</p><ul><li>1）系统cron任务：由crond服务执行，/etc/crontab配置系统级别的任务</li><li>2）用户cron任务：由crond服务执行，用crontab命令编辑用户级别的任务</li></ul><p><font color=#DC143C size=3>属于系统cron任务的文件或目录：</font></p><ul><li>/etc/cron.d             #系统的任务脚本。执行 rpm -ql cronie 可以看到该目录被cronie包安装</li><li>/etc/cron.hourly     #每小时执行其内脚本。其中的0anacron文件调用anacron来执行任务，它被包cronie-anacron安装</li><li>/etc/cron.daily        #每天执行其内脚本。也被anacron执行其内脚本，logrotate调用脚本就在该目录内</li><li>/etc/cron.weekly     #每周执行其内脚本。</li><li>/etc/cron.monthly   #每月执行其内脚本。</li></ul><p><font color=#DC143C size=3>控制用户cron任务的执行：</font></p><ul><li>/etc/cron.allow   #默认不存在，如果这个文件存在，只有用户在这个文件中才能使用crontab命令</li><li>/etc/cron.deny    #将不可以使用crontab命令的用户写入其中</li></ul><p>注意：cron.allow和cron.deny就是用户名的列表，每行一个用户名。比如 cron.deny中有一行jason，效果是如果当前登录用户是jason，执行 crontab -e会提示不允许使用crontab命令。</p><p>以下三个目录的作用：</p><p>/var/spool/cron/USER_NAME<br>#这个文件才是跟crontab -e/-l 关联的，这个文件保存了crontab -e编辑的任务内容<br>#比如执行 crontab -u root -e，编辑保存后，就会有/var/spool/cron/root 这个文件</p><p>/var/spool/anacron/{cron.daily,cron.monthly,cron.weekly}<br>#这三个文件记录了anacron上一次执行的时间（上一天，上一周或上一月）<br>#anacron任务执行时，对照这里的时间，决定是否执行anacron任务</p><p>/var/lib/logrotate.status<br>#这个文件记录logrotate执行情况，logrotate参考这个文件来决定是否需要rotate日志</p><p>crontab和anacron和logrotate的关系：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@test ~]# cat <span class="hljs-regexp">/etc/</span>cron.d<span class="hljs-regexp">/0hourly     #这个文件指定每小时的01分执行/</span>etc/cron.hourly内的所有脚本<br>SHELL=<span class="hljs-regexp">/bin/</span>bash<br>PATH=<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin<br>MAILTO=root<br>HOME=/<br><span class="hljs-number">01</span> * * * * root run-parts <span class="hljs-regexp">/etc/</span>cron.hourly  #这里的root指定执行任务的用户，run-parts其实是一个可执行脚本，在<span class="hljs-regexp">/usr/</span>bin/run-parts，用来执行cron.hourly目录内的所有脚本<br><br></code></pre></td></tr></table></figure><p>说明：用crontab -e命令每次编辑完某个用户的cron设置后，cron自动在/var/spool/cron下生成一个与此用户同名的文件，此用户的cron信息都记录在这个文件中。cron启动后每过一份钟读一次这个文件，检查是否要执行里面的命令。因此此文件修改后不需要重新启动cron服务。cron服务每分钟不仅要读一次/var/spool/cron内的所有文件，还需要读一次/etc/crontab，因此我们配置这个文件也能运用cron服务做一些事情。用crontab命令配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务。此文件的文件格式是：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">SHELL=<span class="hljs-regexp">/bin/bash</span><br>PATH=<span class="hljs-regexp">/sbin:/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span>     <span class="hljs-comment">#可执行文件查找路径</span><br>MAILTO=root      <span class="hljs-comment">#如果出现错误，或者有数据输出，数据作为邮件发给这个帐号</span><br>HOME=<span class="hljs-regexp">/           #使用者运行的路径，这里是根目录</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@test ~]<span class="hljs-comment"># cat /etc/cron.hourly/0anacron   #cron.hourly目录下的脚本，根据条件执行anacron命令</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># Skip excecution unless the date has changed from the previous run</span><br><span class="hljs-keyword">if</span> test -r <span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/anacron/</span>cron.daily; then<br>    day=`cat <span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/anacron/</span>cron.daily`<br>fi<br><span class="hljs-keyword">if</span> [ `date +%Y%m%d` = <span class="hljs-string">&quot;$day&quot;</span> ]; then<br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span>;<br>fi<br><br><span class="hljs-comment"># Skip excecution unless AC powered</span><br><span class="hljs-keyword">if</span> test -x <span class="hljs-regexp">/usr/</span>bin/on_ac_power; then<br>    <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/on_ac_power &amp;&gt; /</span>dev/null<br>    <span class="hljs-keyword">if</span> test $? -eq <span class="hljs-number">1</span>; then<br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>    fi<br>fi<br><span class="hljs-regexp">/usr/</span>sbin/anacron -s<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@test ~]<span class="hljs-comment"># cat /etc/anacrontab   #如果执行anacron命令，那么接着查看anacron的配置文件</span><br><span class="hljs-comment"># /etc/anacrontab: configuration file for anacron</span><br><br><span class="hljs-comment"># See anacron(8) and anacrontab(5) for details.</span><br><br>SHELL=<span class="hljs-regexp">/bin/</span>sh<br>PATH=<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin<br>MAILTO=root<br><span class="hljs-comment"># the maximal random delay added to the base delay of the jobs</span><br>RANDOM_DELAY=<span class="hljs-number">45</span>     <span class="hljs-comment">#最大延迟时间</span><br><span class="hljs-comment"># the jobs will be started during the following hours only</span><br>START_HOURS_RANGE=<span class="hljs-number">3</span>-<span class="hljs-number">22</span>     <span class="hljs-comment">#只有在3-22点之间执行任务</span><br><br><span class="hljs-comment">#period in days   delay in minutes   job-identifier   command</span><br><span class="hljs-number">1</span>    <span class="hljs-number">5</span>    cron.daily        nice run-parts <span class="hljs-regexp">/etc/</span>cron.daily<br><span class="hljs-number">7</span>    <span class="hljs-number">25</span>    cron.weekly        nice run-parts <span class="hljs-regexp">/etc/</span>cron.weekly<br>@monthly <span class="hljs-number">45</span>    cron.monthly        nice run-parts <span class="hljs-regexp">/etc/</span>cron.monthly<br></code></pre></td></tr></table></figure><p>以上anacrontab配置文件最重要的是最后一部分，以这行为例：</p><p>1    5    cron.daily        nice run-parts /etc/cron.daily</p><p>表示每天都执行/etc/cront.daily/目录下的脚本文件，真实的延迟是RANDOM_DELAY+delay。这里的延迟是5分钟，加上上面的RANDOM_DELAY，所以实际的延迟时间是5-50之间，开始时间为03-22点，如果机器没关，那么一般就是在03:05-03:50之间执行。<font color=#DC143C size=3>nice命令将该进程设置为nice=10，默认为0，即低优先级进程。</font>如果RANDOM_DELAY=0，那么表示准确延迟5min，即03:05执行cron.daily内的脚本。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@test ~]<span class="hljs-comment"># cat /etc/cron.daily/logrotate  #最后在cron.daily内有logrotate的调用脚本</span><br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-regexp">/usr/</span>sbin<span class="hljs-regexp">/logrotate /</span>etc<span class="hljs-regexp">/logrotate.conf       #logrotate将会读取配置文件，最终会读取到/</span>etc<span class="hljs-regexp">/logrotate.d/</span>nginx<br>EXITVALUE=$?<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$EXITVALUE</span> != <span class="hljs-number">0</span> ]; then<br>    <span class="hljs-regexp">/usr/</span>bin/logger -t logrotate <span class="hljs-string">&quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span><br>fi<br><span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>当logrotate命令加载了/etc/logrotate.d/nginx配置文件时，还要比较nginx日志的归档日期：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@test ~]# cat /var/lib/logrotate.status | grep /root<br>&quot;/root/install<span class="hljs-string">-2017</span><span class="hljs-string">-5</span><span class="hljs-string">-14</span>.log&quot; 2017<span class="hljs-string">-5</span><span class="hljs-string">-21</span>   #如果今天是2017<span class="hljs-string">-5</span><span class="hljs-string">-21</span>，这个文件里也是2017<span class="hljs-string">-5</span><span class="hljs-string">-21</span>，说明今天已经归档过了，否则就会归档（分割）nginx日志<br></code></pre></td></tr></table></figure><p>综上，整个逻辑流程为：</p><p>crond服务加载/etc/cron.d/0hourly —&gt;在每小时的01分执行/etc/cront.hourly/0anacron —&gt;执行anacron —&gt;根据/etc/anacrontab的配置执行/etc/cron.daily，/etc/cron.weekly，/etc/cron.monthly —&gt;执行/etc/cron.daily/下的logrotate脚本 —&gt;执行logrotate —&gt;根据/etc/logrotate.conf配置执行脚本/etc/logrotate.d/nginx —&gt;分割nginx日志成功</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;服务器上的nginx使用logrotate来分割日志，设置为每天分割。但是logrotate似乎没有工作，日志并没有分割。服务器是CentOS 6。&lt;/p&gt;
&lt;p&gt;为了找到原因，分析可能出错的地方。&lt;br&gt;如果是logrotate未执行，可能是crond没有启动，因为logrotate被/etc/cron.daily/logrotate脚本所启动，可以查看其中代码：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;[root@test ~]&lt;span class=&quot;hljs-comment&quot;&gt;# cat /etc/cron.daily/logrotate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;sbin&lt;span class=&quot;hljs-regexp&quot;&gt;/logrotate /&lt;/span&gt;etc/logrotate.conf&lt;br&gt;EXITVALUE=$?&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;hljs-variable&quot;&gt;$EXITVALUE&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ]; then&lt;br&gt;    &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;bin/logger -t logrotate &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;ALERT exited abnormally with [$EXITVALUE]&amp;quot;&lt;/span&gt;&lt;br&gt;fi&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到logrotate运行时加载配置文件logrotate.conf，而这个配置文件除了设定一些分割日志相关的选项，还包含分割日志的配置文件目录/etc/logrotate.d。&lt;/p&gt;
&lt;p&gt;nginx的日志分割配置文件就保存在logrotate.d目录：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;[root@test ~]&lt;span class=&quot;hljs-comment&quot;&gt;# cat !$&lt;/span&gt;&lt;br&gt;cat &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;logrotate.d/nginx&lt;br&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/root/&lt;/span&gt;*.log &amp;#123;&lt;br&gt;    Daily&lt;br&gt;    Missingok&lt;br&gt;    rotate &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;&lt;br&gt;    compress&lt;br&gt;    delaycompress&lt;br&gt;    notifempty&lt;br&gt;    dateext&lt;br&gt;    create &lt;span class=&quot;hljs-number&quot;&gt;644&lt;/span&gt; nobody nobody&lt;br&gt;    sharedscripts&lt;br&gt;    postrotate&lt;br&gt;    [ -f &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;hljs-regexp&quot;&gt;/nginx/&lt;/span&gt;logs&lt;span class=&quot;hljs-regexp&quot;&gt;/nginx.pid ] &amp;amp;&amp;amp; kill -USR1 `cat /u&lt;/span&gt;sr&lt;span class=&quot;hljs-regexp&quot;&gt;/local/&lt;/span&gt;nginx&lt;span class=&quot;hljs-regexp&quot;&gt;/logs/&lt;/span&gt;nginx.pid`&lt;br&gt;    endscript&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;/root/*.log就是需要被分割的日志的目录，通配符*表示目录内的所有log文件都被分割，分割的规则就是{…}中的内容。这里把/root/*.log当做nginx日志只是为了测试。&lt;br&gt;在启动crond服务后，发现日志还是没有分割，于是想到会不会是/etc/logrotate.d/nginx配置文件的语法有问题，使用以下命令调试这个文件：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;logrotate -vfd &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;logrotate.d/nginx  &lt;span class=&quot;hljs-comment&quot;&gt;# -vfd 三个选项分别表示显示详情，强制分割日志，只是调试配置文件而不是真的分割日志&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果表明有语法错误，Daily，Missingok 都应该是小写。改成daily，missingok。再次调试配置文件，可以正确分割日志：&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs subunit&quot;&gt;[root@test ~]# ls &lt;span class=&quot;hljs-string&quot;&gt;-1&lt;/span&gt; /root/&lt;br&gt;install&lt;span class=&quot;hljs-string&quot;&gt;-2017&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;-5&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;-14&lt;/span&gt;.log&lt;br&gt;install&lt;span class=&quot;hljs-string&quot;&gt;-2017&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;-5&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;-14&lt;/span&gt;.log&lt;span class=&quot;hljs-string&quot;&gt;-20170521&lt;/span&gt;  #logrotate归档的日志&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面猜测是crond执行/etc/cron.daily/内的脚本，实现定时执行计划任务，包括执行logrotate日志分割。&lt;br&gt;为了验证是否正确，网上搜索一番后找到了答案。如果没有crontab命令，先安装：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs csharp&quot;&gt;yum install crontabs  &lt;span class=&quot;hljs-meta&quot;&gt;#安装crond，crond实际上来自cronie包，这个包作为crontabs包的依赖被安装&lt;/span&gt;&lt;br&gt;chkconfig --&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt; crond &lt;span class=&quot;hljs-meta&quot;&gt;#添加到开机启动列表&lt;/span&gt;&lt;br&gt;chkconfig crond &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;#开机启动crond服务&lt;/span&gt;&lt;br&gt;/etc/&lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;.d/crond     &lt;span class=&quot;hljs-meta&quot;&gt;#立即启动crond&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Logrotate" scheme="http://www.leiyawu.com/categories/Logrotate/"/>
    
    
    <category term="Logrotate" scheme="http://www.leiyawu.com/tags/Logrotate/"/>
    
  </entry>
  
  <entry>
    <title>ELK Sentinl</title>
    <link href="http://www.leiyawu.com/2018/05/21/ELK-Sentinl/"/>
    <id>http://www.leiyawu.com/2018/05/21/ELK-Sentinl/</id>
    <published>2018-05-21T02:06:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sentinl简介"><a href="#Sentinl简介" class="headerlink" title="Sentinl简介"></a>Sentinl简介</h3><p>Sentinl 5扩展自Kibi / Kibana 5，具有警报和报告功能，可使用标准查询，可编程验证器和各种可配置操作来监控，通知和报告数据系列更改 - 将其视为一个独立的“观察者” “报告”功能（PNG / PDFs快照）。</p><p>SENTINEL还旨在通过直接在Kibana UI中整合来简化在Kibi / Kibana中创建和管理警报和报告的过程。</p><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><p>Watchers<br>Alarms<br>Reports<br>Watchers是Sentinl核心，主要由 input,Condition,Transform,Actions几大块组成，可以和X-Pack一一对应，部分文档可参考X-Pack，但需要注意的是它和X-Pack还有一些区别，主要体现在input只实现了search，其他并未实现，Actions也并未都实现</p><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><ul><li>安装</li></ul><p>/usr/share/kibana/bin/kibana-plugin install <a href="https://github.com/sirensolutions/sentinl/releases/download/tag-5.5/sentinl-v5.6.5.zip">https://github.com/sirensolutions/sentinl/releases/download/tag-5.5/sentinl-v5.6.5.zip</a></p><ul><li>config</li></ul><p>kibana.yml config:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sentinl:</span><br>  <span class="hljs-attr">es:</span><br>    <span class="hljs-attr">timefield:</span> <span class="hljs-string">&#x27;@timestamp&#x27;</span><br>    <span class="hljs-attr">default_index:</span> <span class="hljs-string">watcher</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">watch</span><br>    <span class="hljs-attr">alarm_index:</span> <span class="hljs-string">watcher_alarms</span><br>  <span class="hljs-attr">sentinl:</span><br>    <span class="hljs-attr">history:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">results:</span> <span class="hljs-number">50</span><br>  <span class="hljs-attr">settings:</span><br>    <span class="hljs-attr">email:</span><br>      <span class="hljs-attr">active:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">username</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">password</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.server.com</span><br>      <span class="hljs-attr">ssl:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-number">10000</span>  <span class="hljs-comment"># mail server connection timeout</span><br>    <span class="hljs-attr">slack:</span><br>      <span class="hljs-attr">active:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">username</span><br>      <span class="hljs-attr">hook:</span> <span class="hljs-string">&#x27;https://hooks.slack.com/services/&lt;token&gt;&#x27;</span><br>      <span class="hljs-attr">channel:</span> <span class="hljs-string">&#x27;#channel&#x27;</span><br>    <span class="hljs-attr">report:</span><br>      <span class="hljs-attr">active:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">tmp_path:</span> <span class="hljs-string">/tmp/</span><br>    <span class="hljs-attr">pushapps:</span><br>      <span class="hljs-attr">active:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">api_key:</span> <span class="hljs-string">&#x27;&lt;pushapps API Key&gt;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>raw</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;input&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;search&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;request&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;index&quot;</span>: [<br>            <span class="hljs-string">&quot;&lt;xxx-&#123;now/d&#125;&gt;&quot;</span><br>          ],<br>          <span class="hljs-string">&quot;body&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;should&quot;</span>: [<br>                  &#123;<br>                    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>                      <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;502&quot;</span><br>                    &#125;<br>                  &#125;,<br>                  &#123;<br>                    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>                      <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;404&quot;</span><br>                    &#125;<br>                  &#125;<br>                ],<br>                <span class="hljs-string">&quot;minimum_should_match&quot;</span>: <span class="hljs-number">1</span>,  <span class="hljs-comment">#must setup</span><br>                <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                  <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>                      <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;now-60s&quot;</span>,<br>                      <span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-string">&quot;now&quot;</span><br>                    &#125;<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;condition&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;script&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;payload.hits.total &gt; 30&quot;</span><br>      &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Sentinl简介&quot;&gt;&lt;a href=&quot;#Sentinl简介&quot; class=&quot;headerlink&quot; title=&quot;Sentinl简介&quot;&gt;&lt;/a&gt;Sentinl简介&lt;/h3&gt;&lt;p&gt;Sentinl 5扩展自Kibi / Kibana 5，具有警报和报告功能，可使用标</summary>
      
    
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/categories/ELK/"/>
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>ES内置账号密码修改、自定义角色自定义账号、ldap及AD认证</title>
    <link href="http://www.leiyawu.com/2018/05/07/es/"/>
    <id>http://www.leiyawu.com/2018/05/07/es/</id>
    <published>2018-05-07T10:29:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义内置账号"><a href="#自定义内置账号" class="headerlink" title="自定义内置账号"></a>自定义内置账号</h2><ul><li>账户elastic为elasticsearch超级管理员，拥有所有权限</li><li>账户kibana用于kibana组件获取相关信息用于web展示</li><li>账户logstash_system用于logstash服务获取elasticsearch的监控数据</li><li>注意：此步骤需先启动elasticsearch服务</li></ul><p><img src="https://cos.leiyawu.com/img/elk/es_user.png" alt="es_user"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[elasticsearch@elasticsearch elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ ./bin/x-pack/setup-passwords interactive<br>Initiating the setup <span class="hljs-keyword">of</span> reserved <span class="hljs-keyword">user</span> elastic,kibana,logstash_system passwords.<br>You will be prompted <span class="hljs-keyword">to</span> enter passwords <span class="hljs-keyword">as</span> the process progresses.<br>Please confirm that you would <span class="hljs-keyword">like</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> [y/N]y<br><br><br>Enter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> [elastic]: <br>Reenter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> [elastic]: <br>Enter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> [kibana]: <br>Reenter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> [kibana]: <br>Enter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> [logstash_system]: <br>Reenter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> [logstash_system]: <br>Changed <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> [kibana]<br>Changed <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> [logstash_system]<br>Changed <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> [elastic]<br>[elasticsearch@elasticsearch elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ <br></code></pre></td></tr></table></figure><h2 id="验证内置账户访问"><a href="#验证内置账户访问" class="headerlink" title="验证内置账户访问"></a>验证内置账户访问</h2><ul><li>若不提供用户名密码则返回401</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl &#x27;http:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;error&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;root_cause&quot;</span> : [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;security_exception&quot;</span>,<br>        <span class="hljs-string">&quot;reason&quot;</span> : <span class="hljs-string">&quot;missing authentication token for REST request [/_cat/indices?pretty]&quot;</span>,<br>        <span class="hljs-string">&quot;header&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;WWW-Authenticate&quot;</span> : <span class="hljs-string">&quot;Basic realm=<span class="hljs-subst">\&quot;</span>security<span class="hljs-subst">\&quot;</span> charset=<span class="hljs-subst">\&quot;</span>UTF-8<span class="hljs-subst">\&quot;</span>&quot;</span><br>        &#125;<br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;security_exception&quot;</span>,<br>    <span class="hljs-string">&quot;reason&quot;</span> : <span class="hljs-string">&quot;missing authentication token for REST request [/_cat/indices?pretty]&quot;</span>,<br>    <span class="hljs-string">&quot;header&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;WWW-Authenticate&quot;</span> : <span class="hljs-string">&quot;Basic realm=<span class="hljs-subst">\&quot;</span>security<span class="hljs-subst">\&quot;</span> charset=<span class="hljs-subst">\&quot;</span>UTF-8<span class="hljs-subst">\&quot;</span>&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-number">401</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>提供相应用户信息后可访问，若用户权限不足则返回403</p><p>使用logstash_system用户访问</p></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ada">[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl <span class="hljs-symbol">&#x27;http</span>://<span class="hljs-number">10.59</span>.<span class="hljs-number">30.96</span>:<span class="hljs-number">9200</span>/_cat/indices?pretty&#x27; -u logstash_system:logstash_system<br>&#123;<br>  <span class="hljs-string">&quot;error&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;root_cause&quot;</span> : [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">security_exception</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>reason<span class="hljs-string">&quot; : &quot;</span>action [indices:monitor/stats] <span class="hljs-keyword">is</span> unauthorized <span class="hljs-keyword">for</span> user [logstash_system]<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    ],</span><br><span class="hljs-string">    &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>security_exception<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>reason<span class="hljs-string">&quot; : &quot;</span>action [indices:monitor/stats] <span class="hljs-keyword">is</span> unauthorized <span class="hljs-keyword">for</span> user [logstash_system]<span class="hljs-string">&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>status<span class="hljs-string">&quot; : 403</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">[elasticsearch@elasticsearch elasticsearch-6.0.0]$</span><br></code></pre></td></tr></table></figure><ul><li>使用kibana用户访问</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl &#x27;http:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27; -u kibana:kibana</span><br>yellow <span class="hljs-keyword">open</span> .monitoring<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">-</span><span class="hljs-number">2018.01</span>.<span class="hljs-number">10</span>   nND6<span class="hljs-operator">-</span>i_rR5iLEYVccBGj8w <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>yellow <span class="hljs-keyword">open</span> .triggered_watches            <span class="hljs-type">BtygGZisSDqiL3Y2TaQGqQ</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>green  <span class="hljs-keyword">open</span> .security<span class="hljs-operator">-</span><span class="hljs-number">6</span>                   <span class="hljs-type">QVRL1mcFSAilryHGEhen7Q</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>    <br>yellow <span class="hljs-keyword">open</span> .watcher<span class="hljs-operator">-</span>history<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">-</span><span class="hljs-number">2018.01</span>.<span class="hljs-number">10</span> <span class="hljs-type">SBGiHDAnTPiXFoHU65VY_g</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>yellow <span class="hljs-keyword">open</span> .watches                      kMzN4j5cQySZQQSDVPww8w <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>yellow <span class="hljs-keyword">open</span> .monitoring<span class="hljs-operator">-</span>alerts<span class="hljs-operator">-</span><span class="hljs-number">6</span>          <span class="hljs-type">VygY6VN9R3S0PR_jrGy50Q</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ <br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="添加自定义角色"><a href="#添加自定义角色" class="headerlink" title="添加自定义角色"></a>添加自定义角色</h2><ul><li><p>添加角色接口为 POST /_xpack/security/role/<rolename></p><p>下述示例为添加超级管理员角色的方法</p></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs ada">[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl -XPOST -H <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-keyword">type</span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>://<span class="hljs-number">10.59</span>.<span class="hljs-number">30.96</span>:<span class="hljs-number">9200</span>/_xpack/security/role/admin?pretty&#x27; -d &#x27;&#123;<br>&gt;   <span class="hljs-string">&quot;run_as&quot;</span>: [ <span class="hljs-string">&quot;elastic&quot;</span> ],<br>&gt;   <span class="hljs-string">&quot;cluster&quot;</span>: [ <span class="hljs-string">&quot;all&quot;</span> ],<br>&gt;   <span class="hljs-string">&quot;indices&quot;</span>: [<br>&gt;     &#123;<br>&gt;       <span class="hljs-string">&quot;names&quot;</span>: [ <span class="hljs-string">&quot;*&quot;</span> ],<br>&gt;       <span class="hljs-string">&quot;privileges&quot;</span>: [ <span class="hljs-string">&quot;all&quot;</span> ]<br>&gt;     &#125;<br>&gt;   ]<br>&gt; &#125;&#x27;<br>&#123;<br>  <span class="hljs-string">&quot;role&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;created&quot;</span> : <span class="hljs-type">true</span><br>  &#125;<br>&#125;<br>[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl -XGET -H <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-keyword">type</span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>://<span class="hljs-number">10.59</span>.<span class="hljs-number">30.96</span>:<span class="hljs-number">9200</span>/_xpack/security/role/admin?pretty&#x27;<br>&#123;<br>  <span class="hljs-string">&quot;admin&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;cluster&quot;</span> : [<br>      <span class="hljs-string">&quot;all&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;indices&quot;</span> : [<br>      &#123;<br>        <span class="hljs-string">&quot;names&quot;</span> : [<br>          <span class="hljs-string">&quot;*&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;privileges&quot;</span> : [<br>          <span class="hljs-string">&quot;all&quot;</span><br>        ]<br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;run_as&quot;</span> : [<br>      <span class="hljs-string">&quot;elastic&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;metadata&quot;</span> : &#123; &#125;,<br>    <span class="hljs-string">&quot;transient_metadata&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;enabled&quot;</span> : <span class="hljs-type">true</span><br>    &#125;<br>  &#125;<br>&#125;<br>[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$<br></code></pre></td></tr></table></figure><h2 id="添加自定义账户"><a href="#添加自定义账户" class="headerlink" title="添加自定义账户"></a>添加自定义账户</h2><ul><li><p>添加用户接口为 POST /_xpack/security/user/<username></p><p>下述为添加martin账户并添加至admin角色操作方法</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs scala">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ curl -<span class="hljs-type">XPOST</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//10.59.30.96:9200/_xpack/security/user/martin?pretty&#x27; -d &#x27;&#123;</span><br>&gt;   <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;123456&quot;</span>,<br>&gt;   <span class="hljs-string">&quot;full_name&quot;</span> : <span class="hljs-string">&quot;Martin Lei&quot;</span>,<br>&gt;   <span class="hljs-string">&quot;roles&quot;</span> : [<span class="hljs-string">&quot;admin&quot;</span>],<br>&gt;   <span class="hljs-string">&quot;email&quot;</span> : <span class="hljs-string">&quot;martin@martin.com&quot;</span><br>&gt; &#125;&#x27;<br>&#123;<br>  <span class="hljs-string">&quot;user&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;created&quot;</span> : <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ curl -<span class="hljs-type">XGET</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//10.59.30.96:9200/_xpack/security/user/martin?pretty&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;rocshen&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;martin&quot;</span>,<br>    <span class="hljs-string">&quot;roles&quot;</span> : [<br>      <span class="hljs-string">&quot;admin&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;full_name&quot;</span> : <span class="hljs-string">&quot;Martin Lei&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span> : <span class="hljs-string">&quot;martin@martin.com&quot;</span>,<br>    <span class="hljs-string">&quot;metadata&quot;</span> : &#123; &#125;,<br>    <span class="hljs-string">&quot;enabled&quot;</span> : <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ curl -<span class="hljs-type">XGET</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>: application/json&#x27; -u martin:<span class="hljs-number">123456</span> <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27;</span><br>yellow open .monitoring-es<span class="hljs-number">-6</span><span class="hljs-number">-2018.01</span><span class="hljs-number">.10</span>   nND6-i_rR5iLEYVccBGj8w <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">4883</span> <span class="hljs-number">88</span>   <span class="hljs-number">2.5</span>mb   <span class="hljs-number">2.5</span>mb<br>yellow open .triggered_watches            <span class="hljs-type">BtygGZisSDqiL3Y2TaQGqQ</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">24.2</span>kb  <span class="hljs-number">24.2</span>kb<br>green  open .security<span class="hljs-number">-6</span>                   <span class="hljs-type">QVRL1mcFSAilryHGEhen7Q</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>                        <br>yellow open .watcher-history<span class="hljs-number">-6</span><span class="hljs-number">-2018.01</span><span class="hljs-number">.10</span> <span class="hljs-type">SBGiHDAnTPiXFoHU65VY_g</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">630</span>  <span class="hljs-number">0</span> <span class="hljs-number">703.3</span>kb <span class="hljs-number">703.3</span>kb<br>yellow open .watches                      kMzN4j5cQySZQQSDVPww8w <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <span class="hljs-number">5</span>  <span class="hljs-number">0</span>  <span class="hljs-number">33.3</span>kb  <span class="hljs-number">33.3</span>kb<br>yellow open .monitoring-alerts<span class="hljs-number">-6</span>          <span class="hljs-type">VygY6VN9R3S0PR_jrGy50Q</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <span class="hljs-number">1</span>  <span class="hljs-number">0</span>   <span class="hljs-number">6.5</span>kb   <span class="hljs-number">6.5</span>kb<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$<br><br></code></pre></td></tr></table></figure><h2 id="修改账户密码"><a href="#修改账户密码" class="headerlink" title="修改账户密码"></a>修改账户密码</h2><ol><li>修改密码需使用超级管理员权限即elastic账户，接口为POST _xpack/security/user/<username>/_password</li></ol><p>curl参数含义如下</p><ul><li>-XPOST 使用post方法传递参数</li><li>-H 指定http协议的header信息</li><li>-u 指定用于认证的用户信息用户名与密码使用冒号分隔</li><li>-d 指定具体要传递的参数信息</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ curl -<span class="hljs-type">XPOST</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//10.59.30.96:9200/_xpack/security/user/kibana/_password?pretty&#x27; -d &#x27;&#123;&quot;password&quot;: &quot;123456&quot;&#125;&#x27;</span><br>&#123; &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>密码修改后使用老密码访问则返回401，使用更新后的密码则正常</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl &#x27;http:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27; -u kibana:kibana</span><br>&#123;<br>  <span class="hljs-string">&quot;error&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;root_cause&quot;</span> : [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;security_exception&quot;</span>,<br>        <span class="hljs-string">&quot;reason&quot;</span> : <span class="hljs-string">&quot;failed to authenticate user [kibana]&quot;</span>,<br>        <span class="hljs-string">&quot;header&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;WWW-Authenticate&quot;</span> : <span class="hljs-string">&quot;Basic realm=<span class="hljs-subst">\&quot;</span>security<span class="hljs-subst">\&quot;</span> charset=<span class="hljs-subst">\&quot;</span>UTF-8<span class="hljs-subst">\&quot;</span>&quot;</span><br>        &#125;<br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;security_exception&quot;</span>,<br>    <span class="hljs-string">&quot;reason&quot;</span> : <span class="hljs-string">&quot;failed to authenticate user [kibana]&quot;</span>,<br>    <span class="hljs-string">&quot;header&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;WWW-Authenticate&quot;</span> : <span class="hljs-string">&quot;Basic realm=<span class="hljs-subst">\&quot;</span>security<span class="hljs-subst">\&quot;</span> charset=<span class="hljs-subst">\&quot;</span>UTF-8<span class="hljs-subst">\&quot;</span>&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-number">401</span><br>&#125;<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl &#x27;http:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27; -u kibana:123456</span><br>yellow <span class="hljs-keyword">open</span> .monitoring<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">-</span><span class="hljs-number">2018.01</span>.<span class="hljs-number">10</span>   nND6<span class="hljs-operator">-</span>i_rR5iLEYVccBGj8w <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>yellow <span class="hljs-keyword">open</span> .triggered_watches            <span class="hljs-type">BtygGZisSDqiL3Y2TaQGqQ</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>green  <span class="hljs-keyword">open</span> .security<span class="hljs-operator">-</span><span class="hljs-number">6</span>                   <span class="hljs-type">QVRL1mcFSAilryHGEhen7Q</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>    <br>yellow <span class="hljs-keyword">open</span> .watcher<span class="hljs-operator">-</span>history<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">-</span><span class="hljs-number">2018.01</span>.<span class="hljs-number">10</span> <span class="hljs-type">SBGiHDAnTPiXFoHU65VY_g</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>yellow <span class="hljs-keyword">open</span> .watches                      kMzN4j5cQySZQQSDVPww8w <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>yellow <span class="hljs-keyword">open</span> .monitoring<span class="hljs-operator">-</span>alerts<span class="hljs-operator">-</span><span class="hljs-number">6</span>          <span class="hljs-type">VygY6VN9R3S0PR_jrGy50Q</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ <br></code></pre></td></tr></table></figure><h2 id="配置ldap帐号认证"><a href="#配置ldap帐号认证" class="headerlink" title="配置ldap帐号认证"></a>配置ldap帐号认证</h2><p>ldap服务安装可参考：<a href="https://segmentfault.com/a/11">https://segmentfault.com/a/11</a>…</p><p>添加下述ldap相关述配置 bind_dn为ldap的管理DN</p><ul><li>bind_password为管理dn的密码</li><li>user_search.base_dn为linux系统账户信息导入ldap的信息</li><li>user_search.attribute为账户在ldap中的标识信息</li><li>group_search.base_dn为linux系统组信息导入ldap的信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">elasticsearch@elasticsearch</span> <span class="hljs-string">elasticsearch-6.0.0</span>]<span class="hljs-string">$</span> <span class="hljs-string">vim</span> <span class="hljs-string">config/elasticsearch.yml</span> <br><br><span class="hljs-string">......</span><br><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">10.59</span><span class="hljs-number">.30</span><span class="hljs-number">.96</span><br><span class="hljs-attr">bootstrap.system_call_filter:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">xpack.ssl.key:</span> <span class="hljs-string">elasticsearch/elasticsearch.key</span><br><span class="hljs-attr">xpack.ssl.certificate:</span> <span class="hljs-string">elasticsearch/elasticsearch.crt</span><br><span class="hljs-attr">xpack.ssl.certificate_authorities:</span> <span class="hljs-string">ca/ca.crt</span><br><span class="hljs-attr">xpack.security.transport.ssl.enabled:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">xpack:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">authc:</span><br>      <span class="hljs-attr">realms:</span><br>        <span class="hljs-attr">ldap1:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">ldap</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">0</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;ldap://10.59.30.95&quot;</span><br>          <span class="hljs-attr">bind_dn:</span> <span class="hljs-string">&quot;cn=Manager, dc=martin, dc=com&quot;</span><br>          <span class="hljs-attr">bind_password:</span> <span class="hljs-number">123456</span><br>          <span class="hljs-attr">user_search:</span><br>            <span class="hljs-attr">base_dn:</span> <span class="hljs-string">&quot;ou=People,dc=martin,dc=com&quot;</span><br>            <span class="hljs-attr">attribute:</span> <span class="hljs-string">uid</span><br>          <span class="hljs-attr">group_search:</span><br>            <span class="hljs-attr">base_dn:</span> <span class="hljs-string">&quot;ou=Group,dc=martin,dc=com&quot;</span><br>          <span class="hljs-attr">unmapped_groups_as_roles:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="配置AD域帐号认证"><a href="#配置AD域帐号认证" class="headerlink" title="配置AD域帐号认证"></a>配置AD域帐号认证</h2><p>添加下ldap相关述配置至elasticsearch.yml，此处为接着上述LDAP配置添加，如果只需配置AD认证请将ldap相关配置删除即可；</p><ul><li>domain_name为AD域的域名</li><li>url为AD域的地址</li><li>bind_dnw为随意的域账户名称（格式为user@domain）</li><li>bind_password为上述账户的密码</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs less">xpack:<br>  security:<br>    authc:<br>      realms:<br>        ldap1:<br>          type: ldap<br>          <span class="hljs-attribute">order</span>: <span class="hljs-number">0</span><br>          <span class="hljs-attribute">url</span>: <span class="hljs-string">&quot;ldap://10.59.30.94&quot;</span><br>          <span class="hljs-attribute">bind_dn</span>: <span class="hljs-string">&quot;cn=Manager, dc=martin, dc=com&quot;</span><br>          <span class="hljs-attribute">bind_password</span>: <span class="hljs-number">123456</span><br>          <span class="hljs-attribute">user_search</span>:<br>            <span class="hljs-attribute">base_dn</span>: <span class="hljs-string">&quot;ou=People,dc=martin,dc=com&quot;</span><br>            <span class="hljs-attribute">attribute</span>: uid<br>          <span class="hljs-attribute">group_search</span>:<br>            <span class="hljs-attribute">base_dn</span>: <span class="hljs-string">&quot;ou=Group,dc=martin,dc=com&quot;</span><br>          <span class="hljs-attribute">unmapped_groups_as_roles</span>: false<br>        <span class="hljs-attribute">active_directory</span>:<br>          <span class="hljs-attribute">type</span>: active_directory<br>          <span class="hljs-attribute">order</span>: <span class="hljs-number">1</span><br>          <span class="hljs-attribute">domain_name</span>: martin.com<br>          <span class="hljs-attribute">url</span>: <span class="hljs-attribute">ldap</span>:<span class="hljs-comment">//ad.martin.com</span><br>          <span class="hljs-attribute">bind_dn</span>: martin<span class="hljs-variable">@martin</span>.com<br>          <span class="hljs-attribute">bind_password</span>: AD.<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>重启elasticsearch服务并使用ldap域账户user01登录</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ killall java<br>[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ .<span class="hljs-regexp">/bin/</span>elasticsearch -d<br>[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl -XGET -u user01:user01 <span class="hljs-string">&#x27;http://10.59.30.96:9200/_cat?pretty&#x27;</span><br>=^.^=<br><span class="hljs-regexp">/_cat/</span>allocation<br><span class="hljs-regexp">/_cat/</span>shards<br><span class="hljs-regexp">/_cat/</span>shards/&#123;index&#125;<br><span class="hljs-regexp">/_cat/m</span>aster<br><span class="hljs-regexp">/_cat/</span>nodes<br><span class="hljs-regexp">/_cat/</span>tasks<br><span class="hljs-regexp">/_cat/i</span>ndices<br><span class="hljs-regexp">/_cat/i</span>ndices/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>segments<br><span class="hljs-regexp">/_cat/</span>segments/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">count</span><br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">count</span>/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>recovery<br><span class="hljs-regexp">/_cat/</span>recovery/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>health<br><span class="hljs-regexp">/_cat/</span>pending_tasks<br><span class="hljs-regexp">/_cat/</span>aliases<br><span class="hljs-regexp">/_cat/</span>aliases/&#123;alias&#125;<br><span class="hljs-regexp">/_cat/</span>thread_pool<br><span class="hljs-regexp">/_cat/</span>thread_pool/&#123;thread_pools&#125;<br><span class="hljs-regexp">/_cat/</span>plugins<br><span class="hljs-regexp">/_cat/</span>fielddata<br><span class="hljs-regexp">/_cat/</span>fielddata/&#123;fields&#125;<br><span class="hljs-regexp">/_cat/</span>nodeattrs<br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">repositories</span><br><span class="hljs-regexp">/_cat/</span>snapshots/&#123;repository&#125;<br><span class="hljs-regexp">/_cat/</span>templates<br>[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$<br><br></code></pre></td></tr></table></figure><p>使用AD域账户martin登录</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl http:<span class="hljs-comment">//10.59.30.96:9200/_cat?pretty -u martin:AD.123456</span><br>=^.^=<br><span class="hljs-regexp">/_cat/</span>allocation<br><span class="hljs-regexp">/_cat/</span>shards<br><span class="hljs-regexp">/_cat/</span>shards/&#123;index&#125;<br><span class="hljs-regexp">/_cat/m</span>aster<br><span class="hljs-regexp">/_cat/</span>nodes<br><span class="hljs-regexp">/_cat/</span>tasks<br><span class="hljs-regexp">/_cat/i</span>ndices<br><span class="hljs-regexp">/_cat/i</span>ndices/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>segments<br><span class="hljs-regexp">/_cat/</span>segments/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">count</span><br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">count</span>/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>recovery<br><span class="hljs-regexp">/_cat/</span>recovery/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>health<br><span class="hljs-regexp">/_cat/</span>pending_tasks<br><span class="hljs-regexp">/_cat/</span>aliases<br><span class="hljs-regexp">/_cat/</span>aliases/&#123;alias&#125;<br><span class="hljs-regexp">/_cat/</span>thread_pool<br><span class="hljs-regexp">/_cat/</span>thread_pool/&#123;thread_pools&#125;<br><span class="hljs-regexp">/_cat/</span>plugins<br><span class="hljs-regexp">/_cat/</span>fielddata<br><span class="hljs-regexp">/_cat/</span>fielddata/&#123;fields&#125;<br><span class="hljs-regexp">/_cat/</span>nodeattrs<br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">repositories</span><br><span class="hljs-regexp">/_cat/</span>snapshots/&#123;repository&#125;<br><span class="hljs-regexp">/_cat/</span>templates<br>[elasticsearch@elasticsearch elasticsearch-<span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$<br></code></pre></td></tr></table></figure><h2 id="为域账户信息映射角色"><a href="#为域账户信息映射角色" class="headerlink" title="为域账户信息映射角色"></a>为域账户信息映射角色</h2><p>接口为：POST /_xpack/security/role_mapping/<name></p><p>下述为映射user1*账户为管理员角色的操作步骤</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scala">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ curl -<span class="hljs-type">XPOST</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//10.59.30.96:9200/_xpack/security/role_mapping/ldap_user_admin?pretty&#x27; -d &#x27;&#123;</span><br>&gt;   <span class="hljs-string">&quot;roles&quot;</span>: [ <span class="hljs-string">&quot;admin&quot;</span> ],<br>&gt;   <span class="hljs-string">&quot;enabled&quot;</span>: <span class="hljs-literal">true</span>,<br>&gt;   <span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>&gt;     <span class="hljs-string">&quot;any&quot;</span>: [<br>&gt;       &#123;<br>&gt;         <span class="hljs-string">&quot;field&quot;</span>: &#123;<br>&gt;           <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;/user1*/&quot;</span><br>&gt;         &#125;<br>&gt;       &#125;<br>&gt;     ]<br>&gt;   &#125;<br>&gt; &#125;&#x27;<br>&#123;<br>  <span class="hljs-string">&quot;role_mapping&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;created&quot;</span> : <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ curl -<span class="hljs-type">XGET</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>: application/json&#x27; -u elastic:elastic <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//10.59.30.96:9200/_xpack/security/role_mapping/ldap_user_admin?pretty&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;ldap_user_admin&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;enabled&quot;</span> : <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;roles&quot;</span> : [<br>      <span class="hljs-string">&quot;admin&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;rules&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;any&quot;</span> : [<br>        &#123;<br>          <span class="hljs-string">&quot;field&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;/user1*/&quot;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;,<br>    <span class="hljs-string">&quot;metadata&quot;</span> : &#123; &#125;<br>  &#125;<br>&#125;<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-number">-6.0</span><span class="hljs-number">.0</span>]$ <br></code></pre></td></tr></table></figure><p>验证域账户权限，使用user01无权访问indices接口，使用user11可以访问；</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift">[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl <span class="hljs-operator">-</span><span class="hljs-type">XGET</span> <span class="hljs-operator">-</span>u user01:user01 &#x27;http:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;error&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;root_cause&quot;</span> : [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;security_exception&quot;</span>,<br>        <span class="hljs-string">&quot;reason&quot;</span> : <span class="hljs-string">&quot;action [cluster:monitor/state] is unauthorized for user [user01]&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;security_exception&quot;</span>,<br>    <span class="hljs-string">&quot;reason&quot;</span> : <span class="hljs-string">&quot;action [cluster:monitor/state] is unauthorized for user [user01]&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-number">403</span><br>&#125;<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ curl <span class="hljs-operator">-</span><span class="hljs-type">XGET</span> <span class="hljs-operator">-</span>u user11:user11 &#x27;http:<span class="hljs-comment">//10.59.30.96:9200/_cat/indices?pretty&#x27;</span><br>yellow <span class="hljs-keyword">open</span> .monitoring<span class="hljs-operator">-</span>es<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">-</span><span class="hljs-number">2018.01</span>.<span class="hljs-number">10</span>   nND6<span class="hljs-operator">-</span>i_rR5iLEYVccBGj8w <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">6178</span> <span class="hljs-number">44</span>  <span class="hljs-number">5</span>.9mb  <span class="hljs-number">5</span>.9mb<br>yellow <span class="hljs-keyword">open</span> .triggered_watches            <span class="hljs-type">BtygGZisSDqiL3Y2TaQGqQ</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">11</span>.7kb <span class="hljs-number">11</span>.7kb<br>green  <span class="hljs-keyword">open</span> .security<span class="hljs-operator">-</span><span class="hljs-number">6</span>                   <span class="hljs-type">QVRL1mcFSAilryHGEhen7Q</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>                      <br>yellow <span class="hljs-keyword">open</span> .watcher<span class="hljs-operator">-</span>history<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">-</span><span class="hljs-number">2018.01</span>.<span class="hljs-number">10</span> <span class="hljs-type">SBGiHDAnTPiXFoHU65VY_g</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">777</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>.1mb  <span class="hljs-number">1</span>.1mb<br>yellow <span class="hljs-keyword">open</span> .watches                      kMzN4j5cQySZQQSDVPww8w <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <span class="hljs-number">5</span>  <span class="hljs-number">0</span> <span class="hljs-number">40</span>.2kb <span class="hljs-number">40</span>.2kb<br>yellow <span class="hljs-keyword">open</span> .monitoring<span class="hljs-operator">-</span>alerts<span class="hljs-operator">-</span><span class="hljs-number">6</span>          <span class="hljs-type">VygY6VN9R3S0PR_jrGy50Q</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>    <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">12</span>.8kb <span class="hljs-number">12</span>.8kb<br>[elasticsearch<span class="hljs-meta">@elasticsearch</span> elasticsearch<span class="hljs-operator">-</span><span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>]$ <br></code></pre></td></tr></table></figure><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><p>No subject alternative names matching IP address</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[2018-01-10T19:19:35,483]</span><span class="hljs-selector-attr">[WARN ]</span><span class="hljs-selector-attr">[o.e.x.s.t.n.SecurityNetty4Transport]</span> <span class="hljs-selector-attr">[fzP4t-4]</span> exception caught on transport layer <span class="hljs-selector-attr">[[id: 0x5d97fe48, L:/0:0:0:0:0:0:0:1:49121 ! R:/0:0:0:0:0:0:0:1:9300]</span>], closing connection<br>    io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span><span class="hljs-selector-class">.codec</span><span class="hljs-selector-class">.DecoderException</span>: javax<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.SSLHandshakeException</span>: General SSLEngine problem<br>......<br>Caused by: java<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.cert</span><span class="hljs-selector-class">.CertificateException</span>: No subject alternative names matching IP <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span> found<br></code></pre></td></tr></table></figure><p>解决方案为一种是关闭IPv6地址，另一种是修改ES_HOME/config/elasticsearch.yml中的network.host值为本机eth0的IP</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>官方安装步骤：<a href="https://www.elastic.co/guide/">https://www.elastic.co/guide/</a>…</li><li>配置内置账户密码：<br><a href="https://www.elastic.co/guide/">https://www.elastic.co/guide/</a>…</li><li>修改账户密码：<br><a href="https://www.elastic.co/guide/">https://www.elastic.co/guide/</a>…</li><li>用户相关操作：<br><a href="https://www.elastic.co/guide/">https://www.elastic.co/guide/</a>…</li><li>使用LDAP认证： <a href="https://www.elastic.co/guide/">https://www.elastic.co/guide/</a>…</li><li>用户角色映射： <a href="https://www.elastic.co/guide/">https://www.elastic.co/guide/</a>…</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;自定义内置账号&quot;&gt;&lt;a href=&quot;#自定义内置账号&quot; class=&quot;headerlink&quot; title=&quot;自定义内置账号&quot;&gt;&lt;/a&gt;自定义内置账号&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;账户elastic为elasticsearch超级管理员，拥有所有权限&lt;/li&gt;
&lt;li&gt;账户kibana用于kibana组件获取相关信息用于web展示&lt;/li&gt;
&lt;li&gt;账户logstash_system用于logstash服务获取elasticsearch的监控数据&lt;/li&gt;
&lt;li&gt;注意：此步骤需先启动elasticsearch服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cos.leiyawu.com/img/elk/es_user.png&quot; alt=&quot;es_user&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pgsql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs pgsql&quot;&gt;[elasticsearch@elasticsearch elasticsearch&lt;span class=&quot;hljs-number&quot;&gt;-6.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;]$ ./bin/x-pack/setup-passwords interactive&lt;br&gt;Initiating the setup &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; reserved &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; elastic,kibana,logstash_system passwords.&lt;br&gt;You will be prompted &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; enter passwords &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; the process progresses.&lt;br&gt;Please confirm that you would &lt;span class=&quot;hljs-keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt; [y/N]y&lt;br&gt;&lt;br&gt;&lt;br&gt;Enter &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [elastic]: &lt;br&gt;Reenter &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [elastic]: &lt;br&gt;Enter &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [kibana]: &lt;br&gt;Reenter &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [kibana]: &lt;br&gt;Enter &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [logstash_system]: &lt;br&gt;Reenter &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; [logstash_system]: &lt;br&gt;Changed &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; [kibana]&lt;br&gt;Changed &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; [logstash_system]&lt;br&gt;Changed &lt;span class=&quot;hljs-keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; [elastic]&lt;br&gt;[elasticsearch@elasticsearch elasticsearch&lt;span class=&quot;hljs-number&quot;&gt;-6.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;]$ &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;验证内置账户访问&quot;&gt;&lt;a href=&quot;#验证内置账户访问&quot; class=&quot;headerlink&quot; title=&quot;验证内置账户访问&quot;&gt;&lt;/a&gt;验证内置账户访问&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;若不提供用户名密码则返回401&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs swift&quot;&gt;[elasticsearch&lt;span class=&quot;hljs-meta&quot;&gt;@elasticsearch&lt;/span&gt; elasticsearch&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]$ curl &amp;#x27;http:&lt;span class=&quot;hljs-comment&quot;&gt;//10.59.30.96:9200/_cat/indices?pretty&amp;#x27;&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt; : &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;root_cause&amp;quot;&lt;/span&gt; : [&lt;br&gt;      &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;security_exception&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;reason&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;missing authentication token for REST request [/_cat/indices?pretty]&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;header&amp;quot;&lt;/span&gt; : &amp;#123;&lt;br&gt;          &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;WWW-Authenticate&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Basic realm=&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt;security&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt; charset=&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt;UTF-8&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;      &amp;#125;&lt;br&gt;    ],&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;security_exception&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;reason&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;missing authentication token for REST request [/_cat/indices?pretty]&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;header&amp;quot;&lt;/span&gt; : &amp;#123;&lt;br&gt;      &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;WWW-Authenticate&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Basic realm=&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt;security&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt; charset=&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt;UTF-8&lt;span class=&quot;hljs-subst&quot;&gt;\&amp;quot;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;,&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;status&amp;quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;401&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;提供相应用户信息后可访问，若用户权限不足则返回403&lt;/p&gt;
&lt;p&gt;使用logstash_system用户访问&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs ada&quot;&gt;[elasticsearch@elasticsearch elasticsearch-&lt;span class=&quot;hljs-number&quot;&gt;6.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]$ curl &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;#x27;http&lt;/span&gt;://&lt;span class=&quot;hljs-number&quot;&gt;10.59&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;30.96&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;9200&lt;/span&gt;/_cat/indices?pretty&amp;#x27; -u logstash_system:logstash_system&lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt; : &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;root_cause&amp;quot;&lt;/span&gt; : [&lt;br&gt;      &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; : &amp;quot;&lt;span class=&quot;hljs-type&quot;&gt;security_exception&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;        &amp;quot;&lt;/span&gt;reason&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;action [indices:monitor/stats] &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; unauthorized &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user [logstash_system]&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;    &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;security_exception&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;    &amp;quot;&lt;/span&gt;reason&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;action [indices:monitor/stats] &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; unauthorized &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user [logstash_system]&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;  &amp;quot;&lt;/span&gt;status&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : 403&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;[elasticsearch@elasticsearch elasticsearch-6.0.0]$&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;使用kibana用户访问&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs swift&quot;&gt;[elasticsearch&lt;span class=&quot;hljs-meta&quot;&gt;@elasticsearch&lt;/span&gt; elasticsearch&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]$ curl &amp;#x27;http:&lt;span class=&quot;hljs-comment&quot;&gt;//10.59.30.96:9200/_cat/indices?pretty&amp;#x27; -u kibana:kibana&lt;/span&gt;&lt;br&gt;yellow &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; .monitoring&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;es&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2018.01&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;   nND6&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;i_rR5iLEYVccBGj8w &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;br&gt;yellow &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; .triggered_watches            &lt;span class=&quot;hljs-type&quot;&gt;BtygGZisSDqiL3Y2TaQGqQ&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;br&gt;green  &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; .security&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;                   &lt;span class=&quot;hljs-type&quot;&gt;QVRL1mcFSAilryHGEhen7Q&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;br&gt;yellow &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; .watcher&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;history&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2018.01&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SBGiHDAnTPiXFoHU65VY_g&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;br&gt;yellow &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; .watches                      kMzN4j5cQySZQQSDVPww8w &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;br&gt;yellow &lt;span class=&quot;hljs-keyword&quot;&gt;open&lt;/span&gt; .monitoring&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;alerts&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;          &lt;span class=&quot;hljs-type&quot;&gt;VygY6VN9R3S0PR_jrGy50Q&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;br&gt;[elasticsearch&lt;span class=&quot;hljs-meta&quot;&gt;@elasticsearch&lt;/span&gt; elasticsearch&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]$ &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/categories/ELK/"/>
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch分片及集群说明</title>
    <link href="http://www.leiyawu.com/2018/05/07/Elasticsearch%E5%88%86%E7%89%87%E5%8F%8A%E9%9B%86%E7%BE%A4%E8%AF%B4%E6%98%8E/"/>
    <id>http://www.leiyawu.com/2018/05/07/Elasticsearch%E5%88%86%E7%89%87%E5%8F%8A%E9%9B%86%E7%BE%A4%E8%AF%B4%E6%98%8E/</id>
    <published>2018-05-07T06:48:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="replica的作用主要包括："><a href="#replica的作用主要包括：" class="headerlink" title="replica的作用主要包括："></a>replica的作用主要包括：</h2><ul><li><p>a.容灾:primary分片丢失，replica分片就会被顶上去成为新的主分片，同时根据这个新的主分片创建新的replica,集群数据安然无恙；</p></li><li><p>b.提高查询性能：replica和primary分片的数据是相同的，所以对于一个query既可以查主分片也可以查备分片，在合适的范围内多个replica性能会更优(但要考虑资源占用也会提升[cpu/disk/heap])，另外index request只能发生在主分片上，replica不能执行index request;</p></li></ul><h2 id="分片数目调整："><a href="#分片数目调整：" class="headerlink" title="分片数目调整："></a>分片数目调整：</h2><p>对于一个索引，除非重建索引否则不能调整分片的数目(主分片数，number_of_shards),但可以随时调整replica数(number_of_replicas)</p><h2 id="ES集群状态有三种："><a href="#ES集群状态有三种：" class="headerlink" title="ES集群状态有三种："></a>ES集群状态有三种：</h2><ul><li><p>Green: 所有主分片和备份分片都准备就绪(分配成功)，即使有一台机器挂了(假设一台机器一个实例)，数据都不会丢失，但会变成YELLOW状态；</p></li><li><p>Yellow: 所有主分片准备就绪，但存在至少一个主分片(假设是A)对应的备份分片没有就绪，此时集群属于告警状态，意味着集群高可用和容灾能力下降，如果刚好A所在的机器挂了，并且你只设置了一个备份(已处于未就绪状态),那么A的数据就会丢失(查询结果不完整)，此时集群进入Red状态；</p></li><li><p>Red: 至少有一个主分片没有就绪(直接原因是找不到对应的备份分片成为新的主分片),此时查询的结果会出现数据丢失(不完整)</p></li></ul><h2 id="Elasticsearch与关系数据的类比对应关系如下："><a href="#Elasticsearch与关系数据的类比对应关系如下：" class="headerlink" title="Elasticsearch与关系数据的类比对应关系如下："></a>Elasticsearch与关系数据的类比对应关系如下：</h2><p>Relational DB  ⇒ Databases ⇒ Tables ⇒ Rows  ⇒ Columns<br>Elasticsearch  ⇒ Indices  ⇒ Types ⇒ Documents ⇒ Fields</p><p>这里的document的可以理解为一个JSON序列对象。每个document可包含多个field。再来说说Shard，每个Index（对应Database）包含多个Shard，默认是5个，分散在不同的Node上，但不会存在两个相同的Shard存在一个Node上，这样就没有备份的意义了。Shard是一个最小的Lucene索引单元。当来一个document的时候，Elasticsearch通过对docid进行hash来确定其放在哪个shard上面，然后在shard上面进行索引存储。replicas就是备份，Elasticsearch采用的是Push Replication模式，当你往 master主分片上面索引一个文档，该分片会复制该文档(document)到剩下的所有 replica副本分片中，这些分片也会索引这个文档。</p><p>当进行查询时，如果提供了查询的DocID，Elasticsearch通过hash就知道Doc存在哪个shard上面，再通过routing table查询就知道再哪个node上面，让后去node上面去取就好了。如果不提供DocID,那么Elasticsearch会在该Index（indics）shards所在的所有node上执行搜索预警，然后返回搜索结果，由coordinating node gather之后返回给用户。</p><p>集群信息说明图如下：</p><p><img src="https://cos.leiyawu.com/img/elk/es_cluster_map.jpg" alt="map"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;replica的作用主要包括：&quot;&gt;&lt;a href=&quot;#replica的作用主要包括：&quot; class=&quot;headerlink&quot; title=&quot;replica的作用主要包括：&quot;&gt;&lt;/a&gt;replica的作用主要包括：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a.容灾:prim</summary>
      
    
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/categories/ELK/"/>
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>hexo修改默认端口</title>
    <link href="http://www.leiyawu.com/2018/04/20/hexo%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3/"/>
    <id>http://www.leiyawu.com/2018/04/20/hexo%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3/</id>
    <published>2018-04-20T08:22:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>默认使用4000端口，用hexo s -p 80 ，可以暂时修改启动端口。</p><p>但是每次启动都要写”-p 80”才行，过于繁琐。</p><p>修改方法：<br>找到node_modules\hexo-server\index.js文件，可以修改默认的port值！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;默认使用4000端口，用hexo s -p 80 ，可以暂时修改启动端口。&lt;/p&gt;
&lt;p&gt;但是每次启动都要写”-p 80”才行，过于繁琐。&lt;/p&gt;
&lt;p&gt;修改方法：&lt;br&gt;找到node_modules\hexo-server\index.js文件，可以修改默认的port值！</summary>
      
    
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker cicd持续集成部署</title>
    <link href="http://www.leiyawu.com/2018/04/20/docker-cicd%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.leiyawu.com/2018/04/20/docker-cicd%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/</id>
    <published>2018-04-20T06:29:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="持续集成的概念"><a href="#持续集成的概念" class="headerlink" title="持续集成的概念"></a>持续集成的概念</h2><p>持续集成，Continuous integration ，简称CI。</p><p>首先，解释下集成：所有的项目代码都是托管在SVN或者GIT服务器上（以下简称代码服务器）。每个项目都有若干个单元测试和集成测试。集成测试是单元测试的逻辑扩展：在单元测试的基础上，将所有模块按照设计要求组装成为子系统或系统进行集成测试。实践表明，一些模块虽然能够单独地工作，但并不能保证连接起来也能正常的工作。一些局部反映不出来的问题，在全局上很可能暴露出来（关于单元测试及集成测试的详述，读者可以查阅相关文档）。</p><p>简单来说，集成测试就是把所有的单元测试跑一遍，以及其它一些能自动完成的测试。只有通过了集成测试的代码才能上传到代码服务器上，确保上传的代码没有问题。集成一般指集成测试。</p><p>持续，显而易见就是长期对代码进行的集成测试。既然是长期进行，那么最好是自动执行，否则人工执行既没保证，而且耗人力。</p><p>基于此种目的，我们需要有一台服务器，它将定期从代码服务器中拉取代码，并进行编译，然后自动运行集成测试；并且每次集成测试的结果都会记录在案。</p><h2 id="持续集成的特点"><a href="#持续集成的特点" class="headerlink" title="持续集成的特点"></a>持续集成的特点</h2><ul><li>它是一个自动化的周期性的集成测试过程，从拉取代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</li><li>需要有专门的集成服务器来执行集成构建；</li><li>需要有代码托管工具支持；</li></ul><h2 id="持续集成的作用"><a href="#持续集成的作用" class="headerlink" title="持续集成的作用"></a>持续集成的作用</h2><ul><li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</li><li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li></ul><p>首先，Docker可以让你非常容易和方便地以“容器化”的方式去部署应用。 它就像集装箱一样，打包了所有依赖，再在其他服务器上部署很容易，不至于换服务器后发现各种配置文件散落一地，这样就解决了编译时依赖和运行时依赖的问题；</p><p>其次，Docker的隔离性使得应用在运行是就像处于沙箱中一样，每个应用都认为自己是在系统中唯一运行的程序，就像刚才例子中，A依赖于Python 2.7，同时A还依赖于B，但B却依赖于Python3， 这样我们可以在系统中部署一个基于python2.7的容器和一个基于python3的容器，这样就可以很方便的在系统中部署多种不同的环境来解决依赖复杂度的问题。这里有些朋友可能会说，虚拟机也可以解决这样的问题！诚然，虚拟化确实可以做到这一点，但是这样需要硬件支持虚拟化及开启BIOS中虚拟化相关的功能，同时还需要在系统中安装2套操作系统，虚拟机的出现是解决了操作系统和物理机的强耦合问题。但是Docker就轻量化很多，只需内核支持，无需硬件和BIOS的强制要求，可以很轻松迅速的在系统上部署多套不同的容器环境，容器的出现解决了应用和操作系统的强耦合问题。</p><p>正以为Docker是以应用为中心，镜像中打包了应用及应用所需的环境，一次构建，处处运行。这种特性完美的解决了传统模式下应用迁移后面临的环境不一致问题。</p><p>同时，Docker 压根不管内部应用怎么启动，你自己爱咋来咋来，我们用 docker start 或 run 作为统一标准。这样我们应用启动就标准化了， 不需要再根据不同应用而记忆一大串不同的启动命令。</p><h2 id="基于Docker的特征，现在常见的利用-Docker-进行持续集成的流程如下："><a href="#基于Docker的特征，现在常见的利用-Docker-进行持续集成的流程如下：" class="headerlink" title="基于Docker的特征，现在常见的利用 Docker 进行持续集成的流程如下："></a>基于Docker的特征，现在常见的利用 Docker 进行持续集成的流程如下：</h2><ol><li>开发者提交代码</li><li>触发镜像构建</li><li>构建镜像上传至私有仓库</li><li>镜像下载至执行机器</li><li>镜像运行</li></ol><p>其基本拓扑结构如下所示：<br><img src="https://cos.leiyawu.com/docker/img/docker1.png" alt="图1"></p><p>熟悉Docker的都知道，Docker以的启动是非常快的，可以说是秒启。在上述的五步中，1 和 5 的耗时是比较短的，整个持续集成主要耗时集中在中间的3个步骤，也就是 Docker build，Docker push ，Docekr pull 的时间消耗.</p><p>Docker Registry升级到 v2 后加入了很多安全相关检查，在v2中的镜像的存储格式变成了gzip ，镜像在压缩过程中占用的时间也是比较多的。</p><p>Docker pull 镜像的速度对服务的启动速度至关重要，好在 Registry v2 后可以并行 pull 了，速度有了很大的改善。但是依然有一些小的问题影响了启动的速度：</p><ul><li>下载镜像和解压镜像是串行的；</li><li>串行解压，由于 v2 都是 gzip,要解压，尽管并行下载了还是串行解压，内网的话解压时间比网络传输都要长；</li><li>和 Registry 通信， Registry 在 pull的过程中并不提供下载内容只是提供下载URL和鉴权，这一部分加长网络传输而且一些 Metadata还是要去后端存储获取，延时还是有一些的。</li></ul><p>整个持续集成平台架构演进到如下图所示：<br><img src="https://cos.leiyawu.com/docker/img/docker2.png" alt="图2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;持续集成的概念&quot;&gt;&lt;a href=&quot;#持续集成的概念&quot; class=&quot;headerlink&quot; title=&quot;持续集成的概念&quot;&gt;&lt;/a&gt;持续集成的概念&lt;/h2&gt;&lt;p&gt;持续集成，Continuous integration ，简称CI。&lt;/p&gt;
&lt;p&gt;首先，解释下集成</summary>
      
    
    
    
    <category term="docker" scheme="http://www.leiyawu.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://www.leiyawu.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>logstash吞吐率优化</title>
    <link href="http://www.leiyawu.com/2018/04/13/logstash%E4%BC%98%E5%8C%96/"/>
    <id>http://www.leiyawu.com/2018/04/13/logstash%E4%BC%98%E5%8C%96/</id>
    <published>2018-04-13T08:55:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一##"></a>问题一##</h2><p>最近发现kibana的日志传的很慢，常常查不到日志，由于所有的日志收集都只传输到了一个logstash进行收集和过滤，于是怀疑是否是由于logstash的吞吐量存在瓶颈。一看，还真是到了瓶颈。</p><h3 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h3><p>经过查询logstash完整配置文件，有几个参数需要调整</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># pipeline线程数，官方建议是等于CPU内核数</span><br><span class="hljs-attr">pipeline.workers:</span> <span class="hljs-number">24</span><br><span class="hljs-comment"># 实际output时的线程数</span><br><span class="hljs-attr">pipeline.output.workers:</span> <span class="hljs-number">24</span><br><span class="hljs-comment"># 每次发送的事件数</span><br><span class="hljs-attr">pipeline.batch.size:</span> <span class="hljs-number">3000</span><br><span class="hljs-comment"># 发送延时</span><br><span class="hljs-attr">pipeline.batch.delay:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>PS:由于我们的ES集群数据量较大（&gt;28T），所以具体配置数值视自身生产环境</p><h3 id="优化结果"><a href="#优化结果" class="headerlink" title="优化结果"></a>优化结果</h3><p>ES的吞吐由每秒9817/s提升到41183/s,具体可以通过x-pack的monitor查看。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二##"></a>问题二##</h2><p>在查看logstash日志过程中，我们看到了大量的以下报错</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[2017-03-18T09:46:21,043]</span><span class="hljs-selector-attr">[INFO ]</span><span class="hljs-selector-attr">[logstash.outputs.elasticsearch]</span> retrying failed action with response <span class="hljs-selector-tag">code</span>: <span class="hljs-number">429</span> (&#123;<span class="hljs-string">&quot;type&quot;</span>=&gt;<span class="hljs-string">&quot;es_rejected_execution_exception&quot;</span>, <span class="hljs-string">&quot;reason&quot;</span>=&gt;<span class="hljs-string">&quot;rejected execution of org.elasticsearch.transport.TransportService$6@6918cf2e on EsThreadPoolExecutor[bulk, queue capacity = 50, org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor@55337655[Running, pool size = 24, active threads = 24, queued tasks = 50, completed tasks = 1767887463]]&quot;</span>&#125;)<br><span class="hljs-selector-attr">[2017-03-18T09:46:21,043]</span><span class="hljs-selector-attr">[ERROR]</span><span class="hljs-selector-attr">[logstash.outputs.elasticsearch]</span> Retrying individual actions<br></code></pre></td></tr></table></figure><p>查询官网，确认为时ES的写入遇到了瓶颈</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Make sure <span class="hljs-built_in">to</span> watch <span class="hljs-keyword">for</span> TOO_MANY_REQUESTS (<span class="hljs-number">429</span>) response codes (EsRejectedExecutionException <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> Java client), which is <span class="hljs-keyword">the</span> way that Elasticsearch tells you that <span class="hljs-keyword">it</span> cannot keep up <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> current indexing rate. When <span class="hljs-keyword">it</span> happens, you should pause indexing <span class="hljs-keyword">a</span> bit <span class="hljs-keyword">before</span> trying again, ideally <span class="hljs-keyword">with</span> randomized exponential backoff.<br></code></pre></td></tr></table></figure><p>我们首先想到的是来调整ES的线程数，但是官网写到”Don’t Touch There Settings!”, 那怎么办？于是乎官方建议我们修改logstash的参数pipeline.batch.size</p><p>在ES5.0以后，es将bulk、flush、get、index、search等线程池完全分离，自身的写入不会影响其他功能的性能。<br>来查询一下ES当前的线程情况：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET _nodes<span class="hljs-regexp">/stats/</span>thread_pool?pretty<br>&#123;<br>  <span class="hljs-string">&quot;_nodes&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;successful&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;dev-elasticstack5.0&quot;</span>,<br>  <span class="hljs-string">&quot;nodes&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;nnfCv8FrSh-p223gsbJVMA&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-number">1489804973926</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-3&quot;</span>,<br>      <span class="hljs-string">&quot;transport_address&quot;</span>: <span class="hljs-string">&quot;192.168.3.***:9301&quot;</span>,<br>      <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;192.168.3.***&quot;</span>,<br>      <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.3.***:9301&quot;</span>,<br>      <span class="hljs-string">&quot;roles&quot;</span>: [<br>        <span class="hljs-string">&quot;master&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>,<br>        <span class="hljs-string">&quot;ingest&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;attributes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;rack&quot;</span>: <span class="hljs-string">&quot;r1&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;thread_pool&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;bulk&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;threads&quot;</span>: <span class="hljs-number">24</span>,<br>          <span class="hljs-string">&quot;queue&quot;</span>: <span class="hljs-number">214</span>,<br>          <span class="hljs-string">&quot;active&quot;</span>: <span class="hljs-number">24</span>,<br>          <span class="hljs-string">&quot;rejected&quot;</span>: <span class="hljs-number">30804543</span>,<br>          <span class="hljs-string">&quot;largest&quot;</span>: <span class="hljs-number">24</span>,<br>          <span class="hljs-string">&quot;completed&quot;</span>: <span class="hljs-number">1047606679</span><br>        &#125;,<br><br>        ......<br><br>        <span class="hljs-string">&quot;watcher&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;threads&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;queue&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;active&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;rejected&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;largest&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;completed&quot;</span>: <span class="hljs-number">0</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：”bulk”模板的线程数24，当前活跃的线程数24，证明所有的线程是busy的状态，queue队列214，rejected为30804543。那么问题就找到了，所有的线程都在忙，队列堵满后再有进程写入就会被拒绝，而当前拒绝数为30804543。</p><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>问题找到了，如何优化呢。官方的建议是提高每次批处理的数量，调节传输间歇时间。当batch.size增大，es处理的事件数就会变少，写入也就越快了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> /etc/logstash/logstash.yml<br><span class="hljs-comment">#</span><br><span class="hljs-attribute">pipeline</span>.workers: <span class="hljs-number">24</span><br><span class="hljs-attribute">pipeline</span>.output.workers: <span class="hljs-number">24</span><br><span class="hljs-attribute">pipeline</span>.batch.size: <span class="hljs-number">10000</span><br><span class="hljs-attribute">pipeline</span>.batch.delay: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>具体的worker/output.workers数量建议等于CPU数，batch.size/batch.delay根据实际的数据量逐渐增大来测试最优值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一##&quot;&gt;&lt;/a&gt;问题一##&lt;/h2&gt;&lt;p&gt;最近发现kibana的日志传的很慢，常常查不到日志，由于所有的日志收集都只传输到了一个logstash进行收集和过滤，于是怀</summary>
      
    
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/categories/ELK/"/>
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>kafka性能调优</title>
    <link href="http://www.leiyawu.com/2018/04/13/kafka%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>http://www.leiyawu.com/2018/04/13/kafka%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</id>
    <published>2018-04-13T08:38:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka的配置详尽、复杂，想要进行全面的性能调优需要掌握大量信息，这里只记录一下我在日常工作使用中走过的坑和经验来对kafka集群进行优化常用的几点。"><a href="#Kafka的配置详尽、复杂，想要进行全面的性能调优需要掌握大量信息，这里只记录一下我在日常工作使用中走过的坑和经验来对kafka集群进行优化常用的几点。" class="headerlink" title="Kafka的配置详尽、复杂，想要进行全面的性能调优需要掌握大量信息，这里只记录一下我在日常工作使用中走过的坑和经验来对kafka集群进行优化常用的几点。##"></a>Kafka的配置详尽、复杂，想要进行全面的性能调优需要掌握大量信息，这里只记录一下我在日常工作使用中走过的坑和经验来对kafka集群进行优化常用的几点。##</h2><h3 id="1-JVM的优化"><a href="#1-JVM的优化" class="headerlink" title="1.JVM的优化"></a>1.JVM的优化</h3><p>java相关系统自然离不开JVM的优化。首先想到的肯定是Heap Size的调整。</p><p>vim bin/kafka-server-start.sh   </p><p>调整KAFKA_HEAP_OPTS=”-Xmx16G -Xms16G”的值<br>推荐配置：一般HEAP SIZE的大小不超过主机内存的50%。</p><h3 id="2-网络和ios操作线程配置优化："><a href="#2-网络和ios操作线程配置优化：" class="headerlink" title="2.网络和ios操作线程配置优化：###"></a>2.网络和ios操作线程配置优化：###</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># broker处理消息的最大线程数</span><br><span class="hljs-attr">num.network.threads</span>=<span class="hljs-number">9</span><br><span class="hljs-comment"># broker处理磁盘IO的线程数</span><br><span class="hljs-attr">num.io.threads</span>=<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>推荐配置：<br>num.network.threads主要处理网络io，读写缓冲区数据，基本没有io等待，配置线程数量为cpu核数加1。</p><p>num.io.threads主要进行磁盘io操作，高峰期可能有些io等待，因此配置需要大些。配置线程数量为cpu核数2倍，最大不超过3倍。</p><h3 id="3-socket-server可接受数据大小-防止OOM异常-："><a href="#3-socket-server可接受数据大小-防止OOM异常-：" class="headerlink" title="3.socket server可接受数据大小(防止OOM异常)：###"></a>3.socket server可接受数据大小(防止OOM异常)：###</h3><p>socket.request.max.bytes=2147483600</p><p>推荐配置：</p><p>根据自己业务数据包的大小适当调大。这里取值是int类型的，而受限于java int类型的取值范围又不能太大：</p><p>java int的取值范围为（-2147483648~2147483647），占用4个字节（-2的31次方到2的31次方-1，不能超出，超出之后报错：org.apache.kafka.common.config.ConfigException: Invalid value 8589934592 for configuration socket.request.max.bytes: Not a number of type INT。</p><h3 id="4-log数据文件刷盘策略"><a href="#4-log数据文件刷盘策略" class="headerlink" title="4.log数据文件刷盘策略"></a>4.log数据文件刷盘策略</h3><p>—每当producer写入10000条消息时，刷数据到磁盘—<br>log.flush.interval.messages=10000</p><p>—每间隔1秒钟时间，刷数据到磁盘—<br>log.flush.interval.ms=1000</p><p>推荐配置：</p><p>为了大幅度提高producer写入吞吐量，需要定期批量写文件。一般无需改动，如果topic的数据量较小可以考虑减少log.flush.interval.ms和log.flush.interval.messages来强制刷写数据，减少可能由于缓存数据未写盘带来的不一致。推荐配置分别message 10000，间隔1s。</p><h3 id="5-日志保留策略配置"><a href="#5-日志保留策略配置" class="headerlink" title="5.日志保留策略配置"></a>5.日志保留策略配置</h3><p>—日志保留时长—<br>log.retention.hours=72</p><p>—段文件配置—<br>log.segment.bytes=1073741824</p><p>推荐配置：</p><p>日志建议保留三天，也可以更短；段文件配置1GB，有利于快速回收磁盘空间，重启kafka加载也会加快（kafka启动时是单线程扫描目录(log.dir)下所有数据文件）。如果文件过小，则文件数量比较多。</p><h3 id="6-replica复制配置"><a href="#6-replica复制配置" class="headerlink" title="6.replica复制配置"></a>6.replica复制配置</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">num.<span class="hljs-keyword">replica</span>.fetchers=<span class="hljs-number">3</span><br><span class="hljs-keyword">replica</span>.<span class="hljs-keyword">fetch</span>.min.bytes=<span class="hljs-number">1</span><br><span class="hljs-keyword">replica</span>.<span class="hljs-keyword">fetch</span>.max.bytes=<span class="hljs-number">5242880</span><br></code></pre></td></tr></table></figure><p>推荐配置：</p><p>每个follow从leader拉取消息进行同步数据，follow同步性能由这几个参数决定，分别为:</p><p>拉取线程数(num.replica.fetchers):fetcher配置多可以提高follower的I/O并发度，单位时间内leader持有更多请求，相应负载会增大，需要根据机器硬件资源做权衡，建议适当调大；</p><p>最小字节数(replica.fetch.min.bytes):一般无需更改，默认值即可；</p><p>最大字节数(replica.fetch.max.bytes)：默认为1MB，这个值太小，推荐5M，根据业务情况调整</p><p>最大等待时间(replica.fetch.wait.max.ms):follow拉取频率，频率过高，leader会积压大量无效请求情况，无法进行数据同步，导致cpu飙升。配置时谨慎使用，建议默认值，无需配置。</p><h3 id="7-分区数量配置"><a href="#7-分区数量配置" class="headerlink" title="7.分区数量配置"></a>7.分区数量配置</h3><p>num.partitions=5</p><p>推荐配置：</p><p>默认partition数量1，如果topic在创建时没有指定partition数量，默认使用此值。Partition的数量选取也会直接影响到Kafka集群的吞吐性能，配置过小会影响消费性能，建议改为5。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kafka的配置详尽、复杂，想要进行全面的性能调优需要掌握大量信息，这里只记录一下我在日常工作使用中走过的坑和经验来对kafka集群进行优化常用的几点。&quot;&gt;&lt;a href=&quot;#Kafka的配置详尽、复杂，想要进行全面的性能调优需要掌握大量信息，这里只记录一下我在日</summary>
      
    
    
    
    <category term="Kafka" scheme="http://www.leiyawu.com/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="http://www.leiyawu.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 索引查询使用指南</title>
    <link href="http://www.leiyawu.com/2018/04/03/ELK%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.leiyawu.com/2018/04/03/ELK%E7%B4%A2%E5%BC%95/</id>
    <published>2018-04-03T04:03:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.我们通常用用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html">_cat API</a>检测集群是否健康。 确保9200端口号可用:<br>curl ‘localhost:9200/_cat/health?v’</p><p>绿色表示一切正常, 黄色表示所有的数据可用但是部分副本还没有分配,红色表示部分数据因为某些原因不可用.</p><p>2.通过如下语句，我们可以获取集群的节点列表：<br>curl ‘localhost:9200/_cat/nodes?v’</p><p>3.通过如下语句，列出所有索引：<br>curl ‘localhost:9200/_cat/indices?v’<br>返回结果：</p><p><img src="http://cos.leiyawu.com/img/elk_index_check_1.png" alt="图1"> 　　</p><p>4.创建索引<br>现在我们创建一个名为“customer”的索引，然后再查看所有的索引：<br> curl -XPUT ‘localhost:9200/customer?pretty’<br> curl ‘localhost:9200/_cat/indices?v’</p><p>结果如下：</p><p><img src="http://cos.leiyawu.com/img/elk_index_check_2.png" alt="图2"></p><p><img src="http://cos.leiyawu.com/img/elk_index_check_3.png" alt="图3"></p><p>上图中红框所表示的是：我们有一个叫customer的索引，它有五个私有的分片以及一个副本，在它里面有0个文档。</p><span id="more"></span><p>5.插入和获取<br>现在我么插入一些数据到集群索引。我们必须给ES指定所以的类型。如下语句：”external” type, ID：1:<br>主体为JSON格式的语句： { “name”: “John Doe” }</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPUT <span class="hljs-string">&#x27;localhost:9200/customer/external/1?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">     　　  &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>John Doe<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>返回结果为：create：true 表示插入成功。<br><img src="http://cos.leiyawu.com/img/elk_index_check_4.png" alt="图4"></p><p>获取GET，语句如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -XGET &#x27;localhost:<span class="hljs-number">9200</span>/customer/external/1?pretty&#x27;<br></code></pre></td></tr></table></figure><p>其中含义为：获取customer索引下类型为external，id为1的数据，pretty参数表示返回结果格式美观。</p><p><img src="http://cos.leiyawu.com/img/elk_index_check_5.png" alt="图5"></p><p>6.删除索引 DELETE</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -XDELETE &#x27;localhost:<span class="hljs-number">9200</span>/customer?pretty&#x27;<br>curl &#x27;localhost:<span class="hljs-number">9200</span>/_cat/indices?v&#x27;<br></code></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_6.png" alt="图6"></p><p>表示索引删除成功。</p><p>7.通过以上命令语句的学习，我们发现索引的增删改查有一个类似的格式，总结如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">curl -X&lt;REST Verb&gt; &lt;Node&gt;<span class="hljs-symbol">:&lt;Port&gt;/&lt;Index&gt;/&lt;Type&gt;/&lt;ID&gt;</span><br>&lt;REST Verb&gt;：REST风格的语法谓词<br>&lt;Node&gt;<span class="hljs-symbol">:</span>节点ip<br>&lt;port&gt;<span class="hljs-symbol">:</span>节点端口号，默认<span class="hljs-number">9200</span><br>&lt;Index&gt;<span class="hljs-symbol">:</span>索引名<br>&lt;Type&gt;<span class="hljs-symbol">:</span>索引类型<br>&lt;ID&gt;<span class="hljs-symbol">:</span>操作对象的ID号<br></code></pre></td></tr></table></figure><p>8 修改数据</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPUT <span class="hljs-string">&#x27;localhost:9200/customer/external/1?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>John Doe<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br>curl -XPUT <span class="hljs-string">&#x27;localhost:9200/customer/external/1?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>Jane Doe<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>上述命令语句是：先新增id为1，name为John Doe的数据，然后将id为1的name修改为Jane Doe。</p><p>9.更新数据<br>9.1 这个例子展示如何将id为1文档的name字段更新为Jane Doe：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/customer/external/1/_update?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>doc<span class="hljs-string">&quot;: &#123; &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>Jane Doe<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>9.2 这个例子展示如何将id为1数据的name字段更新为Jane Doe同时增加字段age为20:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/customer/external/1/_update?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>doc<span class="hljs-string">&quot;: &#123; &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>Jane Doe<span class="hljs-string">&quot;, &quot;</span>age<span class="hljs-string">&quot;: 20 &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>9.3  也可以通过一些简单的scripts来执行更新。一下语句通过使用script将年龄增加5:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/customer/external/1/_update?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>script<span class="hljs-string">&quot; : &quot;</span>ctx._source.age += <span class="hljs-number">5</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>10 删除数据<br>删除数据那是相当的直接. 下面的语句将执行删除Customer中ID为2的数据：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -XDELETE &#x27;localhost:<span class="hljs-number">9200</span>/customer/external/2?pretty&#x27;<br></code></pre></td></tr></table></figure><p>11 批处理<br>举例:<br>下面语句将在一个批量操作中执行创建索引：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/customer/external/_bulk?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;&quot;</span>index<span class="hljs-string">&quot;:&#123;&quot;</span>_id<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;&#125;&#125;</span><br><span class="hljs-string">&#123;&quot;</span>name<span class="hljs-string">&quot;: &quot;</span>John Doe<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123;&quot;</span>index<span class="hljs-string">&quot;:&#123;&quot;</span>_id<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2</span><span class="hljs-string">&quot;&#125;&#125;</span><br><span class="hljs-string">&#123;&quot;</span>name<span class="hljs-string">&quot;: &quot;</span>Jane Doe<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>下面语句批处理执行更新id为1的数据然后执行删除id为2的数据</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/customer/external/_bulk?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;&quot;</span>update<span class="hljs-string">&quot;:&#123;&quot;</span>_id<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;&#125;&#125;</span><br><span class="hljs-string">&#123;&quot;</span>doc<span class="hljs-string">&quot;: &#123; &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>John Doe becomes Jane Doe<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">&#123;&quot;</span>delete<span class="hljs-string">&quot;:&#123;&quot;</span>_id<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2</span><span class="hljs-string">&quot;&#125;&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>12.导入数据集<br>你可以点击这里下载示例数据集:accounts.json<br>其中每个数据都是如下格式:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   　　  <span class="hljs-attr">&quot;index&quot;</span>:&#123;<span class="hljs-attr">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;<br>&#125;<br>&#123;<br>    <span class="hljs-attr">&quot;account_number&quot;</span>: <span class="hljs-number">0</span>,<br>  　 <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-number">16623</span>,<br> 　  <span class="hljs-attr">&quot;firstname&quot;</span>: <span class="hljs-string">&quot;Bradshaw&quot;</span>,<br>  　 <span class="hljs-attr">&quot;lastname&quot;</span>: <span class="hljs-string">&quot;Mckenzie&quot;</span>,<br>  　 <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">29</span>,<br>  　 <span class="hljs-attr">&quot;gender&quot;</span>: <span class="hljs-string">&quot;F&quot;</span>,<br>    <span class="hljs-attr">&quot;address&quot;</span>: <span class="hljs-string">&quot;244 Columbus Place&quot;</span>,<br> 　  <span class="hljs-attr">&quot;employer&quot;</span>: <span class="hljs-string">&quot;Euron&quot;</span>,<br>  　 <span class="hljs-attr">&quot;email&quot;</span>: <span class="hljs-string">&quot;bradshawmckenzie@euron.com&quot;</span>,<br>  　 <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;Hobucken&quot;</span>,<br>  　 <span class="hljs-attr">&quot;state&quot;</span>: <span class="hljs-string">&quot;CO&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>导入示例数据集:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -XPOST &#x27;localhost:<span class="hljs-number">9200</span>/bank/account/_bulk?pretty&#x27; --data-binary <span class="hljs-string">&quot;@accounts.json&quot;</span><br>curl &#x27;localhost:<span class="hljs-number">9200</span>/_cat/indices?v&#x27;<br></code></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_7.png" alt="图7"></p><p>上图红框表示我们已经成功批量导入1000条数据索引到bank索引中。</p><p>13.查询<br>Sample:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ada">curl <span class="hljs-symbol">&#x27;localhost</span>:<span class="hljs-number">9200</span>/bank/_search?q=*&amp;pretty&#x27;<br>&#123;<br>　　  <span class="hljs-string">&quot;took&quot;</span> : 63,<br> 　　 <span class="hljs-string">&quot;timed_out&quot;</span> : <span class="hljs-type">false</span>,<br> 　　 <span class="hljs-string">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;total&quot;</span> : 5,<br>    <span class="hljs-string">&quot;successful&quot;</span> : 5,<br>    <span class="hljs-string">&quot;failed&quot;</span> : 0<br>  &#125;,<br>  <span class="hljs-string">&quot;hits&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;total&quot;</span> : 1000,<br>  <span class="hljs-string">&quot;max_score&quot;</span> : 1.0,<br>  <span class="hljs-string">&quot;hits&quot;</span> : [ &#123;<br>    <span class="hljs-string">&quot;_index&quot;</span> : &quot;<span class="hljs-type">bank</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_type<span class="hljs-string">&quot; : &quot;</span>account<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_id<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_score<span class="hljs-string">&quot; : 1.0, &quot;</span>_source<span class="hljs-string">&quot; : &#123;&quot;</span>account_number<span class="hljs-string">&quot;:1,&quot;</span>balance<span class="hljs-string">&quot;:39225,&quot;</span>firstname<span class="hljs-string">&quot;:&quot;</span>Amber<span class="hljs-string">&quot;,&quot;</span>lastname<span class="hljs-string">&quot;:&quot;</span>Duke<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:32,&quot;</span>gender<span class="hljs-string">&quot;:&quot;</span>M<span class="hljs-string">&quot;,&quot;</span>address<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">880</span> Holmes Lane<span class="hljs-string">&quot;,&quot;</span>employer<span class="hljs-string">&quot;:&quot;</span>Pyrami<span class="hljs-string">&quot;,&quot;</span>email<span class="hljs-string">&quot;:&quot;</span>amberduke@pyrami.com<span class="hljs-string">&quot;,&quot;</span>city<span class="hljs-string">&quot;:&quot;</span>Brogan<span class="hljs-string">&quot;,&quot;</span>state<span class="hljs-string">&quot;:&quot;</span>IL<span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">  &#125;, &#123;</span><br><span class="hljs-string">    &quot;</span>_index<span class="hljs-string">&quot; : &quot;</span>bank<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_type<span class="hljs-string">&quot; : &quot;</span>account<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_id<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">6</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_score<span class="hljs-string">&quot; : 1.0, &quot;</span>_source<span class="hljs-string">&quot; : &#123;&quot;</span>account_number<span class="hljs-string">&quot;:6,&quot;</span>balance<span class="hljs-string">&quot;:5686,&quot;</span>firstname<span class="hljs-string">&quot;:&quot;</span>Hattie<span class="hljs-string">&quot;,&quot;</span>lastname<span class="hljs-string">&quot;:&quot;</span>Bond<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:36,&quot;</span>gender<span class="hljs-string">&quot;:&quot;</span>M<span class="hljs-string">&quot;,&quot;</span>address<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">671</span> Bristol Street<span class="hljs-string">&quot;,&quot;</span>employer<span class="hljs-string">&quot;:&quot;</span>Netagy<span class="hljs-string">&quot;,&quot;</span>email<span class="hljs-string">&quot;:&quot;</span>hattiebond@netagy.com<span class="hljs-string">&quot;,&quot;</span>city<span class="hljs-string">&quot;:&quot;</span>Dante<span class="hljs-string">&quot;,&quot;</span>state<span class="hljs-string">&quot;:&quot;</span>TN<span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">  &#125;, &#123;</span><br><span class="hljs-string">    &quot;</span>_index<span class="hljs-string">&quot; : &quot;</span>bank<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>_type<span class="hljs-string">&quot; : &quot;</span>account<span class="hljs-string">&quot;,</span><br></code></pre></td></tr></table></figure><p>上面示例返回所有bank中的索引数据。其中 q=*  表示匹配索引中所有的数据。</p><p>等价于:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match_all<span class="hljs-string">&quot;: &#123;&#125; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>14 查询语言</p><p>匹配所有数据，但只返回1个:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> 　&quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match_all<span class="hljs-string">&quot;: &#123;&#125; &#125;,</span><br><span class="hljs-string">  &quot;</span><span class="hljs-built_in">size</span><span class="hljs-string">&quot;: 1</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>注意：如果siez不指定，则默认返回10条数据。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> 　&quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match_all<span class="hljs-string">&quot;: &#123;&#125; &#125;,</span><br><span class="hljs-string">  &quot;</span>from<span class="hljs-string">&quot;: 10,</span><br><span class="hljs-string">  &quot;</span><span class="hljs-built_in">size</span><span class="hljs-string">&quot;: 10</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>返回从11到20的数据。（索引下标从0开始）</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match_all<span class="hljs-string">&quot;: &#123;&#125; &#125;,</span><br><span class="hljs-string"> 　&quot;</span>sort<span class="hljs-string">&quot;: &#123; &quot;</span>balance<span class="hljs-string">&quot;: &#123; &quot;</span>order<span class="hljs-string">&quot;: &quot;</span>desc<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>上述示例匹配所有的索引中的数据，按照balance字段降序排序，并且返回前10条（如果不指定size，默认最多返回10条）。</p><p>15.执行搜索</p><p>下面例子展示如何返回两个字段（account_number balance）</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match_all<span class="hljs-string">&quot;: &#123;&#125; &#125;,</span><br><span class="hljs-string">  &quot;</span>_source<span class="hljs-string">&quot;: [&quot;</span>account_number<span class="hljs-string">&quot;, &quot;</span>balance<span class="hljs-string">&quot;]</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_8.png" alt="图8"></p><p>返回account_number 为20 的数据:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>account_number<span class="hljs-string">&quot;: 20 &#125; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>返回address中包含mill的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>mill<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>返回地址中包含mill或者lane的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> 　&quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>mill lane<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>和上面匹配单个词语不同，下面这个例子是多匹配（match_phrase短语匹配），返回地址中包含短语 “mill lane”的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123; &quot;</span>match_phrase<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>mill lane<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>以下是布尔查询，布尔查询允许我们将多个简单的查询组合成一个更复杂的布尔逻辑查询。<br>这个例子将两个查询组合，返回地址中含有mill和lane的所有记录数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span>bool<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　  &quot;</span>must<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">   　　   &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>mill<span class="hljs-string">&quot; &#125; &#125;,</span><br><span class="hljs-string">   　　   &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>lane<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">  　　  ]</span><br><span class="hljs-string">  　　&#125;</span><br><span class="hljs-string"> 　&#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>上述例子中，must表示所有查询必须都为真才被认为匹配。</p><p>相反, 这个例子组合两个查询，返回地址中含有mill或者lane的所有记录数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> 　&quot;</span>query<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string"> 　  &quot;</span>bool<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　  &quot;</span>should<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">   　　   &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>mill<span class="hljs-string">&quot; &#125; &#125;,</span><br><span class="hljs-string">    　　  &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>lane<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">   　　 ]</span><br><span class="hljs-string">  　 &#125;</span><br><span class="hljs-string"> 　&#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>上述例子中，bool表示查询列表中只要有任何一个为真则认为匹配。</p><p>下面例子组合两个查询，返回地址中既没有mill也没有lane的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string"> 　  &quot;</span>bool<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　  &quot;</span>must_not<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">    　　  &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>mill<span class="hljs-string">&quot; &#125; &#125;,</span><br><span class="hljs-string">     　　 &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>address<span class="hljs-string">&quot;: &quot;</span>lane<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">    　　]</span><br><span class="hljs-string">  　　&#125;</span><br><span class="hljs-string"> 　&#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>上述例子中,must_not表示查询列表中没有为真的（也就是全为假）时则认为匹配。</p><p>我们可以组合must、should、must_not来实现更加复杂的多级逻辑查询。</p><p>下面这个例子返回年龄大于40岁、不居住在ID的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>query<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　 &quot;</span>bool<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　  &quot;</span>must<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">     　　 &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>age<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">40</span><span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">   　　 ],</span><br><span class="hljs-string">   　　 &quot;</span>must_not<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">     　　 &#123; &quot;</span>match<span class="hljs-string">&quot;: &#123; &quot;</span>state<span class="hljs-string">&quot;: &quot;</span>ID<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">    　　]</span><br><span class="hljs-string">  　　&#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>16.过滤filter(查询条件设置)</p><p>下面这个例子使用了布尔查询返回balance在20000到30000之间的所有数据。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">　　  &quot;</span>query<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string"> 　　　  &quot;</span>bool<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　　　  &quot;</span>must<span class="hljs-string">&quot;: &#123; &quot;</span>match_all<span class="hljs-string">&quot;: &#123;&#125; &#125;,</span><br><span class="hljs-string">   　　　　 &quot;</span>filter<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">      　　　　&quot;</span>range<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        　　&quot;</span>balance<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        　　  &quot;</span>gte<span class="hljs-string">&quot;: 20000,</span><br><span class="hljs-string">         　　 &quot;</span>lte<span class="hljs-string">&quot;: 30000</span><br><span class="hljs-string">       　　 &#125;</span><br><span class="hljs-string">     　　 &#125;</span><br><span class="hljs-string">   　　 &#125;</span><br><span class="hljs-string">  　 &#125;</span><br><span class="hljs-string"> 　&#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>17 聚合 Aggregations<br>下面这个例子： 将所有的数据按照state分组（group），然后按照分组记录数从大到小排序，返回前十条（默认）：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> 　&quot;</span><span class="hljs-built_in">size</span><span class="hljs-string">&quot;: 0,</span><br><span class="hljs-string">  &quot;</span>aggs<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　 &quot;</span>group_by_state<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　  &quot;</span>terms<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">   　　　   &quot;</span>field<span class="hljs-string">&quot;: &quot;</span>state<span class="hljs-string">&quot;</span><br><span class="hljs-string">  　　  &#125;</span><br><span class="hljs-string">  　 &#125;</span><br><span class="hljs-string"> 　&#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>注意：我们设置size=0，不显示查询hits，因为我们只想看返回的聚合结果。<br><img src="http://cos.leiyawu.com/img/elk_index_check_9.png" alt="图9"></p><p><img src="http://cos.leiyawu.com/img/elk_index_check_10.png" alt="图10"></p><p>上述语句类似于以下SQL语句：<br>SELECT state, COUNT(<em>) FROM bank GROUP BY state ORDER BY COUNT(</em>) DESC</p><p>下面这个实例按照state分组，降序排序，返回balance的平均值：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -d <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> 　&quot;</span><span class="hljs-built_in">size</span><span class="hljs-string">&quot;: 0,</span><br><span class="hljs-string"> 　&quot;</span>aggs<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　 &quot;</span>group_by_state<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  　　  &quot;</span>terms<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">     　　 &quot;</span>field<span class="hljs-string">&quot;: &quot;</span>state<span class="hljs-string">&quot;</span><br><span class="hljs-string">   　　 &#125;,</span><br><span class="hljs-string">  　　  &quot;</span>aggs<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">     　　 &quot;</span>average_balance<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">      　　  &quot;</span>avg<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">       　　   &quot;</span>field<span class="hljs-string">&quot;: &quot;</span>balance<span class="hljs-string">&quot;</span><br><span class="hljs-string">       　　 &#125;</span><br><span class="hljs-string">     　　 &#125;</span><br><span class="hljs-string">   　　 &#125;</span><br><span class="hljs-string">  　　&#125;</span><br><span class="hljs-string"> 　&#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_11.png" alt="图11"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.我们通常用用&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html&quot;&gt;_cat API&lt;/a&gt;检测集群是否健康。 确保9200端口号可用:&lt;br&gt;curl ‘localhost:9200/_cat/health?v’&lt;/p&gt;
&lt;p&gt;绿色表示一切正常, 黄色表示所有的数据可用但是部分副本还没有分配,红色表示部分数据因为某些原因不可用.&lt;/p&gt;
&lt;p&gt;2.通过如下语句，我们可以获取集群的节点列表：&lt;br&gt;curl ‘localhost:9200/_cat/nodes?v’&lt;/p&gt;
&lt;p&gt;3.通过如下语句，列出所有索引：&lt;br&gt;curl ‘localhost:9200/_cat/indices?v’&lt;br&gt;返回结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cos.leiyawu.com/img/elk_index_check_1.png&quot; alt=&quot;图1&quot;&gt;
 　　&lt;/p&gt;
&lt;p&gt;4.创建索引&lt;br&gt;现在我们创建一个名为“customer”的索引，然后再查看所有的索引：&lt;br&gt; curl -XPUT ‘localhost:9200/customer?pretty’&lt;br&gt; curl ‘localhost:9200/_cat/indices?v’&lt;/p&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cos.leiyawu.com/img/elk_index_check_2.png&quot; alt=&quot;图2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cos.leiyawu.com/img/elk_index_check_3.png&quot; alt=&quot;图3&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中红框所表示的是：我们有一个叫customer的索引，它有五个私有的分片以及一个副本，在它里面有0个文档。&lt;/p&gt;</summary>
    
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/categories/ELK/"/>
    
    
    <category term="ELK" scheme="http://www.leiyawu.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>ELK的一次吞吐量优化</title>
    <link href="http://www.leiyawu.com/2018/04/03/elk/"/>
    <id>http://www.leiyawu.com/2018/04/03/elk/</id>
    <published>2018-04-03T03:42:33.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>  ● 最近发现kibana的日志传的很慢，常常查不到日志，由于所有的日志收集都只传输到了一个logstash进行收集和过滤，于是怀疑是否是由于logstash的吞吐量存在瓶颈。一看，还真是到了瓶颈。</p><p>  ● 优化过程</p><p>  ● 经过查询logstash完整配置文件，有几个参数需要调整</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># pipeline线程数，官方建议是等于CPU内核数</span><br><span class="hljs-attr">pipeline.workers:</span> <span class="hljs-number">24</span><br><span class="hljs-comment"># 实际output时的线程数</span><br><span class="hljs-attr">pipeline.output.workers:</span> <span class="hljs-number">24</span><br><span class="hljs-comment"># 每次发送的事件数</span><br><span class="hljs-attr">pipeline.batch.size:</span> <span class="hljs-number">3000</span><br><span class="hljs-comment"># 发送延时</span><br><span class="hljs-attr">pipeline.batch.delay:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>PS:由于我们的ES集群数据量较大（&gt;28T），所以具体配置数值视自身生产环境</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>  ● 在查看logstash日志过程中，我们看到了大量的以下报错</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[2017-03-18T09:46:21,043]</span><span class="hljs-selector-attr">[INFO ]</span><span class="hljs-selector-attr">[logstash.outputs.elasticsearch]</span> retrying failed action with response <span class="hljs-selector-tag">code</span>: <span class="hljs-number">429</span> (&#123;<span class="hljs-string">&quot;type&quot;</span>=&gt;<span class="hljs-string">&quot;es_rejected_execution_exception&quot;</span>, <span class="hljs-string">&quot;reason&quot;</span>=&gt;<span class="hljs-string">&quot;rejected execution of org.elasticsearch.transport.TransportService$6@6918cf2e on EsThreadPoolExecutor[bulk, queue capacity = 50, org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor@55337655[Running, pool size = 24, active threads = 24, queued tasks = 50, completed tasks = 1767887463]]&quot;</span>&#125;)<br><span class="hljs-selector-attr">[2017-03-18T09:46:21,043]</span><span class="hljs-selector-attr">[ERROR]</span><span class="hljs-selector-attr">[logstash.outputs.elasticsearch]</span> Retrying individual actions<br></code></pre></td></tr></table></figure><p>  ● 查询官网，确认为时ES的写入遇到了瓶颈</p><p>  ● Make sure to watch for TOO_MANY_REQUESTS (429) response codes (EsRejectedExecutionException with the Java client), which is the way that Elasticsearch tells you that it cannot keep up with the current indexing rate. When it happens, you should pause indexing a bit before trying again, ideally with randomized exponential backoff.</p><p>我们首先想到的是来调整ES的线程数，但是官网写到”Don’t Touch There Settings!”, 那怎么办？于是乎官方建议我们修改logstash的参数pipeline.batch.size</p><p>  ● 在ES5.0以后，es将bulk、flush、get、index、search等线程池完全分离，自身的写入不会影响其他功能的性能。<br>来查询一下ES当前的线程情况：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET _nodes<span class="hljs-regexp">/stats/</span>thread_pool?pretty<br><br>可以看到：<br>&#123;<br>  <span class="hljs-string">&quot;_nodes&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;successful&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;dev-elasticstack5.0&quot;</span>,<br>  <span class="hljs-string">&quot;nodes&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;nnfCv8FrSh-p223gsbJVMA&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-number">1489804973926</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-3&quot;</span>,<br>      <span class="hljs-string">&quot;transport_address&quot;</span>: <span class="hljs-string">&quot;192.168.3.***:9301&quot;</span>,<br>      <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;192.168.3.***&quot;</span>,<br>      <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.168.3.***:9301&quot;</span>,<br>      <span class="hljs-string">&quot;roles&quot;</span>: [<br>        <span class="hljs-string">&quot;master&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>,<br>        <span class="hljs-string">&quot;ingest&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;attributes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;rack&quot;</span>: <span class="hljs-string">&quot;r1&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;thread_pool&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;bulk&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;threads&quot;</span>: <span class="hljs-number">24</span>,<br>          <span class="hljs-string">&quot;queue&quot;</span>: <span class="hljs-number">214</span>,<br>          <span class="hljs-string">&quot;active&quot;</span>: <span class="hljs-number">24</span>,<br>          <span class="hljs-string">&quot;rejected&quot;</span>: <span class="hljs-number">30804543</span>,<br>          <span class="hljs-string">&quot;largest&quot;</span>: <span class="hljs-number">24</span>,<br>          <span class="hljs-string">&quot;completed&quot;</span>: <span class="hljs-number">1047606679</span><br>        &#125;,<br><br>        ......<br><br>        <span class="hljs-string">&quot;watcher&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;threads&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;queue&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;active&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;rejected&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;largest&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;completed&quot;</span>: <span class="hljs-number">0</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：”bulk”模板的线程数24，当前活跃的线程数24，证明所有的线程是busy的状态，queue队列214，rejected为30804543。那么问题就找到了，所有的线程都在忙，队列堵满后再有进程写入就会被拒绝，而当前拒绝数为30804543。<br>优化方案<br>问题找到了，如何优化呢。官方的建议是提高每次批处理的数量，调节传输间歇时间。当batch.size增大，es处理的事件数就会变少，写入也就愉快了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> /etc/logstash/logstash.yml<br><span class="hljs-comment">#</span><br><span class="hljs-attribute">pipeline</span>.workers: <span class="hljs-number">24</span><br><span class="hljs-attribute">pipeline</span>.output.workers: <span class="hljs-number">24</span><br><span class="hljs-attribute">pipeline</span>.batch.size: <span class="hljs-number">10000</span><br><span class="hljs-attribute">pipeline</span>.batch.delay: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>具体的worker/output.workers数量建议等于CPU数，batch.size/batch.delay根据实际的数据量逐渐增大来测试最优值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h2&gt;&lt;p&gt;  ● 最近发现kibana的日志传的很慢，常常查不到日志，由于所有的日志收集都只传输到了一个logstash进行收集和过滤，于是怀</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>23种非常有用的ElasticSearch查询例子</title>
    <link href="http://www.leiyawu.com/2018/04/02/asd/"/>
    <id>http://www.leiyawu.com/2018/04/02/asd/</id>
    <published>2018-04-02T06:34:36.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、新建索引"><a href="#一、新建索引" class="headerlink" title="一、新建索引"></a>一、新建索引</h2><p>为了展示Elasticsearch中不同查询的用法，先在Elasticsearch里面创建了book相关的documents，每本书主要涉及以下字段： title, authors, summary, publish_date(发行日期),publisher以及评论条数。</p><p>操作如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">curl -XPUT &#x27;https://www.iteblog.com:9200/iteblog_book_index&#x27; -d &#x27;&#123; &quot;settings&quot;: &#123; &quot;number_of_shards&quot;: 1 &#125;&#125;&#x27;<br><br>curl -XPOST &#x27;https://www.iteblog.com:9200/iteblog_book_index/book/_bulk&#x27; -d &#x27;<br>&#123; &quot;<span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 1 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Elasticsearch: The Definitive Guide<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span>clinton gormley<span class="hljs-string">&quot;, &quot;</span>zachary tong<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span>A distibuted real-time search <span class="hljs-keyword">and</span> analytics engine<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2015</span><span class="hljs-number">-02</span><span class="hljs-number">-07</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 20, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>oreilly<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 2 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Taming Text: How <span class="hljs-keyword">to</span> Find, Organize, <span class="hljs-keyword">and</span> Manipulate It<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span><span class="hljs-keyword">grant</span> ingersoll<span class="hljs-string">&quot;, &quot;</span>thomas morton<span class="hljs-string">&quot;, &quot;</span>drew farris<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span>organize text <span class="hljs-keyword">using</span> approaches such <span class="hljs-keyword">as</span> full-text search, proper name recognition, clustering, tagging, information extraction, <span class="hljs-keyword">and</span> summarization<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2013</span><span class="hljs-number">-01</span><span class="hljs-number">-24</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 12, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>manning<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 3 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Elasticsearch <span class="hljs-keyword">in</span> Action<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span>radu gheorge<span class="hljs-string">&quot;, &quot;</span>matthew lee hinman<span class="hljs-string">&quot;, &quot;</span>roy russo<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span><span class="hljs-keyword">build</span> scalable search applications <span class="hljs-keyword">using</span> Elasticsearch without <span class="hljs-keyword">having</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> complex low-level programming <span class="hljs-keyword">or</span> understand advanced data science algorithms<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2015</span><span class="hljs-number">-12</span><span class="hljs-number">-03</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 18, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>manning<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 4 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Solr <span class="hljs-keyword">in</span> Action<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span>trey grainger<span class="hljs-string">&quot;, &quot;</span>timothy potter<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span>Comprehensive guide <span class="hljs-keyword">to</span> implementing a scalable search engine <span class="hljs-keyword">using</span> Apache Solr<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2014</span><span class="hljs-number">-04</span><span class="hljs-number">-05</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 23, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>manning<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>通过dev tools来模拟则为：<br><a href="http://cos.leiyawu.com/img/elk_index_check_1.png">http://cos.leiyawu.com/img/elk_index_check_1.png</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">POST /iteblog_book_index/book/_bulk<br>&#123; &quot;<span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 1 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Elasticsearch: The Definitive Guide<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span>clinton gormley<span class="hljs-string">&quot;, &quot;</span>zachary tong<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span>A distibuted real-time search <span class="hljs-keyword">and</span> analytics engine<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2015</span><span class="hljs-number">-02</span><span class="hljs-number">-07</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 20, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>oreilly<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 2 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Taming Text: How <span class="hljs-keyword">to</span> Find, Organize, <span class="hljs-keyword">and</span> Manipulate It<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span><span class="hljs-keyword">grant</span> ingersoll<span class="hljs-string">&quot;, &quot;</span>thomas morton<span class="hljs-string">&quot;, &quot;</span>drew farris<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span>organize text <span class="hljs-keyword">using</span> approaches such <span class="hljs-keyword">as</span> full-text search, proper name recognition, clustering, tagging, information extraction, <span class="hljs-keyword">and</span> summarization<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2013</span><span class="hljs-number">-01</span><span class="hljs-number">-24</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 12, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>manning<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 3 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Elasticsearch <span class="hljs-keyword">in</span> Action<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span>radu gheorge<span class="hljs-string">&quot;, &quot;</span>matthew lee hinman<span class="hljs-string">&quot;, &quot;</span>roy russo<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span><span class="hljs-keyword">build</span> scalable search applications <span class="hljs-keyword">using</span> Elasticsearch without <span class="hljs-keyword">having</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> complex low-level programming <span class="hljs-keyword">or</span> understand advanced data science algorithms<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2015</span><span class="hljs-number">-12</span><span class="hljs-number">-03</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 18, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>manning<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123; &quot;</span>_id<span class="hljs-string">&quot;: 4 &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-built_in">title</span><span class="hljs-string">&quot;: &quot;</span>Solr <span class="hljs-keyword">in</span> Action<span class="hljs-string">&quot;, &quot;</span>authors<span class="hljs-string">&quot;: [&quot;</span>trey grainger<span class="hljs-string">&quot;, &quot;</span>timothy potter<span class="hljs-string">&quot;], &quot;</span>summary<span class="hljs-string">&quot; : &quot;</span>Comprehensive guide <span class="hljs-keyword">to</span> implementing a scalable search engine <span class="hljs-keyword">using</span> Apache Solr<span class="hljs-string">&quot;, &quot;</span>publish_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2014</span><span class="hljs-number">-04</span><span class="hljs-number">-05</span><span class="hljs-string">&quot;, &quot;</span>num_reviews<span class="hljs-string">&quot;: 23, &quot;</span>publisher<span class="hljs-string">&quot;: &quot;</span>manning<span class="hljs-string">&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>ES中的查询请求有两种方式，一种是简易版的查询，另外一种是使用JSON完整的请求体，叫做结构化查询（DSL）。<br>由于DSL查询更为直观也更为简易，所以大都使用这种方式。<br>DSL查询是POST过去一个json，由于post的请求是json格式的，所以存在很多灵活性，也有很多形式。</p><p>基本匹配查询主要形式：<br>（1）、使用Search Lite API，并将所有的搜索参数都通过URL传递<br>（2）、使用Elasticsearch DSL，其可以通过传递一个JSON请求来获取结果。Curl方式与其类似，只是提交方式不是POST，而是XGET，提交参数与DSL提交一致</p><p>二、基本匹配查询(Basic Match Query)<br>1、在所有的字段中搜索带有”guide”的结果：<br>通过dev tools:<br>GET /iteblog_book_index/book/_search?q=guide</p><p>通过curl方式：<br>curl -u elastic “<a href="http://10.104.37.115:9281/iteblog_book_index/book/_search?pretty&quot;">http://10.104.37.115:9281/iteblog_book_index/book/_search?pretty&quot;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “guide”,<br>            “fields” : [“_all”]<br>        }<br>    }<br>}’</p><p>通过DSL：(POST json方式)</p><p>其输出和上面使用/iteblog_book_index/book/_search?q=guide的输出一样。上面的multi_match关键字通常在查询多个fields的时候作为match关键字的简写方式。fields属性指定需要查询的字段，如果我们想查询所有的字段，这时候可以使用_all关键字，正如上面的一样。</p><p>如果只是查询summary字段，则为：</p><p>title的Guide则不会显示。</p><p>2、以上两种方式都允许我们指定查询哪些字段。比如，我们想查询title中出现in Action的图书，那么我们可以这么查询：</p><p>GET /iteblog_book_index/book/_search?q=title:in%20action</p><p>然而，DSL方式提供了更加灵活的方式来构建更加复杂的查询（我们将在后面看到），甚至指定你想要的返回结果。下面的例子中，我将指定需要返回结果的数量，开始的偏移量（这在分页的情况下非常有用），需要返回document中的哪些字段以及高亮关键字：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “match” : {<br>            “title” : “in action”<br>        }<br>    },<br>    “size”: 2,   #返回结果的数量<br>    “from”: 0,  #开始的偏移量<br>    “_source”: [ “title”, “summary”, “publish_date” ],<br>    “highlight”: {<br>        “fields” : {<br>            “title” : {}<br>        }<br>    }<br>}’</p><span id="more"></span><p>三、Multi-field Search<br>正如我们之前所看到的，想在一个搜索中查询多个 document field （比如使用同一个查询关键字同时在title和summary中查询），你可以使用multi_match查询，使用如下：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “elasticsearch guide”,<br>            “fields”: [“title”, “summary”]<br>        }<br>    }<br>}’</p><p>四、Boosting<br>上面使用同一个搜索请求在多个field中查询，你也许想提高某个field的查询权重。在下面的例子中，我们把summary field的权重调成3，这样就提高了其在结果中的权重，这样把_id=4的文档相关性大大提高了，如下：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “elasticsearch guide”,<br>            “fields”: [“title”, “summary^3”]<br>        }<br>    },<br>    “_source”: [“title”, “summary”, “publish_date”]<br>}’</p><p>需要注意的是：Boosting不仅仅意味着计算出来的分数(calculated score)直接乘以boost factor，最终的boost value会经过归一化以及其他一些内部的优化</p><p>五、Bool Query<br>在查询条件中使用AND/OR/NOT操作符，这就是布尔查询(Bool Query)。布尔查询可以接受一个must参数(等价于AND)，一个must_not参数(等价于NOT)，以及一个should参数(等价于OR)。比如，我想查询title中出现Elasticsearch或者Solr关键字的图书，图书的作者是clinton gormley，但没有radu gheorge，可以这么来查询：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “bool”: {<br>            “must”: {<br>                “bool” : { “should”: [<br>                      { “match”: { “title”: “Elasticsearch” }},<br>                      { “match”: { “title”: “Solr” }} ] }<br>            },<br>            “must”: { “match”: { “authors”: “clinton gormely” }},<br>            “must_not”: { “match”: {“authors”: “radu gheorge” }}<br>        }<br>    }<br>}’</p><p>六、Fuzzy Queries（模糊查询）<br>模糊查询可以在Match和 Multi-Match查询中使用以便解决拼写的错误，模糊度是基于Levenshtein distance计算与原单词的距离。使用如下：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “comprihensiv guide”,<br>            “fields”: [“title”, “summary”],<br>            “fuzziness”: “AUTO”<br>        }<br>    },<br>    “_source”: [“title”, “summary”, “publish_date”],<br>    “size”: 1<br>}’</p><p>需要注意：上面我们将fuzziness的值指定为AUTO，其在term的长度大于5的时候相当于指定值为2。然而80%的人拼写错误的编辑距离(edit distance)为1，所有如果你将fuzziness设置为1可能会提高你的搜索性能。</p><p>七、Wildcard Query(通配符查询)<br>通配符查询允许我们指定一个模式来匹配，而不需要指定完整的term。?将会匹配一个字符；<em>将会匹配零个或者多个字符。比如我们想查找所有作者名字中以t字符开始的记录，我们可以如下使用：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “wildcard” : {      #wildcard是通配符意思<br>            “authors” : “t</em>“<br>        }<br>    },<br>    “_source”: [“title”, “authors”],<br>    “highlight”: {<br>        “fields” : {<br>            “authors” : {}<br>        }<br>    }<br>}’</p><p>八、Regexp Query(正则表达式查询)<br>ElasticSearch还支持正则表达式查询，此方式提供了比通配符查询更加复杂的模式。比如我们先查找作者名字以t字符开头，中间是若干个a-z之间的字符，并且以字符y结束的记录，可以如下查询：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “regexp” : {<br>            “authors” : “t[a-z]*y”<br>        }<br>    },<br>    “_source”: [“title”, “authors”],<br>    “highlight”: {<br>        “fields” : {<br>            “authors” : {}<br>        }<br>    }<br>}’</p><p>九、Match Phrase Query(匹配短语查询)<br>匹配短语查询要求查询字符串中的trems要么都出现Document中、要么trems按照输入顺序依次出现在结果中。在默认情况下，查询输入的trems必须在搜索字符串紧挨着出现，否则将查询不到。不过我们可以指定slop参数，来控制输入的trems之间有多少个单词仍然能够搜索到，如下所示：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match”: {<br>            “query”: “search engine”,<br>            “fields”: [<br>                “title”,<br>                “summary”<br>            ],<br>            “type”: “phrase”,<br>            “slop”: 3<br>        }<br>    },<br>    “_source”: [<br>        “title”,<br>        “summary”,<br>        “publish_date”<br>    ]<br>}’</p><p>从上面的例子可以看出，id为4的document被搜索（summary字段里面精确匹配到了search engine），并且分数比较高；而id为1的document也被搜索到了，虽然其summary中的search和engine单词并不是紧挨着的，但是我们指定了slop属性，所以被搜索到了。如果我们将”slop”: 3条件删除，那么id为1的文档将不会被搜索到，如下：</p><p>十、Simple Query String(简单查询字符串)<br>simple_query_string是query_string的另一种版本，其更适合为用户提供一个搜索框中，因为其使用+/|/- 分别替换AND/OR/NOT，如果用输入了错误的查询，其直接忽略这种情况而不是抛出异常。使用如下：(注意是POST)<br>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “simple_query_string” : {<br>            “query”: “(saerch<del>1 algorithm</del>1) + (grant ingersoll)  | (tom morton)”,<br>            “fields”: [“_all”, “summary^2”]<br>        }<br>    },<br>    “_source”: [ “title”, “summary”, “authors” ],<br>    “highlight”: {<br>        “fields” : {<br>            “summary” : {}<br>        }<br>    }<br>}</p><p>十一、Term/Terms Query<br>前面的例子中我们已经介绍了全文搜索(full-text search)，但有时候我们对结构化搜索中能够精确匹配并返回搜索结果更感兴趣。这种情况下我们可以使用term和terms查询。在下面例子中，我们想搜索所有曼宁出版社(Manning Publications)出版的图书：</p><p>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a> -d ‘<br>{<br>    “query”: {<br>        “term” : {<br>            “publisher”: “manning”<br>        }<br>    },<br>    “_source” : [“title”,”publish_date”,”publisher”]<br>}’</p><p>还可以使用terms关键字来指定多个terms，如下：</p><p>{<br>    “query”: {<br>        “terms” : {<br>            “publisher”: [“oreilly”, “packt”]<br>        }<br>    }<br>}</p><p>十二、Term Query - Sorted<br>词查询结果和其他查询结果一样可以很容易地对其进行排序，而且我们可以对输出结果按照多层进行排序：<br>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “term” : {<br>            “publisher”: “manning”<br>        }<br>    },<br>    “_source” : [“title”,”publish_date”,”publisher”],<br>    “sort”: [<br>        { “publish_date”: {“order”:”desc”}},<br>        { “title”: { “order”: “desc” }}<br>    ]<br>}</p><p>执行提示：<br>Fielddata is disabled on text fields by default. Set fielddata=true on [title] in order to load fielddata in memory by uninverting the inverted index</p><p>应该是5.x后对排序，聚合这些操作用单独的数据结构(fielddata)缓存到内存里了，需要单独开启</p><p>PUT /iteblog_book_index/_mapping/book<br>{<br>  “properties”: {<br>    “title”: {<br>      “type”: “text”,<br>      “fielddata”: true<br>    }<br>  }<br>}</p><p>再次执行：</p><p>十三、Range Query(范围查询)<br>另一种结构化查询就是范围查询。在下面例子中，我们搜索所有发行年份为2015的图书：<br>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “range” : {<br>            “publish_date”: {<br>                “gte”: “2015-01-01”,<br>                “lte”: “2015-12-31”<br>            }<br>        }<br>    },<br>    “_source” : [“title”,”publish_date”,”publisher”]<br>}</p><p>十四、Filtered Query(过滤查询)<br>过滤查询允许我们对查询结果进行筛选。比如：我们查询标题和摘要中包含Elasticsearch关键字的图书，但是我们想过滤出评论大于20的结果，可以如下使用：</p><p>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “filtered”: {<br>            “query” : {<br>                “multi_match”: {<br>                    “query”: “elasticsearch”,<br>                    “fields”: [“title”,”summary”]<br>                }<br>            },<br>            “filter”: {<br>                “range” : {<br>                    “num_reviews”: {<br>                        “gte”: 20<br>                    }<br>                }<br>            }<br>        }<br>    },<br>    “_source” : [“title”,”summary”,”publisher”, “num_reviews”]<br>}</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、新建索引&quot;&gt;&lt;a href=&quot;#一、新建索引&quot; class=&quot;headerlink&quot; title=&quot;一、新建索引&quot;&gt;&lt;/a&gt;一、新建索引&lt;/h2&gt;&lt;p&gt;为了展示Elasticsearch中不同查询的用法，先在Elasticsearch里面创建了book相关的documents，每本书主要涉及以下字段： title, authors, summary, publish_date(发行日期),publisher以及评论条数。&lt;/p&gt;
&lt;p&gt;操作如下：&lt;/p&gt;
&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs n1ql&quot;&gt;curl -XPUT &amp;#x27;https://www.iteblog.com:9200/iteblog_book_index&amp;#x27; -d &amp;#x27;&amp;#123; &amp;quot;settings&amp;quot;: &amp;#123; &amp;quot;number_of_shards&amp;quot;: 1 &amp;#125;&amp;#125;&amp;#x27;&lt;br&gt;&lt;br&gt;curl -XPOST &amp;#x27;https://www.iteblog.com:9200/iteblog_book_index/book/_bulk&amp;#x27; -d &amp;#x27;&lt;br&gt;&amp;#123; &amp;quot;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 1 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Elasticsearch: The Definitive Guide&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;clinton gormley&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;zachary tong&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;A distibuted real-time search &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; analytics engine&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-02&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-07&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 20, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;oreilly&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 2 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Taming Text: How &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; Find, Organize, &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; Manipulate It&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;grant&lt;/span&gt; ingersoll&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;thomas morton&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;drew farris&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;organize text &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; approaches such &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; full-text search, proper name recognition, clustering, tagging, information extraction, &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; summarization&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-24&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 12, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;manning&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 3 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Elasticsearch &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Action&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;radu gheorge&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;matthew lee hinman&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;roy russo&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;build&lt;/span&gt; scalable search applications &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Elasticsearch without &lt;span class=&quot;hljs-keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; complex low-level programming &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; understand advanced data science algorithms&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-12&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 18, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;manning&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 4 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Solr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Action&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;trey grainger&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;timothy potter&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;Comprehensive guide &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; implementing a scalable search engine &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Apache Solr&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-04&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 23, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;manning&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;通过dev tools来模拟则为：&lt;br&gt;&lt;a href=&quot;http://cos.leiyawu.com/img/elk_index_check_1.png&quot;&gt;http://cos.leiyawu.com/img/elk_index_check_1.png&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs n1ql&quot;&gt;POST /iteblog_book_index/book/_bulk&lt;br&gt;&amp;#123; &amp;quot;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 1 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Elasticsearch: The Definitive Guide&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;clinton gormley&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;zachary tong&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;A distibuted real-time search &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; analytics engine&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-02&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-07&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 20, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;oreilly&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 2 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Taming Text: How &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; Find, Organize, &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; Manipulate It&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;grant&lt;/span&gt; ingersoll&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;thomas morton&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;drew farris&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;organize text &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; approaches such &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; full-text search, proper name recognition, clustering, tagging, information extraction, &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; summarization&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-24&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 12, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;manning&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 3 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Elasticsearch &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Action&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;radu gheorge&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;matthew lee hinman&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;roy russo&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;build&lt;/span&gt; scalable search applications &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Elasticsearch without &lt;span class=&quot;hljs-keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; complex low-level programming &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; understand advanced data science algorithms&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-12&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 18, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;manning&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;#123; &amp;quot;&lt;/span&gt;_id&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 4 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#123; &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;Solr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Action&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;authors&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: [&amp;quot;&lt;/span&gt;trey grainger&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;timothy potter&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;], &amp;quot;&lt;/span&gt;summary&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;Comprehensive guide &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; implementing a scalable search engine &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Apache Solr&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;publish_date&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-04&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;num_reviews&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: 23, &amp;quot;&lt;/span&gt;publisher&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;manning&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;ES中的查询请求有两种方式，一种是简易版的查询，另外一种是使用JSON完整的请求体，叫做结构化查询（DSL）。&lt;br&gt;由于DSL查询更为直观也更为简易，所以大都使用这种方式。&lt;br&gt;DSL查询是POST过去一个json，由于post的请求是json格式的，所以存在很多灵活性，也有很多形式。&lt;/p&gt;
&lt;p&gt;基本匹配查询主要形式：&lt;br&gt;（1）、使用Search Lite API，并将所有的搜索参数都通过URL传递&lt;br&gt;（2）、使用Elasticsearch DSL，其可以通过传递一个JSON请求来获取结果。Curl方式与其类似，只是提交方式不是POST，而是XGET，提交参数与DSL提交一致&lt;/p&gt;
&lt;p&gt;二、基本匹配查询(Basic Match Query)&lt;br&gt;1、在所有的字段中搜索带有”guide”的结果：&lt;br&gt;通过dev tools:&lt;br&gt;GET /iteblog_book_index/book/_search?q=guide&lt;/p&gt;
&lt;p&gt;通过curl方式：&lt;br&gt;curl -u elastic “&lt;a href=&quot;http://10.104.37.115:9281/iteblog_book_index/book/_search?pretty&amp;quot;&quot;&gt;http://10.104.37.115:9281/iteblog_book_index/book/_search?pretty&amp;quot;&lt;/a&gt; -d ‘&lt;br&gt;{&lt;br&gt;    “query”: {&lt;br&gt;        “multi_match” : {&lt;br&gt;            “query” : “guide”,&lt;br&gt;            “fields” : [“_all”]&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}’&lt;/p&gt;
&lt;p&gt;通过DSL：(POST json方式)&lt;/p&gt;
&lt;p&gt;其输出和上面使用/iteblog_book_index/book/_search?q=guide的输出一样。上面的multi_match关键字通常在查询多个fields的时候作为match关键字的简写方式。fields属性指定需要查询的字段，如果我们想查询所有的字段，这时候可以使用_all关键字，正如上面的一样。&lt;/p&gt;
&lt;p&gt;如果只是查询summary字段，则为：&lt;/p&gt;
&lt;p&gt;title的Guide则不会显示。&lt;/p&gt;
&lt;p&gt;2、以上两种方式都允许我们指定查询哪些字段。比如，我们想查询title中出现in Action的图书，那么我们可以这么查询：&lt;/p&gt;
&lt;p&gt;GET /iteblog_book_index/book/_search?q=title:in%20action&lt;/p&gt;
&lt;p&gt;然而，DSL方式提供了更加灵活的方式来构建更加复杂的查询（我们将在后面看到），甚至指定你想要的返回结果。下面的例子中，我将指定需要返回结果的数量，开始的偏移量（这在分页的情况下非常有用），需要返回document中的哪些字段以及高亮关键字：&lt;/p&gt;
&lt;p&gt;curl -XGET ‘&lt;a href=&quot;https://www.iteblog.com:9200/iteblog_book_index/book/_search&amp;#39;&quot;&gt;https://www.iteblog.com:9200/iteblog_book_index/book/_search&amp;#39;&lt;/a&gt; -d ‘&lt;br&gt;{&lt;br&gt;    “query”: {&lt;br&gt;        “match” : {&lt;br&gt;            “title” : “in action”&lt;br&gt;        }&lt;br&gt;    },&lt;br&gt;    “size”: 2,   #返回结果的数量&lt;br&gt;    “from”: 0,  #开始的偏移量&lt;br&gt;    “_source”: [ “title”, “summary”, “publish_date” ],&lt;br&gt;    “highlight”: {&lt;br&gt;        “fields” : {&lt;br&gt;            “title” : {}&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}’&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
