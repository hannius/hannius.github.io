<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>让一切随风</title>
  
  <subtitle>Martin&#39;s Blog</subtitle>
  <link href="http://www.leiyawu.com/atom.xml" rel="self"/>
  
  <link href="http://www.leiyawu.com/"/>
  <updated>2021-08-11T08:10:12.198Z</updated>
  <id>http://www.leiyawu.com/</id>
  
  <author>
    <name>Martin Lei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s 命名空间Terminating产生原因及解决方法</title>
    <link href="http://www.leiyawu.com/2021/05/08/k8s-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4Terminating%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://www.leiyawu.com/2021/05/08/k8s-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4Terminating%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-08T02:56:00.000Z</published>
    <updated>2021-08-11T08:10:12.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么删除ns会出现Terminating的情况"><a href="#为什么删除ns会出现Terminating的情况" class="headerlink" title="为什么删除ns会出现Terminating的情况"></a>为什么删除ns会出现Terminating的情况</h2><p>当删除集群中的某个namespace之后，有时候namespace并没有按照我们的期望正常删除，而是一直卡在Terminating状态。</p><h3 id="删除namespace后到底发生了什么"><a href="#删除namespace后到底发生了什么" class="headerlink" title="删除namespace后到底发生了什么"></a>删除namespace后到底发生了什么</h3><p>从kubectl delele namespace动作开始，当执行了删除命名空间的动作后，k8s并不会直接删除该命名空间，而是设置了namespace对象的metadata.deleteTimestasp字段，然后kube-controlller-manager组件中的namespace-controller开始工作，负责执行namespace删除的相关事宜，比如清理被删除命名空间下面的资源等，最后才会删除该命名空间，而如果namespace-controller有报错或者没有走到终止流程，就会一直卡在Terminating状态。</p><p>namespace-controller的工作流程，如图所示:</p><p><img src="http://cos.leiyawu.com/docker/k8s/del_ns_status.png" alt="es_user"></p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>使用kubectl  delete -f xxx.yaml，再次执行 kubectl apply -f xxx.yaml，提示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  fb git:(master) kubectl apply -f .<br>Error <span class="hljs-keyword">from</span> <span class="hljs-keyword">server</span> (Forbidden): error <span class="hljs-keyword">when</span> creating &quot;kubesphere-complete-setup.yaml&quot;: configmaps &quot;ks-installer&quot; <span class="hljs-keyword">is</span> forbidden: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> <span class="hljs-built_in">new</span> content <span class="hljs-keyword">in</span> namespace kubesphere-<span class="hljs-keyword">system</span> because it <span class="hljs-keyword">is</span> being terminated<br>Error <span class="hljs-keyword">from</span> <span class="hljs-keyword">server</span> (Forbidden): error <span class="hljs-keyword">when</span> creating &quot;kubesphere-complete-setup.yaml&quot;: serviceaccounts &quot;ks-installer&quot; <span class="hljs-keyword">is</span> forbidden: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> <span class="hljs-built_in">new</span> content <span class="hljs-keyword">in</span> namespace kubesphere-<span class="hljs-keyword">system</span> because it <span class="hljs-keyword">is</span> being terminated<br>Error <span class="hljs-keyword">from</span> <span class="hljs-keyword">server</span> (Forbidden): error <span class="hljs-keyword">when</span> creating &quot;kubesphere-complete-setup.yaml&quot;: deployments.apps &quot;ks-installer&quot; <span class="hljs-keyword">is</span> forbidden: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> <span class="hljs-built_in">new</span> content <span class="hljs-keyword">in</span> namespace kubesphere-<span class="hljs-keyword">system</span> because it <span class="hljs-keyword">is</span> being terminated<br><br>➜  fb git:(master) kubectl  <span class="hljs-keyword">get</span> ns <br><span class="hljs-type">NAME</span>                STATUS        AGE<br><span class="hljs-keyword">default</span>             Active        <span class="hljs-number">15</span>h<br>kube-node-lease     Active        <span class="hljs-number">15</span>h<br>kube-<span class="hljs-built_in">public</span>         Active        <span class="hljs-number">15</span>h<br>kube-<span class="hljs-keyword">system</span>         Active        <span class="hljs-number">15</span>h<br>cattle-<span class="hljs-keyword">system</span>       Terminating   <span class="hljs-number">28</span>m<br><span class="hljs-keyword">Local</span>               Terminating   <span class="hljs-number">28</span>m<br></code></pre></td></tr></table></figure><h2 id="原因及解决方法"><a href="#原因及解决方法" class="headerlink" title="原因及解决方法"></a>原因及解决方法</h2><h3 id="原因1：finalizer-main"><a href="#原因1：finalizer-main" class="headerlink" title="原因1：finalizer(main)"></a>原因1：finalizer(main)</h3><p>finalizer导致namespace Terminating一般主要集群中以下两种情况：</p><h4 id="1-namespace资源对象的spec-finalizer-列表中不为空"><a href="#1-namespace资源对象的spec-finalizer-列表中不为空" class="headerlink" title="1. namespace资源对象的spec.finalizer[] 列表中不为空"></a>1. namespace资源对象的spec.finalizer[] 列表中不为空</h4><p>rancher删除之后，有些namespace删除后就是这种情况.</p><p>解决办法：手动清理</p><ul><li>查看cattle-system的namespace描述<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  fb git:(master) kubectl <span class="hljs-keyword">get</span> ns cattle-<span class="hljs-keyword">system</span>  -o <span class="hljs-type">json</span> &gt; cattle.json<br></code></pre></td></tr></table></figure></li><li>编辑json文件，删除spec字段的内存，因为k8s集群需要认证<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  fb gi<span class="hljs-variable">t:</span>(master) <span class="hljs-keyword">vim</span> cattle-<span class="hljs-built_in">system</span>.json<br>将<br><span class="hljs-string">&quot;spec&quot;</span>: &#123;        <span class="hljs-string">&quot;finalizers&quot;</span>: [            <span class="hljs-string">&quot;kubernetes&quot;</span><br>        ]<br>    &#125;,<br>更改为：<br><span class="hljs-string">&quot;spec&quot;</span>: &#123;<br>    <br>  &#125;,<br></code></pre></td></tr></table></figure></li><li>新开一个窗口运行kubectl proxy跑一个API代理在本地的8081端口<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">➜  ~ kubectl<span class="hljs-built_in"> proxy </span><span class="hljs-attribute">--port</span>=8081<br>Starting <span class="hljs-keyword">to</span> serve on 127.0.0.1:8081<br></code></pre></td></tr></table></figure></li><li>check the status<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">➜  fb git:(<span class="hljs-literal">master</span>) lsof -i:<span class="hljs-number">8081</span><br>COMMAND   PID    <span class="hljs-keyword">USER</span>   <span class="hljs-title">FD</span>   <span class="hljs-keyword">TYPE</span>    DEVICE SIZE/OFF <span class="hljs-keyword">NODE</span> <span class="hljs-title">NAME</span><br>kubectl <span class="hljs-number">31323</span> leiyawu    <span class="hljs-number">3</span>u  IPv4 <span class="hljs-number">650617594</span>      <span class="hljs-number">0</span>t0  TCP localhost:tproxy (LISTEN)<br></code></pre></td></tr></table></figure></li><li>运行curl命令进行删除 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  fb git:(master) curl -k -H <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> -X PUT --data-binary @cattle.json http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>cattle-system/finalize<br></code></pre></td></tr></table></figure><html><font color=#A52A2A size=2 >注意：命令中的cattle.json是之前修改的json文件，cattle-system就是terminating的命名空间</font></html></li></ul><ul><li>再次查看namespace，发现cattle-system命名空间已经消失了。<br>如果出现多个命名空间无法删除的情况，循环遍历以上操作即可。</li></ul><html><font color=#A52A2A size=3 >除了通过kube-proxy api来执行，也可以直接请求api server,使用kubectl replace命令(未测试)：</font></html><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">kubectl replace <span class="hljs-params">--raw</span> <span class="hljs-string">&quot;/api/v1/namespaces/cattle-system/finalize&quot;</span> -f <span class="hljs-string">./cattle.json</span><br></code></pre></td></tr></table></figure><h4 id="2-namespace资源对象的metadata-finalizer-列表不为空"><a href="#2-namespace资源对象的metadata-finalizer-列表不为空" class="headerlink" title="2. namespace资源对象的metadata.finalizer[] 列表不为空"></a>2. namespace资源对象的metadata.finalizer[] 列表不为空</h4><p>比如：将集群托管到rancher管理后，rancher就会写finalizer到metadata.finalizer[] 列表，而当集群脱离rancher管理之后，手动删除namespace，往往就会发生Terminating</p><p>解决办法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ kubelet edit ns &lt;<span class="hljs-built_in">name</span>&gt; <span class="hljs-comment">#将metadata.finalizer[]列表删除</span><br></code></pre></td></tr></table></figure><p>或者直接通过tke 控制台YAML编辑对应的NS</p><h3 id="原因2：资源发现-minor"><a href="#原因2：资源发现-minor" class="headerlink" title="原因2：资源发现(minor)"></a>原因2：资源发现(minor)</h3><h4 id="k8s的api组织形式"><a href="#k8s的api组织形式" class="headerlink" title="k8s的api组织形式"></a>k8s的api组织形式</h4><p>k8s使用的是声明式API，其中API是通过分组、版本、资源名组成，而谈论某个资源，必须要属于某个API分组/版本，比如通过yaml创建对象时，除了要声明Kind外，还需要声明apiVersion对象。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 查看资源</span><br><span class="hljs-variable">$ </span>kubectl api-resources [-o wide]<br><span class="hljs-comment"># 查看API版本</span><br><span class="hljs-variable">$ </span>kubectl api-versions<br></code></pre></td></tr></table></figure><h4 id="聚合层扩展kubernetes-api"><a href="#聚合层扩展kubernetes-api" class="headerlink" title="聚合层扩展kubernetes api"></a>聚合层扩展kubernetes api</h4><p>聚合层通常用于扩展k8s api-server，允许添加新的API分组/版本。用户通过创建apiService对象来注册API，并声明自定义的扩展apiserver，当请求到该API分组/版本的时候，k8s apiservice会代理转发到后端自定义的apiserver来处理。比如，TKE集群中的hpa-metrics-server，就实现了metrics.k8s.io/v1beta1 这个API分组/版本（用户也可以部署promethues的metrics-adapter进行替换）。</p><p>在资源发现这里，会先获取API分组/版本信息，然后再获取各个API分组/版本的资源信息，从而罗列出集群中的所有资源。如果罗列资源发生报错，也有可能导致namespace卡主Terminating状态，常见于聚合层扩展kubernetes api。</p><ol><li>查看是namespace 卡住Terminating的原因<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">$ kubectl <span class="hljs-keyword">get</span> namespace &lt;name&gt; -o yaml<br>conditions:<br>  - lastTransitionTime: <span class="hljs-string">&quot;2021-03-12T12:46:17Z&quot;</span><br>    message: <span class="hljs-comment">&#x27;Discovery failed for some groups, 1 failing: unable to retrieve the</span><br>      complete list of <span class="hljs-built_in">server</span> APIs: webhook.cert-manager.io/v1beta1: the <span class="hljs-built_in">server</span> <span class="hljs-keyword">is</span><br>      currently unable <span class="hljs-keyword">to</span> handle the <span class="hljs-built_in">request</span><span class="hljs-comment">&#x27;</span><br>    reason: DiscoveryFailed<br>    status: <span class="hljs-string">&quot;True&quot;</span><br>    type: NamespaceDeletionDiscoveryFailure<br></code></pre></td></tr></table></figure></li><li>查看apiservice的状态<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso">➜  fb git:(master) kubectl get apiservice<br>NAME                                   SERVICE                           AVAILABLE   AGE<br>v1.                                    <span class="hljs-built_in">Local</span>                             <span class="hljs-literal">True</span>        <span class="hljs-number">484</span>d<br>v1.admissionregistration.k8s.io        <span class="hljs-built_in">Local</span>                             <span class="hljs-literal">True</span>        <span class="hljs-number">484</span>d<br>v1.apiextensions.k8s.io                <span class="hljs-built_in">Local</span>                             <span class="hljs-literal">True</span>        <span class="hljs-number">484</span>d<br>v1.apps                                <span class="hljs-built_in">Local</span>                             <span class="hljs-literal">True</span>        <span class="hljs-number">484</span>d<br>v1.authentication.k8s.io               <span class="hljs-built_in">Local</span>                             <span class="hljs-literal">True</span>        <span class="hljs-number">484</span>d<br><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure></li><li>将异常的apiservice状态恢复成True或者删除不需要的apiservice，即可恢复</li></ol><p>参考文献：</p><p><a href="https://cloud.tencent.com/developer/article/1802531">https://cloud.tencent.com/developer/article/1802531</a><br><a href="https://cloud.tencent.com/developer/article/1678604">https://cloud.tencent.com/developer/article/1678604</a><br><a href="https://medium.com/%E8%BC%95%E9%AC%86%E5%B0%8F%E5%93%81-pks%E8%88%87k8s%E7%9A%84%E9%BB%9E%E6%BB%B4/%E7%A7%BB%E9%99%A4%E8%A9%B2%E6%AD%BB%E7%9A%84terminating-namespace-c6594ebe351">https://medium.com/%E8%BC%95%E9%AC%86%E5%B0%8F%E5%93%81-pks%E8%88%87k8s%E7%9A%84%E9%BB%9E%E6%BB%B4/%E7%A7%BB%E9%99%A4%E8%A9%B2%E6%AD%BB%E7%9A%84terminating-namespace-c6594ebe351</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么删除ns会出现Terminating的情况&quot;&gt;&lt;a href=&quot;#为什么删除ns会出现Terminating的情况&quot; class=&quot;headerlink&quot; title=&quot;为什么删除ns会出现Terminating的情况&quot;&gt;&lt;/a&gt;为什么删除ns会出现Term</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Update From 3.5 to 5.4</title>
    <link href="http://www.leiyawu.com/2021/04/24/Hexo%20Update%20From%203.5%20to%205.4/"/>
    <id>http://www.leiyawu.com/2021/04/24/Hexo%20Update%20From%203.5%20to%205.4/</id>
    <published>2021-04-24T02:13:00.000Z</published>
    <updated>2021-08-03T03:56:47.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>NexT 主题由之前的 5.1.x 更新至 7.x.</li><li>主仓库从 <a href="https://github.com/iissnan/hexo-theme-next">iissnan</a> 迁移至 <a href="https://github.com/theme-next">theme-next</a> 组织下.</li><li>从 v6.0.3 版本起，zh-Hans 改名为 zh-CN：<a href="https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3</a><br>升级到 v6.0.3 及以后版本的用户，需要显式修改 Hexo 主配置文件 _config.yml 里的 language 配置，否则语言显示不正确。</li></ul><h2 id="update-method"><a href="#update-method" class="headerlink" title="update method"></a>update method</h2><p>Hexo Version Update can through the npm tool to achieve</p><h3 id="update-Hexo-Version"><a href="#update-Hexo-Version" class="headerlink" title="update Hexo Version"></a>update Hexo Version</h3><html><font color=#A52A2A size=3 >Notice: update under the hexo init 仓库下</font></html>.<h4 id="1、Check-the-New-Hexo-Version"><a href="#1、Check-the-New-Hexo-Version" class="headerlink" title="1、Check the New Hexo Version"></a>1、Check the New Hexo Version</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">➜  init hexo version<br><span class="hljs-symbol">hexo:</span> <span class="hljs-number">3.5</span><span class="hljs-number">.0</span><br>hexo-<span class="hljs-keyword">cli</span>: <span class="hljs-number">4.2</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">os:</span> Linux <span class="hljs-number">4.18</span><span class="hljs-number">.16</span><span class="hljs-number">-1.</span>el7.elrepo.x86_64 linux x64<br><span class="hljs-symbol">node:</span> <span class="hljs-number">15.5</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">v8:</span> <span class="hljs-number">8.6</span><span class="hljs-number">.395</span><span class="hljs-number">.17</span>-node<span class="hljs-number">.23</span><br><span class="hljs-symbol">uv:</span> <span class="hljs-number">1.40</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">zlib:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.11</span><br><span class="hljs-symbol">brotli:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.9</span><br><span class="hljs-symbol">ares:</span> <span class="hljs-number">1.17</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">modules:</span> <span class="hljs-number">88</span><br><span class="hljs-symbol">nghttp2:</span> <span class="hljs-number">1.41</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">napi:</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">llhttp:</span> <span class="hljs-number">2.1</span><span class="hljs-number">.3</span><br><span class="hljs-symbol">openssl:</span> <span class="hljs-number">1.1</span><span class="hljs-number">.1</span>i<br><span class="hljs-symbol">cldr:</span> <span class="hljs-number">38.0</span><br><span class="hljs-symbol">icu:</span> <span class="hljs-number">68.1</span><br><span class="hljs-symbol">tz:</span> <span class="hljs-number">2020</span>b<br><span class="hljs-symbol">unicode:</span> <span class="hljs-number">13.0</span><br></code></pre></td></tr></table></figure><h4 id="2、Global-Update-hexo-cli"><a href="#2、Global-Update-hexo-cli" class="headerlink" title="2、Global Update hexo-cli"></a>2、Global Update hexo-cli</h4><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">➜  init npm install hexo-cli -g<br><br>changed<span class="hljs-number"> 22 </span>packages, and audited<span class="hljs-number"> 59 </span>packages in 5s<br><br>11 packages are looking for funding<br>  run `npm fund` for details<br><br>found<span class="hljs-number"> 0 </span>vulnerabilities<br></code></pre></td></tr></table></figure><h4 id="3、检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件"><a href="#3、检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件" class="headerlink" title="3、检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件"></a>3、检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">➜  init <span class="hljs-built_in">npm</span> install -g <span class="hljs-built_in">npm</span>-check<br>➜  init <span class="hljs-built_in">npm</span>-check               <br></code></pre></td></tr></table></figure><h4 id="4、升级系统中的插件"><a href="#4、升级系统中的插件" class="headerlink" title="4、升级系统中的插件"></a>4、升级系统中的插件</h4><figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs parser3"><span class="xml">➜  init npm install -g npm-upgrade</span><br><span class="xml">npm WARN deprecated uuid@</span><span class="hljs-number">3.4</span><span class="hljs-number">.0</span><span class="xml">: Please upgrade  to version </span><span class="hljs-number">7</span><span class="xml"> or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.</span><br><span class="xml">npm WARN deprecated har-validator@</span><span class="hljs-number">5.1</span><span class="hljs-number">.5</span><span class="xml">: this library is no longer supported</span><br><span class="xml">npm WARN deprecated request@</span><span class="hljs-number">2.88</span><span class="hljs-number">.2</span><span class="xml">: request has been deprecated, see https://github.com/request/request/issues/</span><span class="hljs-number">3142</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">added </span><span class="hljs-number">369</span><span class="xml"> packages, and audited </span><span class="hljs-number">370</span><span class="xml"> packages in </span><span class="hljs-number">1</span><span class="xml">m</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-number">42</span><span class="xml"> packages are looking for funding</span><br><span class="xml">  run `npm fund` for details</span><br><span class="xml"></span><br><span class="xml">found </span><span class="hljs-number">0</span><span class="xml"> vulnerabilities</span><br><span class="xml">➜  init </span><br><span class="xml">➜  init npm-upgrade               </span><br><span class="xml">Checking for outdated dependencies for &quot;/data/martin/martinsev/wwwroot/init/package.json&quot;...</span><br><span class="xml">[====================] </span><span class="hljs-number">15</span><span class="xml">/</span><span class="hljs-number">15</span><span class="xml"> </span><span class="hljs-number">100</span><span class="xml">%</span><br><span class="xml"></span><br><span class="xml">New versions of active modules available:</span><br><span class="xml">  hexo                      </span><span class="hljs-keyword">^3.2.0</span><span class="xml">   →   </span><span class="hljs-keyword">^5.4.0</span><span class="xml"> </span><br><span class="xml">  hexo-deployer-git         </span><span class="hljs-keyword">^0.3.1</span><span class="xml">   →   </span><span class="hljs-keyword">^3.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-fs                   </span><span class="hljs-keyword">^0.2.2</span><span class="xml">   →   </span><span class="hljs-keyword">^3.1.0</span><span class="xml"> </span><br><span class="xml">  hexo-generator-archive    </span><span class="hljs-keyword">^0.1.4</span><span class="xml">   →   </span><span class="hljs-keyword">^1.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-generator-category   </span><span class="hljs-keyword">^0.1.3</span><span class="xml">   →   </span><span class="hljs-keyword">^1.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-generator-feed       </span><span class="hljs-keyword">^1.2.2</span><span class="xml">   →   </span><span class="hljs-keyword">^3.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-generator-index      </span><span class="hljs-keyword">^0.2.0</span><span class="xml">   →   </span><span class="hljs-keyword">^2.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-generator-searchdb   </span><span class="hljs-keyword">^1.0.8</span><span class="xml">   →   </span><span class="hljs-keyword">^1.3.4</span><span class="xml"> </span><br><span class="xml">  hexo-generator-sitemap    </span><span class="hljs-keyword">^1.2.0</span><span class="xml">   →   </span><span class="hljs-keyword">^2.1.0</span><span class="xml"> </span><br><span class="xml">  hexo-generator-tag        </span><span class="hljs-keyword">^0.2.0</span><span class="xml">   →   </span><span class="hljs-keyword">^1.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-renderer-ejs         </span><span class="hljs-keyword">^0.3.0</span><span class="xml">   →   </span><span class="hljs-keyword">^1.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-renderer-marked      </span><span class="hljs-keyword">^0.3.0</span><span class="xml">   →   </span><span class="hljs-keyword">^4.0.0</span><span class="xml"> </span><br><span class="xml">  hexo-renderer-stylus      </span><span class="hljs-keyword">^0.3.1</span><span class="xml">   →   </span><span class="hljs-keyword">^2.0.1</span><span class="xml"> </span><br><span class="xml">  hexo-server               </span><span class="hljs-keyword">^0.2.0</span><span class="xml">   →   </span><span class="hljs-keyword">^2.0.0</span><span class="xml"> </span><br><span class="xml"></span><br><span class="xml">? Update &quot;hexo&quot; in package.json from </span><span class="hljs-keyword">^3.2.0</span><span class="xml"> to </span><span class="hljs-keyword">^5.4.0</span><span class="xml">? Yes</span><br><span class="xml">? Update &quot;hexo-deployer-git&quot; in package.json from </span><span class="hljs-keyword">^0.3.1</span><span class="xml"> to </span><span class="hljs-keyword">^3.0.0</span><span class="xml">? Finish update process</span><br><span class="xml"></span><br><span class="xml">These packages will be updated:</span><br><span class="xml">  hexo   </span><span class="hljs-keyword">^3.2.0</span><span class="xml">   →   </span><span class="hljs-keyword">^5.4.0</span><span class="xml"> </span><br><span class="xml">? Update package.json? Yes</span><br><span class="xml"></span><br><span class="xml">➜  init npm-upgrade      </span><br><span class="xml">Checking for outdated dependencies for &quot;/data/martin/martinsev/wwwroot/init/package.json&quot;...</span><br><span class="xml">[====================] </span><span class="hljs-number">15</span><span class="xml">/</span><span class="hljs-number">15</span><span class="xml"> </span><span class="hljs-number">100</span><span class="xml">%</span><br><span class="xml">All dependencies are up-to-date!</span><br></code></pre></td></tr></table></figure><h4 id="5、更新全局包"><a href="#5、更新全局包" class="headerlink" title="5、更新全局包"></a>5、更新全局包</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  init npm <span class="hljs-keyword">update</span> -g<br>up <span class="hljs-keyword">to</span> <span class="hljs-type">date</span>, audited <span class="hljs-number">1</span> package <span class="hljs-keyword">in</span> <span class="hljs-number">184</span>ms<br><span class="hljs-built_in">found</span> <span class="hljs-number">0</span> vulnerabilities<br></code></pre></td></tr></table></figure><h4 id="6、更新生产环境依赖包"><a href="#6、更新生产环境依赖包" class="headerlink" title="6、更新生产环境依赖包"></a>6、更新生产环境依赖包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  init npm update --save<br>npm WARN deprecated urix@<span class="hljs-number">0.1</span>.<span class="hljs-number">0</span>: Please see https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lydell/u</span>rix<span class="hljs-comment">#deprecated</span><br>npm WARN deprecated resolve-url@<span class="hljs-number">0.2</span>.<span class="hljs-number">1</span>: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lydell/</span>resolve-url<span class="hljs-comment">#deprecated</span><br>...<br>...<br><br></code></pre></td></tr></table></figure><h4 id="7、Check-the-New-Hexo-Version"><a href="#7、Check-the-New-Hexo-Version" class="headerlink" title="7、Check the New Hexo Version"></a>7、Check the New Hexo Version</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  init hexo v<br>INFO  Validating config<br>WARN  Deprecated config detected: <span class="hljs-string">&quot;external_link&quot;</span> with a Boolean value is deprecated. See https:<span class="hljs-comment">//hexo.io/docs/configuration for more details.</span><br><span class="hljs-symbol">hexo:</span> <span class="hljs-number">5.4</span><span class="hljs-number">.0</span>  <span class="hljs-meta">#New Updated Version</span><br>hexo-cli: <span class="hljs-number">4.3</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">os:</span> linux <span class="hljs-number">4.18</span><span class="hljs-number">.16</span><span class="hljs-number">-1.</span>el7.elrepo.x86_64 CentOS Linux <span class="hljs-number">7</span> (Core)<br><span class="hljs-symbol">node:</span> <span class="hljs-number">15.5</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">v8:</span> <span class="hljs-number">8.6</span><span class="hljs-number">.395</span><span class="hljs-number">.17</span>-node<span class="hljs-number">.23</span><br><span class="hljs-symbol">uv:</span> <span class="hljs-number">1.40</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">zlib:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.11</span><br><span class="hljs-symbol">brotli:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.9</span><br><span class="hljs-symbol">ares:</span> <span class="hljs-number">1.17</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">modules:</span> <span class="hljs-number">88</span><br><span class="hljs-symbol">nghttp2:</span> <span class="hljs-number">1.41</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">napi:</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">llhttp:</span> <span class="hljs-number">2.1</span><span class="hljs-number">.3</span><br><span class="hljs-symbol">openssl:</span> <span class="hljs-number">1.1</span><span class="hljs-number">.1</span>i<br><span class="hljs-symbol">cldr:</span> <span class="hljs-number">38.0</span><br><span class="hljs-symbol">icu:</span> <span class="hljs-number">68.1</span><br><span class="hljs-symbol">tz:</span> <span class="hljs-number">2020</span>b<br><span class="hljs-symbol">unicode:</span> <span class="hljs-number">13.0</span><br></code></pre></td></tr></table></figure><h4 id="8、Check-the-Package-json"><a href="#8、Check-the-Package-json" class="headerlink" title="8、Check the Package.json"></a>8、Check the Package.json</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gradle">➜  init cat <span class="hljs-regexp">/data/m</span>artin<span class="hljs-regexp">/martinsev/</span>wwwroot<span class="hljs-regexp">/init/</span><span class="hljs-keyword">package</span>.json   <br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hexo-site&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;private&quot;</span>: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-string">&quot;hexo&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;5.4.0&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;hexo&quot;</span>: <span class="hljs-string">&quot;^5.4.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-admin&quot;</span>: <span class="hljs-string">&quot;^2.3.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-deployer-git&quot;</span>: <span class="hljs-string">&quot;^3.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-fs&quot;</span>: <span class="hljs-string">&quot;^3.1.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-archive&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-category&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-feed&quot;</span>: <span class="hljs-string">&quot;^3.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-index&quot;</span>: <span class="hljs-string">&quot;^2.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-searchdb&quot;</span>: <span class="hljs-string">&quot;^1.3.4&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-sitemap&quot;</span>: <span class="hljs-string">&quot;^2.1.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-tag&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-renderer-ejs&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-renderer-marked&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-renderer-stylus&quot;</span>: <span class="hljs-string">&quot;^2.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-server&quot;</span>: <span class="hljs-string">&quot;^2.0.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="update-Hexo-Themes"><a href="#update-Hexo-Themes" class="headerlink" title="update Hexo Themes:"></a>update Hexo Themes:</h3><h4 id="1、backup-old-hexo仓库"><a href="#1、backup-old-hexo仓库" class="headerlink" title="1、backup old hexo仓库."></a>1、backup old hexo仓库.</h4><ul><li>public</li><li>config yml</li></ul><h4 id="2、Init-new-hexo仓库"><a href="#2、Init-new-hexo仓库" class="headerlink" title="2、Init new hexo仓库."></a>2、Init new hexo仓库.</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  wwwroot hexo init leiyawu<br><span class="hljs-keyword">INFO</span>  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br><span class="hljs-keyword">INFO</span>  Install dependencies<br>npm <span class="hljs-keyword">notice</span> <br>  m <span class="hljs-keyword">notice</span> <span class="hljs-built_in">New</span> minor <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> npm available! <span class="hljs-number">7.3</span><span class="hljs-number">.0</span> -&gt; <span class="hljs-number">7.20</span><span class="hljs-number">.3</span><br>▽pm <span class="hljs-keyword">notice</span> Changelog: https://github.com/npm/cli/releases/tag/v7<span class="hljs-number">.20</span><span class="hljs-number">.3</span><br>npm <span class="hljs-keyword">notice</span> Run npm install -g npm@<span class="hljs-number">7.20</span><span class="hljs-number">.3</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span>!<br>npm <span class="hljs-keyword">notice</span> <br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo!<br></code></pre></td></tr></table></figure><h4 id="3、cp-old-to-new-仓库"><a href="#3、cp-old-to-new-仓库" class="headerlink" title="3、cp old to new 仓库."></a>3、cp old to new 仓库.</h4><ul><li>将备份的静态文件目录:public拷贝至新的仓库下</li><li>对比旧版本的_config.yml. 修改新版的_config.yml配置</li></ul><h4 id="4、git-clone-theme-to-任一异于next的目录"><a href="#4、git-clone-theme-to-任一异于next的目录" class="headerlink" title="4、git clone theme to 任一异于next的目录."></a>4、git clone theme to 任一异于next的目录.</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  themes pwd<br><span class="hljs-regexp">/data/m</span>artin<span class="hljs-regexp">/martinsev/</span>wwwroot<span class="hljs-regexp">/init/</span>themes<br>➜  themes git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git fluid<br></code></pre></td></tr></table></figure><h4 id="5、在-Hexo-config-yml主文件中设置主题"><a href="#5、在-Hexo-config-yml主文件中设置主题" class="headerlink" title="5、在 Hexo _config.yml主文件中设置主题."></a>5、在 Hexo _config.yml主文件中设置主题.</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span> <span class="hljs-keyword">next</span>-reloaded<br></code></pre></td></tr></table></figure><h4 id="6、生成静态文件并发布"><a href="#6、生成静态文件并发布" class="headerlink" title="6、生成静态文件并发布."></a>6、生成静态文件并发布.</h4><ul><li>执行：hexo g -d重新生成静态目录：</li><li>hexo clean: 清空现有public缓存以及静态文件，慎用(注意backup and Do not use it until a critical moment).<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  init hexo clean<br><span class="hljs-keyword">INFO</span>  Deleted <span class="hljs-keyword">database</span>.<br><span class="hljs-keyword">INFO</span>  Deleted <span class="hljs-built_in">public</span> folder.<br>➜  init hexo g -d<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Files loaded <span class="hljs-keyword">in</span> <span class="hljs-number">3.62</span> s<br>(node:<span class="hljs-number">350113</span>) <span class="hljs-built_in">Warning</span>: Accessing non-existent property <span class="hljs-string">&#x27;lineno&#x27;</span> <span class="hljs-keyword">of</span> module exports inside circular dependency<br></code></pre></td></tr></table></figure></li><li>通过nginx指向public，进行访问</li></ul><h3 id="常见报错："><a href="#常见报错：" class="headerlink" title="常见报错："></a>常见报错：</h3><ul><li>Error1:</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">ssh: connect to host github.com port <span class="hljs-number">22</span>: Connection timed out<br>fatal: Could not <span class="hljs-keyword">read</span> from remote repository.<br><br>Please make sure you have the correct access rights<br><span class="hljs-keyword">and</span> the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html<br>Error<br>    at ChildProcess.<span class="hljs-tag">&lt;anonymous&gt;</span> (/data/martin/martinsev/wwwroot/init/node_modules/hexo-util/lib/spawn.js:<span class="hljs-number">37</span>:<span class="hljs-number">17</span>)<br>    at ChildProcess.emit (<span class="hljs-keyword">node</span><span class="hljs-title">:events</span>:<span class="hljs-number">376</span>:<span class="hljs-number">20</span>)<br>    at maybeClose (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/child_process:<span class="hljs-number">1063</span>:<span class="hljs-number">16</span>)<br>    at Process.ChildProcess._handle.onexit (<span class="hljs-keyword">node</span><span class="hljs-title">:internal</span>/child_process:<span class="hljs-number">295</span>:<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>解决方法： 打开主机ssh port.</p><ul><li>Error2:</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Permission denied (publickey).<br>fatal: Could not <span class="hljs-keyword">read</span> <span class="hljs-keyword">from</span> remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL &#123;<br>  err: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (<span class="hljs-regexp">/data/m</span>artin<span class="hljs-regexp">/martinsev/</span>wwwroot<span class="hljs-regexp">/leiyawu/</span>node_modules<span class="hljs-regexp">/hexo-util/</span>lib/spawn.js:<span class="hljs-number">51</span>:<span class="hljs-number">21</span>)<br>      at ChildProcess.emit (node:events:<span class="hljs-number">376</span>:<span class="hljs-number">20</span>)<br>      at Process.ChildProcess._handle.onexit (node:internal/child_process:<span class="hljs-number">284</span>:<span class="hljs-number">12</span>) &#123;<br>    code: <span class="hljs-number">128</span><br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><p>因_config.yml的deploy中配置了git仓库同步，而git仓库无法访问，故报错.</p><p>解决方法： 将主机公钥添加进github中.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;NexT 主题由之前的 5.1.x 更新至 7.x.&lt;/li&gt;
&lt;li&gt;主仓库从 &lt;a href=&quot;https://github</summary>
      
    
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Helm Hooks Usage</title>
    <link href="http://www.leiyawu.com/2021/02/18/as/"/>
    <id>http://www.leiyawu.com/2021/02/18/as/</id>
    <published>2021-02-18T03:36:00.000Z</published>
    <updated>2021-08-11T03:37:52.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Helm-Hooks"><a href="#Helm-Hooks" class="headerlink" title="Helm Hooks"></a>Helm Hooks</h3><p>和 Kubernetes 里面的容器一样，Helm 也提供了 Hook 的机制，允许 chart 开发人员在 release 的生命周期中的某些节点来进行干预，比如可以利用 Hooks 来做下面的这些事情：</p><ul><li>在加载任何其他 chart 之前，在安装过程中加载 ConfigMap 或 Secret</li><li>在安装新 chart 之前执行作业以备份数据库，然后在升级后执行第二个作业以恢复数据</li><li>在删除 release 之前运行作业，以便在删除 release 之前优雅地停止服务</li></ul><p>值得注意的是 Hooks 和普通模板一样工作，但是它们具有特殊的注释，可以使 Helm 以不同的方式使用它们。</p><p>Hook 在资源清单中的 metadata 部分用 annotations 的方式进行声明：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> ...<br><span class="hljs-symbol">kind:</span> ....<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    <span class="hljs-string">&quot;helm.sh/hook&quot;</span>: <span class="hljs-string">&quot;pre-install&quot;</span><br><span class="hljs-meta"># ...</span><br></code></pre></td></tr></table></figure><h3 id="Helm-Hooks-的一些基本使用方法"><a href="#Helm-Hooks-的一些基本使用方法" class="headerlink" title="Helm Hooks 的一些基本使用方法"></a>Helm Hooks 的一些基本使用方法</h3><p>在 Helm 中定义如下一些可供使用的 Hooks：</p><ul><li>预安装pre-install：在模板渲染后，kubernetes 创建任何资源之前执行</li><li>安装后post-install：在所有 kubernetes 资源安装到集群后执行</li><li>预删除pre-delete：在从 kubernetes 删除任何资源之前执行删除请求</li><li>删除后post-delete：删除所有 release 的资源后执行 #rancher uninstall|del</li><li>升级前pre-upgrade：在模板渲染后，但在任何资源升级之前执行</li><li>升级后post-upgrade：在所有资源升级后执行</li><li>预回滚pre-rollback：在模板渲染后，在任何资源回滚之前执行</li><li>回滚后post-rollback：在修改所有资源后执行回滚请求</li><li>crd-install：在运行其他检查之前添加 CRD 资源，只能用于 chart 中其他的资源清单定义的 CRD 资源。</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Hooks 允许开发人员在 release 的生命周期中的一些关键节点执行一些钩子函数，正常安装一个 chart 包的时候的生命周期如下所示：</p><ol><li>用户运行helm install foo</li><li>chart 被加载到服务端 Tiller Server 中</li><li>经过一些验证，Tiller Server 渲染 foo 模板</li><li>Tiller 将产生的资源加载到 kubernetes 中去</li><li>Tiller 将 release 名称和其他数据返回给 Helm 客户端</li><li>Helm 客户端退出</li></ol><p>如果开发人员在 install 的生命周期中定义了两个 hook：pre-install和post-install，那么安装一个 chart 包的生命周期就会多一些步骤了：</p><ol><li>用户运行helm install foo</li><li>chart 被加载到服务端 Tiller Server 中</li><li>经过一些验证，Tiller Server 渲染 foo 模板</li><li>Tiller 将 hook 资源加载到 kubernetes 中，准备执行pre-install hook</li><li>Tiller 会根据权重对 hook 进行排序（默认分配权重0，权重相同的 hook 按升序排序）</li><li>Tiller 然后加载最低权重的 hook</li><li>Tiller 等待，直到 hook 准备就绪</li><li>Tiller 将产生的资源加载到 kubernetes 中</li><li>Tiller 执行post-install hook</li><li>Tiller 等待，直到 hook 准备就绪</li><li>Tiller 将 release 名称和其他数据返回给客户端</li><li>Helm 客户端退出</li></ol><p>等待 hook 准备就绪，这是一个阻塞的操作，如果 hook 中声明的是一个 Job 资源，那么 Tiller 将等待 Job 成功完成，如果失败，则发布失败，在这个期间，Helm 客户端是处于暂停状态的。</p><p>对于所有其他类型，只要 kubernetes 将资源标记为加载（添加或更新），资源就被视为就绪状态，当一个 hook 声明了很多资源是，这些资源是被串行执行的。</p><p>另外需要注意的是 hook 创建的资源不会作为 release 的一部分进行跟踪和管理，一旦 Tiller Server 验证了 hook 已经达到了就绪状态，它就不会去管它了。</p><p>所以，如果在 hook 中创建了资源，那么不能依赖helm delete去删除资源，因为 hook 创建的资源已经不受控制了，要销毁这些资源，需要在pre-delete或者post-delete这两个 hook 函数中去执行相关操作，或者将 helm.sh/hook-delete-policy 这个 annotation 添加到 hook 模板文件中。</p><h3 id="写一个-hook"><a href="#写一个-hook" class="headerlink" title="写一个 hook"></a>写一个 hook</h3><p>hook 和普通模板一样，也可以使用普通的模板函数和常用的一些对象，比如Values、Chart、Release等等，唯一和普通模板不太一样的地方就是在资源清单文件中的 metadata 部分会有一些特殊的注释 annotation。</p><p>例如，创建一个 hook，在前面的示例 templates 目录中添加一个 post-install-job.yaml 的文件，表示安装后执行的一个 hook：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> &#123;&#123; .Release.Name &#125;&#125;-post-install-job<br><span class="hljs-symbol">  lables:</span><br><span class="hljs-symbol">    release:</span> &#123;&#123; .Release.Name &#125;&#125;<br><span class="hljs-symbol">    chart:</span> &#123;&#123; .Chart.Name &#125;&#125;<br><span class="hljs-symbol">    version:</span> &#123;&#123; .Chart.Version &#125;&#125;<br><span class="hljs-symbol">  annotations:</span><br>    <span class="hljs-meta"># 注意，如果没有下面的这个注释的话，当前的这个Job就会被当成release的一部分</span><br>    <span class="hljs-string">&quot;helm.sh/hook&quot;</span>: post-install<br>    <span class="hljs-string">&quot;helm.sh/hook-weight&quot;</span>: <span class="hljs-string">&quot;-5&quot;</span><br>    <span class="hljs-string">&quot;helm.sh/hook-delete-policy&quot;</span>: hook-succeeded<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> &#123;&#123; .Release.Name &#125;&#125;<br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        release:</span> &#123;&#123; .Release.Name &#125;&#125;<br><span class="hljs-symbol">        chart:</span> &#123;&#123; .Chart.Name &#125;&#125;<br><span class="hljs-symbol">        version:</span> &#123;&#123; .Chart.Version &#125;&#125;<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      restartPolicy:</span> Never<br><span class="hljs-symbol">      containers:</span><br>      - name: post-install-job<br><span class="hljs-symbol">        image:</span> alpine<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">&quot;/bin/sleep&quot;</span>, <span class="hljs-string">&quot;&#123;&#123; default &quot;</span><span class="hljs-number">10</span><span class="hljs-string">&quot; .Values.sleepTime &#125;&#125;&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>上面的 Job 资源中添加一个 annotations，要注意的是，如果没有添加下面这行注释的话，这个资源就会被当成是 release 的一部分资源：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">annotations:</span><br>  <span class="hljs-string">&quot;helm.sh/hook&quot;</span>: post-install<br></code></pre></td></tr></table></figure><p>当然一个资源中也可以同时部署多个 hook，比如还可以添加一个post-upgrade的钩子：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">annotations:<br>  <span class="hljs-string">&quot;helm.sh/hook&quot;</span>: <span class="hljs-built_in">post</span>-install,<span class="hljs-built_in">post</span>-upgrade<br></code></pre></td></tr></table></figure><p>另外值得注意的是为 hook 定义了一个权重，这有助于建立一个确定性的执行顺序，权重可以是正数也可以是负数，但是必须是字符串才行。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">annotations:</span><br>  <span class="hljs-string">&quot;helm.sh/hook-weight&quot;</span>: <span class="hljs-string">&quot;-5&quot;</span><br></code></pre></td></tr></table></figure><p>最后还添加了一个删除 hook 资源的策略：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">annotations:</span><br>  <span class="hljs-string">&quot;helm.sh/hook-delete-policy&quot;</span>: hook-succeeded<br></code></pre></td></tr></table></figure><p>删除资源的策略可供选择的注释值：</p><ul><li>hook-succeeded：表示 Tiller 在 hook 成功执行后删除 hook 资源</li><li>hook-failed：表示如果 hook 在执行期间失败了，Tiller 应该删除 hook 资源</li><li>before-hook-creation：表示在删除新的 hook 之前应该删除以前的 hook</li></ul><p>当 helm 的 release 更新时，有可能 hook 资源已经存在于群集中。默认情况下，helm 会尝试创建资源，并抛出错误”… already exists”。</p><p>可以选择 “helm.sh/hook-delete-policy”: “before-hook-creation”，取代 “helm.sh/hook-delete-policy”: “hook-succeeded,hook-failed” </p><p>因为：例如为了手动调试，将错误的 hook 作业资源保存在 kubernetes 中是很方便的。 出于某种原因，可能有必要将成功的 hook 资源保留在 kubernetes 中。</p><p>同时，在 helm release 升级之前进行手动资源删除是不可取的。 “helm.sh/hook-delete-policy”: “before-hook-creation” 在 hook 中的注释，如果在新的 hook 启动前有一个 hook 的话，会使 Tiller 将以前的release 中的 hook 删除，而这个 hook 同时它可能正在被其他一个策略使用。</p><p>参考文献：<br><a href="https://blog.csdn.net/BigData_Mining/article/details/97368032">https://blog.csdn.net/BigData_Mining/article/details/97368032</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Helm-Hooks&quot;&gt;&lt;a href=&quot;#Helm-Hooks&quot; class=&quot;headerlink&quot; title=&quot;Helm Hooks&quot;&gt;&lt;/a&gt;Helm Hooks&lt;/h3&gt;&lt;p&gt;和 Kubernetes 里面的容器一样，Helm 也提供了 Hook 的机</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubelet 证书自动续期</title>
    <link href="http://www.leiyawu.com/2020/10/11/Untitled/"/>
    <id>http://www.leiyawu.com/2020/10/11/Untitled/</id>
    <published>2020-10-11T09:20:00.000Z</published>
    <updated>2021-08-13T07:25:00.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题现象和原因"><a href="#一、问题现象和原因" class="headerlink" title="一、问题现象和原因"></a>一、问题现象和原因</h3><h4 id="Kubernetes-日志错误"><a href="#Kubernetes-日志错误" class="headerlink" title="Kubernetes 日志错误"></a>Kubernetes 日志错误</h4><p>当 Kubernetes 集群日志中出现 certificate has expired or is not yet valid 错误信息时，表明证书过期</p><h4 id="证书过期原因"><a href="#证书过期原因" class="headerlink" title="证书过期原因"></a>证书过期原因</h4><ul><li>服务器时间不对，导致证书过期</li><li>确实证书过期了<br>证书过期，很多同学会很疑惑，我证书明明签署10年有效期或者更久，怎么刚1年就过期了，下面就来解惑。</li></ul><h4 id="Kubernetes-集群证书"><a href="#Kubernetes-集群证书" class="headerlink" title="Kubernetes 集群证书"></a>Kubernetes 集群证书</h4><p>集群分为两种证书：一、用于集群 Master、Etcd等通信的证书。二、用于集群 Kubelet 组件证书</p><h4 id="Kubernetes-集群中-Kubelet-组件坑"><a href="#Kubernetes-集群中-Kubelet-组件坑" class="headerlink" title="Kubernetes 集群中 Kubelet 组件坑"></a>Kubernetes 集群中 Kubelet 组件坑</h4><p>在搭建 Kubernetes 集群时，一般只声明用于集群 Master、Etcd等通信的证书 为 10年 或者 更久，但未声明集群 Kubelet 组件证书 ，Kubelet 组件证书 默认有效期为1年。</p><p>集群运行1年以后就会导致报 certificate has expired or is not yet valid 错误，导致集群 Node不能和集群 Master正常通信。</p><h3 id="二、-解决方法"><a href="#二、-解决方法" class="headerlink" title="二、 解决方法"></a>二、 解决方法</h3><h4 id="主要细节流程"><a href="#主要细节流程" class="headerlink" title="主要细节流程"></a>主要细节流程</h4><p>kubelet 首次启动通过加载 bootstrap.kubeconfig 中的用户 Token 和 apiserver CA 证书发起首次 CSR 请求，这个 Token 被预先内置在 apiserver 节点的 token.csv 中，其身份为 kubelet-bootstrap 用户和 system:bootstrappers 用户组；想要首次 CSR 请求能成功(成功指的是不会被 apiserver 401 拒绝)，则需要先将 kubelet-bootstrap 用户和 system:node-bootstrapper 内置 ClusterRole 绑定；</p><p>对于首次 CSR 请求可以手动批准，也可以将 system:bootstrappers 用户组与 approve-node-client-csr ClusterRole 绑定实现自动批准(1.8 之前这个 ClusterRole 需要手动创建，1.8 后 apiserver 自动创建，并更名为 system:certificates.k8s.io:certificatesigningrequests:nodeclient)</p><p>默认签署的的证书只有 1 年有效期，如果想要调整证书有效期可以通过设置 kube-controller-manager 的 –experimental-cluster-signing-duration 参数实现，该参数默认值为 8760h0m0s</p><p>对于证书自动续签，需要通过协调两个方面实现：</p><p>第一，想要 kubelet 在证书到期后自动发起续期请求，则需要在 kubelet 启动时增加 –feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true 来实现；</p><p>第二，想要让 controller manager 自动批准续签的 CSR 请求需要在 controller manager 启动时增加–feature-gates=RotateKubeletServerCertificate=true 参数，并绑定对应的 RBAC 规则；同时需要注意的是 1.7 版本的 kubelet 自动续签后需要手动重启 kubelet 以使其重新加载新证书，而 1.8 后只需要在 kublet 启动时附带 –rotate-certificates 选项就会自动重新加载新证书</p><h4 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h4><ul><li>修改 kubelet 组件配置，具体添加下面参数<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">-feature-gates=RotateKubeletServerCertificate=<span class="hljs-literal">true</span></span><br><span class="ruby"></span>-<span class="ruby">-feature-gates=RotateKubeletClientCertificate=<span class="hljs-literal">true</span></span><br><span class="ruby"></span># 1.8版本以上包含1.8都支持证书更换自动重载，以下版本只能手动重启服务<br>-<span class="ruby">-rotate-certificates</span><br></code></pre></td></tr></table></figure></li><li>修改 controller-manager 组件配置，具体添加下面参数<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 证书有效期为10年</span><br><span class="hljs-attr">--experimental-cluster-signing-duration</span>=<span class="hljs-number">87600</span>h0m0s<br><span class="hljs-attr">--feature-gates</span>=RotateKubeletServerCertificate=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="创建自动批准相关-CSR-请求的-ClusterRole"><a href="#创建自动批准相关-CSR-请求的-ClusterRole" class="headerlink" title="创建自动批准相关 CSR 请求的 ClusterRole"></a>创建自动批准相关 CSR 请求的 ClusterRole</h4><ul><li>vim tls-instructs-csr.yaml &amp;&amp; kubectl apply -f tls-instructs-csr.yaml<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">kind: ClusterRole<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadat<span class="hljs-variable">a:</span><br>  name: <span class="hljs-built_in">system</span>:certificates.k8s.io:certificatesigningrequest<span class="hljs-variable">s:selfnodeserver</span><br>rule<span class="hljs-variable">s:</span><br>- apiGroup<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  resource<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-keyword">verb</span><span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure></li><li>自动批准 kubelet-bootstrap 用户 TLS bootstrapping 首次申请证书的 CSR 请求<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding node-client-auto-approve-csr <span class="hljs-attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:nodeclient <span class="hljs-attribute">--user</span>=kubelet-bootstrap<br></code></pre></td></tr></table></figure></li><li>自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> clusterrolebinding node-client-auto-renew-crt --clusterrole=<span class="hljs-keyword">system</span>:certificates.k8s.io:certificatesigningrequests:selfnodeclient --<span class="hljs-keyword">group</span>=<span class="hljs-keyword">system</span>:nodes<br></code></pre></td></tr></table></figure></li><li>自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> clusterrolebinding node-server-auto-renew-crt --clusterrole=<span class="hljs-keyword">system</span>:certificates.k8s.io:certificatesigningrequests:selfnodeserver --<span class="hljs-keyword">group</span>=<span class="hljs-keyword">system</span>:nodes<br></code></pre></td></tr></table></figure><h4 id="重启kube-controller-manager-和-kubelet-服务"><a href="#重启kube-controller-manager-和-kubelet-服务" class="headerlink" title="重启kube-controller-manager 和 kubelet 服务"></a>重启kube-controller-manager 和 kubelet 服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> systemctl restart kube<span class="hljs-literal">-controller</span><span class="hljs-literal">-manager</span><br><br><span class="hljs-comment"># 进入到ssl配置目录，删除 kubelet 证书</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> kubelet<span class="hljs-literal">-client</span><span class="hljs-literal">-current</span>.pem kubelet<span class="hljs-literal">-client</span><span class="hljs-literal">-2019</span><span class="hljs-literal">-05</span><span class="hljs-literal">-10</span><span class="hljs-literal">-09</span><span class="hljs-literal">-57</span><span class="hljs-literal">-21</span>.pem kubelet.key kubelet.crt<br><br><span class="hljs-comment"># 重启启动，启动正常后会颁发有效期10年的ssl证书</span><br><span class="hljs-variable">$</span> systemctl restart kubelet<br><br><br><span class="hljs-comment"># 进入到ssl配置目录，查看证书有效期</span><br><span class="hljs-variable">$</span> openssl x509 <span class="hljs-operator">-in</span> kubelet<span class="hljs-literal">-client</span><span class="hljs-literal">-current</span>.pem <span class="hljs-literal">-noout</span> <span class="hljs-literal">-text</span> | grep <span class="hljs-string">&quot;Not&quot;</span><br><br>Not Before: May <span class="hljs-number">13</span> <span class="hljs-number">02</span>:<span class="hljs-number">36</span>:<span class="hljs-number">00</span> <span class="hljs-number">2019</span> GMT<br>Not After : May <span class="hljs-number">10</span> <span class="hljs-number">02</span>:<span class="hljs-number">36</span>:<span class="hljs-number">00</span> <span class="hljs-number">2029</span> GMT<br></code></pre></td></tr></table></figure></li></ul><h4 id="证书及配置文件作用"><a href="#证书及配置文件作用" class="headerlink" title="证书及配置文件作用"></a>证书及配置文件作用</h4><ul><li>token.csv</li></ul><p>该文件为一个用户的描述文件，基本格式为 Token,用户名,UID,用户组；这个文件在 apiserver 启动时被 apiserver 加载，然后就相当于在集群内创建了一个这个用户；接下来就可以用 RBAC 给他授权；持有这个用户 Token 的组件访问 apiserver 的时候，apiserver 根据 RBAC 定义的该用户应当具有的权限来处理相应请求</p><ul><li>bootstarp.kubeconfig</li></ul><p>该文件中内置了 token.csv 中用户的 Token，以及 apiserver CA 证书；kubelet 首次启动会加载此文件，使用 apiserver CA 证书建立与 apiserver 的 TLS 通讯，使用其中的用户 Token 作为身份标识像 apiserver 发起 CSR 请求</p><ul><li>kubelet-client.crt</li></ul><p>该文件在 kubelet 完成 TLS bootstrapping 后生成，此证书是由 controller manager 签署的，此后 kubelet 将会加载该证书，用于与 apiserver 建立 TLS 通讯，同时使用该证书的 CN 字段作为用户名，O 字段作为用户组向 apiserver 发起其他请求</p><ul><li>kubelet.crt</li></ul><p>该文件在 kubelet 完成 TLS bootstrapping 后并且没有配置 –feature-gates=RotateKubeletServerCertificate=true 时才会生成；这种情况下该文件为一个独立于 apiserver CA 的自签 CA 证书，有效期为 1 年；被用作 kubelet 10250 api 端口</p><ul><li>kubelet-server.crt</li></ul><p>该文件在 kubelet 完成 TLS bootstrapping 后并且配置了 –feature-gates=RotateKubeletServerCertificate=true 时才会生成；这种情况下该证书由 apiserver CA 签署，默认有效期同样是 1 年，被用作 kubelet 10250 api 端口鉴权</p><ul><li>kubelet-client-current.pem</li></ul><p>这是一个软连接文件，当 kubelet 配置了 –feature-gates=RotateKubeletClientCertificate=true 选项后，会在证书总有效期的 70%~90% 的时间内发起续期请求，请求被批准后会生成一个 kubelet-client-时间戳.pem；kubelet-client-current.pem 文件则始终软连接到最新的真实证书文件，除首次启动外，kubelet 一直会使用这个证书同 apiserver 通讯</p><ul><li>kubelet-server-current.pem</li></ul><p>同样是一个软连接文件，当 kubelet 配置了 –feature-gates=RotateKubeletServerCertificate=true 选项后，会在证书总有效期的 70%~90% 的时间内发起续期请求，请求被批准后会生成一个 kubelet-server-时间戳.pem；kubelet-server-current.pem 文件则始终软连接到最新的真实证书文件，该文件将会一直被用于 kubelet 10250 api 端口鉴权</p><h4 id="TLS-bootstrapping-配置相关"><a href="#TLS-bootstrapping-配置相关" class="headerlink" title="TLS bootstrapping 配置相关"></a>TLS bootstrapping 配置相关</h4><p>当集群开启了 TLS 认证后，每个节点的 kubelet 组件都要使用由 apiserver 使用的 CA 签发的有效证书才能与 apiserver 通讯；此时如果节点多起来，为每个节点单独签署证书将是一件非常繁琐的事情；TLS bootstrapping 功能就是让 kubelet 先使用一个预定的低权限用户连接到 apiserver，然后向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署</p><p> 在有些用户首次启动时，可能与遇到 kubelet 报 401 无权访问 apiserver 的错误；这是因为在默认情况下，kubelet 通过 bootstrap.kubeconfig 中的预设用户 Token 声明了自己的身份，然后创建 CSR 请求；但是不要忘记这个用户在我们不处理的情况下他没任何权限的，包括创建 CSR 请求；所以需要如下命令创建一个 ClusterRoleBinding，将预设用户 kubelet-bootstrap 与内置的 ClusterRole system:node-bootstrapper 绑定到一起，使其能够发起 CSR 请求<br> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding kubelet-bootstrap \<br> <span class="hljs-attribute">--clusterrole</span>=system:node-bootstrapper \<br> <span class="hljs-attribute">--user</span>=kubelet-bootstrap<br></code></pre></td></tr></table></figure></p><h4 id="1-apiserver-预先放置-token-csv，内容样例如下"><a href="#1-apiserver-预先放置-token-csv，内容样例如下" class="headerlink" title="1. apiserver 预先放置 token.csv，内容样例如下:"></a>1. apiserver 预先放置 token.csv，内容样例如下:</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">6</span>df3c701f979cee17732c30958745947,kubelet-bootstrap,<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;system:bootstrappers&quot;</span><br><br>[root@linux-node1 ~]#  head -c <span class="hljs-number">16</span> <span class="hljs-regexp">/dev/u</span>random | od -An -t x | tr -d <span class="hljs-string">&#x27; &#x27;</span><br>ad6d5bb607a186796d8861557df0d17f <br>[root@linux-node1 ~]# vim <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span> bootstrap-token.csv<br>ad6d5bb607a186796d8861557df0d17f,kubelet-bootstrap,<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;system:kubelet-bootstrap&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="2-允许-kubelet-bootstrap-用户创建首次启动的-CSR-请求"><a href="#2-允许-kubelet-bootstrap-用户创建首次启动的-CSR-请求" class="headerlink" title="2. 允许 kubelet-bootstrap 用户创建首次启动的 CSR 请求"></a>2. 允许 kubelet-bootstrap 用户创建首次启动的 CSR 请求</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@linux-node1 ~]<span class="hljs-comment"># kubectl create clusterrolebinding kubelet-bootstrap \</span><br>  --<span class="hljs-attr">clusterrole=</span>system:<span class="hljs-keyword">node</span><span class="hljs-title">-bootstrapper</span> \<br>  --<span class="hljs-attr">user=</span>kubelet-bootstrap<br>clusterrolebinding <span class="hljs-string">&quot;kubelet-bootstrap&quot;</span> created<br></code></pre></td></tr></table></figure><h4 id="3-配置-kubelet-自动续期"><a href="#3-配置-kubelet-自动续期" class="headerlink" title="3. 配置 kubelet 自动续期"></a>3. 配置 kubelet 自动续期</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haml">RotateKubeletClientCertificate 用于自动续期 kubelet 连接 apiserver 所用的证书(kubelet-client-xxxx.pem)<br>RotateKubeletServerCertificate 用于自动续期 kubelet 10250 api 端口所使用的证书(kubelet-server-xxxx.pem)<br><br>KUBELET_ARGS=&quot;--cgroup-driver=cgroupfs \<br>              -<span class="ruby">-cluster-dns=<span class="hljs-number">10.254</span>.<span class="hljs-number">0.2</span> \</span><br><span class="ruby"></span>              -<span class="ruby">-resolv-conf=<span class="hljs-regexp">/etc/resolv</span>.conf \</span><br><span class="ruby"></span>              -<span class="ruby">-experimental-bootstrap-kubeconfig=<span class="hljs-regexp">/etc/kubernetes</span><span class="hljs-regexp">/bootstrap.kubeconfig \</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>              -<span class="ruby"><span class="hljs-regexp">-feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>              -<span class="ruby"><span class="hljs-regexp">-kubeconfig=/etc</span><span class="hljs-regexp">/kubernetes/kubelet</span>.kubeconfig \</span><br><span class="ruby"></span>              -<span class="ruby">-fail-swap-on=<span class="hljs-literal">false</span> \</span><br><span class="ruby"></span>              -<span class="ruby">-cert-dir=<span class="hljs-regexp">/etc/kubernetes</span><span class="hljs-regexp">/ssl \</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>              -<span class="ruby"><span class="hljs-regexp">-cluster-domain=cluster.local. \</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>              -<span class="ruby"><span class="hljs-regexp">-hairpin-mode=promiscuous-bridge \</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>              -<span class="ruby"><span class="hljs-regexp">-serialize-image-pulls=false \</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>              -<span class="ruby"><span class="hljs-regexp">-pod-infra-container-image=gcr.io/google</span>_containers/pause-<span class="hljs-symbol">amd64:</span><span class="hljs-number">3.0</span><span class="hljs-string">&quot;</span></span><br></code></pre></td></tr></table></figure><h4 id="4-配置-controller-manager-自动批准相关-CSR-请求"><a href="#4-配置-controller-manager-自动批准相关-CSR-请求" class="headerlink" title="4. 配置 controller manager 自动批准相关 CSR 请求"></a>4. 配置 controller manager 自动批准相关 CSR 请求</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haml">如果不配置 --feature-gates=RotateKubeletServerCertificate=true 参数，则即使配置了相关的 RBAC 规则，也只会自动批准 kubelet client 的 renew 请求<br><br>KUBE_CONTROLLER_MANAGER_ARGS=&quot;--address=0.0.0.0 \<br>                              -<span class="ruby">-service-cluster-ip-range=<span class="hljs-number">10.254</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span> \</span><br><span class="ruby"></span>                              -<span class="ruby">-feature-gates=RotateKubeletServerCertificate=<span class="hljs-literal">true</span> \</span><br><span class="ruby"></span>                              -<span class="ruby">-cluster-name=kubernetes \</span><br><span class="ruby"></span>                              -<span class="ruby">-cluster-signing-cert-file=<span class="hljs-regexp">/etc/kubernetes</span><span class="hljs-regexp">/ssl/k</span>8s-root-ca.pem \</span><br><span class="ruby"></span>                              -<span class="ruby">-cluster-signing-key-file=<span class="hljs-regexp">/etc/kubernetes</span><span class="hljs-regexp">/ssl/k</span>8s-root-ca-key.pem \</span><br><span class="ruby"></span>                              -<span class="ruby">-service-account-private-key-file=<span class="hljs-regexp">/etc/kubernetes</span><span class="hljs-regexp">/ssl/k</span>8s-root-ca-key.pem \</span><br><span class="ruby"></span>                              -<span class="ruby">-root-ca-file=<span class="hljs-regexp">/etc/kubernetes</span><span class="hljs-regexp">/ssl/k</span>8s-root-ca.pem \</span><br><span class="ruby"></span>                              -<span class="ruby">-leader-elect=<span class="hljs-literal">true</span> \</span><br><span class="ruby"></span>                              -<span class="ruby">-node-monitor-grace-period=40s \</span><br><span class="ruby"></span>                              -<span class="ruby">-node-monitor-period=5s \</span><br><span class="ruby"></span>                              -<span class="ruby">-pod-eviction-timeout=5m0s<span class="hljs-string">&quot;</span></span><br></code></pre></td></tr></table></figure><h4 id="5-创建自动批准相关-CSR-请求的-ClusterRole"><a href="#5-创建自动批准相关-CSR-请求的-ClusterRole" class="headerlink" title="5. 创建自动批准相关 CSR 请求的 ClusterRole"></a>5. 创建自动批准相关 CSR 请求的 ClusterRole</h4><p>相对于 1.7 版本，1.8 的 apiserver 自动创建了前两条 ClusterRole，所以只需要创建一条就行了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-comment"># serving cert matching its client cert.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeserver</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="6-将-ClusterRole-绑定到适当的用户组，以完成自动批准相关-CSR-请求"><a href="#6-将-ClusterRole-绑定到适当的用户组，以完成自动批准相关-CSR-请求" class="headerlink" title="6. 将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求"></a>6. 将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-approve-csr <span class="hljs-attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:nodeclient <span class="hljs-attribute">--group</span>=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-renew-crt <span class="hljs-attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient <span class="hljs-attribute">--group</span>=system:nodes<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-server-auto-renew-crt <span class="hljs-attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver <span class="hljs-attribute">--group</span>=system:nodes<br></code></pre></td></tr></table></figure><p>一切就绪后重启 kubelet 组件，1.8 版本 kubelet 会自动重载证书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、问题现象和原因&quot;&gt;&lt;a href=&quot;#一、问题现象和原因&quot; class=&quot;headerlink&quot; title=&quot;一、问题现象和原因&quot;&gt;&lt;/a&gt;一、问题现象和原因&lt;/h3&gt;&lt;h4 id=&quot;Kubernetes-日志错误&quot;&gt;&lt;a href=&quot;#Kubernetes</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Helm Template语法</title>
    <link href="http://www.leiyawu.com/2020/10/04/Helm-Template%E8%AF%AD%E6%B3%95/"/>
    <id>http://www.leiyawu.com/2020/10/04/Helm-Template%E8%AF%AD%E6%B3%95/</id>
    <published>2020-10-04T04:01:00.000Z</published>
    <updated>2021-08-24T09:38:54.100Z</updated>
    
    <content type="html"><![CDATA[<ul><li>官方文档：<a href="https://helm.sh/docs/chart_template_guide/function_list/">https://helm.sh/docs/chart_template_guide/function_list/</a></li></ul><h3 id="helpers-tpl"><a href="#helpers-tpl" class="headerlink" title="_helpers.tpl"></a>_helpers.tpl</h3><p>在chart中以 “下划线” 开头的文件，称为”子模版”.</p><p>例如在 <code>_helper.tpl </code>中定义子模块，格式：<code>&#123;&#123;- define "模版名字" -&#125;&#125;</code> 模版内容 <code>&#123;&#123;- end -&#125;&#125;</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;nginx.name&quot;</span> -&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> default .Chart.Name .Values.nameOverride | trunc <span class="hljs-number">63</span> | trimSuffix <span class="hljs-string">&quot;-&quot;</span> -&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end -&#125;&#125;</span><span class="xml"></span><br><span class="xml"># 若 .Values.nameOverride 为空，则默认值为 .Chart.Name</span><br></code></pre></td></tr></table></figure><p>引用模板，格式：<code>&#123;&#123; include "模版名字" 作用域&#125;&#125;</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> &#123;&#123; include <span class="hljs-string">&quot;nginx.fullname&quot;</span> . &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>Build-in Objects:  <a href="https://helm.sh/docs/chart_template_guide/builtin_objects/">https://helm.sh/docs/chart_template_guide/builtin_objects/</a></p><p>Chart 预定义对象可直接在各模板中使用。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Release</span>：      代表<span class="hljs-keyword">Release</span>对象，属性包含：<span class="hljs-keyword">Release</span>.Name、<span class="hljs-keyword">Release</span>.Namespace、<span class="hljs-keyword">Release</span>.Revision等<br><span class="hljs-keyword">Values</span>：       表示 <span class="hljs-keyword">values</span>.yaml 文件数据<br>Chart：        表示 Chart.yaml 数据<br>Files：        用于访问 chart 中非标准文件<br>Capabilities： 用于获取 k8s 集群的一些信息<br>   - Capabilities.KubeVersion.Major：K8s的主版本<br><span class="hljs-keyword">Template</span>：     表示当前被执行的模板<br>   - <span class="hljs-type">Name</span>：表示模板名，如：mychart/templates/mytemplate.yaml<br>   - BasePath：表示路径，如：mychart/templates<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>默认情况点( . ), 代表全局作用域，用于引用全局对象。</p><p>helm 全局作用域中有两个重要的全局对象：Values 和 Release</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-type">#</span> <span class="hljs-built_in">Values</span><br><span class="hljs-type">#</span> 这里引用了全局作用域下的<span class="hljs-built_in">Values</span>对象中的<span class="hljs-variable">key</span>属性。 <br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-operator">.</span><span class="hljs-built_in">Values</span><span class="hljs-operator">.</span><span class="hljs-variable">key</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-built_in">Values</span>代表的就是<span class="hljs-variable">values</span><span class="hljs-operator">.</span><span class="hljs-variable">yaml</span>定义的参数，通过<span class="hljs-operator">.</span><span class="hljs-built_in">Values</span>可以引用任意参数。<br>例子：<br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-operator">.</span><span class="hljs-built_in">Values</span><span class="hljs-operator">.</span><span class="hljs-variable">replicaCount</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-type">#</span> 引用嵌套对象例子，跟引用<span class="hljs-variable">json</span>嵌套对象类似<br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-operator">.</span><span class="hljs-built_in">Values</span><span class="hljs-operator">.</span><span class="hljs-variable">image</span><span class="hljs-operator">.</span><span class="hljs-variable">repository</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-type">#</span> <span class="hljs-built_in">Release</span> <br>其代表一次应用发布，下面是<span class="hljs-built_in">Release</span>对象包含的属性字段：<br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">Name</span>       <span class="hljs-operator">-</span> <span class="hljs-variable">release</span>的名字，一般通过<span class="hljs-variable">Chart</span><span class="hljs-operator">.</span><span class="hljs-variable">yaml</span>定义，或者通过<span class="hljs-variable">helm</span>命令在安装应用的时候指定。<br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">Time</span>       <span class="hljs-operator">-</span> <span class="hljs-variable">release</span>安装时间<br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">Namespace</span>  <span class="hljs-operator">-</span> <span class="hljs-variable">k8s</span>名字空间<br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">Revision</span>   <span class="hljs-operator">-</span> <span class="hljs-variable">release</span>版本号，是一个递增值，每次更新都会加一<br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">IsUpgrade</span>  <span class="hljs-operator">-</span> <span class="hljs-variable">true</span>代表，当前<span class="hljs-variable">release</span>是一次更新<span class="hljs-operator">.</span><br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">IsInstall</span>  <span class="hljs-operator">-</span> <span class="hljs-variable">true</span>代表，当前<span class="hljs-variable">release</span>是一次安装<br><span class="hljs-built_in">Release</span><span class="hljs-operator">.</span><span class="hljs-variable">Service</span><span class="hljs-operator">:</span>   <span class="hljs-operator">-</span> <span class="hljs-variable">The</span> <span class="hljs-variable">service</span> <span class="hljs-variable">that</span> <span class="hljs-variable">is</span> <span class="hljs-variable">rendering</span> <span class="hljs-variable">the</span> <span class="hljs-variable">present</span> <span class="hljs-variable">template</span><span class="hljs-operator">.</span> <span class="hljs-built_in">On</span> <span class="hljs-variable">Helm</span><span class="hljs-operator">,</span> <span class="hljs-variable">this</span> <span class="hljs-variable">is</span> <span class="hljs-variable">always</span> <span class="hljs-variable">Helm</span><span class="hljs-operator">.</span><br></code></pre></td></tr></table></figure><p>自定义模版变量。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"># 变量名以$开始命名， 赋值运算符是 := (冒号+等号)</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> $relname <span class="hljs-attr">:</span>= .Release.Name -&#125;&#125;</span><span class="xml"></span><br><span class="xml">引用自定义变量:</span><br><span class="xml">#不需要 . 引用</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$relname</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>include是一个函数，所以他的输出结果是可以传给其他函数的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 例子1：</span><br><span class="hljs-attr">env:</span><br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">include</span> <span class="hljs-string">&quot;xiaomage&quot;</span> <span class="hljs-string">.</span> &#125;&#125;<br><span class="hljs-comment"># 结果：</span><br>          <span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">name</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">xiaomage</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">age</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">secret</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">favourite</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;Cloud Native DevSecOps&quot;</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wechat</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">majinghe11</span><br><span class="hljs-comment"># 例子2：</span><br><span class="hljs-attr">env:</span><br>  &#123;&#123;<span class="hljs-bullet">-</span> <span class="hljs-string">include</span> <span class="hljs-string">&quot;xiaomage&quot;</span> <span class="hljs-string">.</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">8</span>&#125;&#125;<br><span class="hljs-comment"># 结果：</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">name</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">xiaomage</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">age</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">secret</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">favourite</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;Cloud Native DevSecOps&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wechat</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">majinghe11</span><br></code></pre></td></tr></table></figure><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>with关键字可以控制变量的作用域,主要就是用来修改 . 作用域的，默认 . 代表全局作用域，with 语句可以修改 . 的含义</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"># 例子：</span><br><span class="xml"># .Values.favorite 是一个 object 类型</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="xml"></span><br><span class="xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="xml">   # 相当于.Values.favorite.drink</span><br><span class="xml">food:  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span>  | upper | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="toYaml-转-yaml"><a href="#toYaml-转-yaml" class="headerlink" title="toYaml 转 yaml"></a>toYaml 转 yaml</h3><p>将数据转为yaml格式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">spec:<br><span class="hljs-code">  strategy:</span><br><span class="hljs-section">&#123;&#123; toYaml .Values.strategy | indent 4 &#125;&#125;</span><br><span class="hljs-section">------------------------------------------------------------------</span><br>values.yaml数据：<br>strategy:<br><span class="hljs-code">  type: RollingUpdate</span><br><span class="hljs-code">  rollingUpdate:</span><br><span class="hljs-section">    maxUnavailable: 0</span><br><span class="hljs-section">------------------------------------------------------------------</span><br>渲染效果：<br>spec:<br><span class="hljs-code">  strategy:</span><br><span class="hljs-code">    type: RollingUpdate</span><br><span class="hljs-code">    rollingUpdate:</span><br><span class="hljs-code">      maxUnavailable: 0</span><br></code></pre></td></tr></table></figure><p>区别：nindent &amp; indent</p><ul><li>nindent 为向右移动 N 个缩进 </li><li>indent 为向左的缩进。</li></ul><h3 id="Values-对象"><a href="#Values-对象" class="headerlink" title="Values 对象"></a>Values 对象</h3><p>values 对象的值有四个来源：</p><ul><li> chart 包中的 values.yaml 文件</li><li> 父 chart 包的 values.yaml 文件</li><li> 使用 helm install 或者 helm upgrade 的 -f 或者 –values 参数传入的自定义的 yaml 文件</li><li> 通过 –set 参数传入的值<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dts">cat global.yaml <br><span class="hljs-symbol">course:</span> k8s<br>cat mychart<span class="hljs-meta-keyword">/templates/</span>configmap.yaml <br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> &#123;&#123; .Release.Name &#125;&#125;-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  course:</span>  &#123;&#123; .Values.course &#125;&#125;<br>helm install --name mychart --dry-run --debug -f global.yaml .<span class="hljs-meta-keyword">/mychart/</span><br>helm install --name mychart --dry-run --debug --set course=<span class="hljs-string">&quot;k8s&quot;</span> .<span class="hljs-meta-keyword">/mychart/</span><br><span class="hljs-meta"># 运行部分结果:</span><br><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mychart-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  course:</span>  k8s<br><span class="hljs-meta"># 编辑 mychart/values.yaml，在最后加入</span><br><span class="hljs-symbol">course:</span><br><span class="hljs-symbol">  k8s:</span> klvchen<br><span class="hljs-symbol">  python:</span> lily<br>cat mychart<span class="hljs-meta-keyword">/templates/</span>configmap.yaml <br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> &#123;&#123; .Release.Name &#125;&#125;-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  k8s:</span>  &#123;&#123; quote .Values.course.k8s &#125;&#125;      <span class="hljs-meta"># quote 叫双引号</span><br><span class="hljs-symbol">  python:</span>  &#123;&#123; .Values.course.python &#125;&#125;<br>helm install --name mychart --dry-run --debug .<span class="hljs-meta-keyword">/mychart/</span><br><span class="hljs-meta"># 运行结果：</span><br><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mychart-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  k8s:</span>  <span class="hljs-string">&quot;klvchen&quot;</span><br><span class="hljs-symbol">  python:</span>  lily<br></code></pre></td></tr></table></figure></li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li>k8s:  <code>&#123;&#123; quote .Values.course.k8s &#125;&#125;</code> # 加双引号</li><li>k8s:  <code>&#123;&#123; .Values.course.k8s | upper | quote &#125;&#125;</code> # 大写字符串加双引号</li><li>k8s:  <code>&#123;&#123; .Values.course.k8s | upper | quote &#125;&#125;</code> # 加双引号和重复3次字符串</li></ul><h3 id="if-else-条件"><a href="#if-else-条件" class="headerlink" title="if/else 条件"></a>if/else 条件</h3><p>if/else 块是用于在模板中有条件地包含文本块的方法，条件块的基本结构</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-builtin-name">if</span></span> PIPELINE &#125;&#125;</span><span class="xml"></span><br><span class="xml">   # Do something</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">else</span> if OTHER PIPELINE &#125;&#125;</span><span class="xml"></span><br><span class="xml">   # Do something else</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">else</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml">   # Default case</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>判断条件，如果值为以下几种情况，管道的结果为 false：</p><ul><li>一个布尔类型的假</li><li>一个数字零</li><li>一个空的字符串</li><li>一个 nil(空或null)</li><li>一个空的集合(map, slice, tuple, dict, array)</li></ul><p>除了上面的这些情况外，其他所有的条件都为真。</p><p>常用的关系运算符&gt;、 &gt;=、 &lt;、!=、与或非在helm模版中都以函数的形式实现。</p><p>关系运算函数定义：</p><ul><li>eq 相当于 =</li><li>ne 相当于 !=</li><li>lt 相当于 &lt;=</li><li>gt 相当于 &gt;=</li><li>and 相当于 &amp;&amp;</li><li>or 相当于 ||</li><li>not 相当于 !</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"># 例子</span><br><span class="xml">cat mychart/templates/configmap.yaml </span><br><span class="xml">apiVersion: v1</span><br><span class="xml">kind: ConfigMap</span><br><span class="xml">metadata:</span><br><span class="xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="xml">-configmap</span><br><span class="xml">data:</span><br><span class="xml">  myvalue: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.hello</span> | default <span class="hljs-string">&quot;Hello World&quot;</span> | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml">  k8s:  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.course.k8s</span> | upper | quote | repeat <span class="hljs-number">3</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml">  python:  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.course.python</span> | repeat <span class="hljs-number">3</span> | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-builtin-name">if</span></span> eq .Values.course.python <span class="hljs-string">&quot;django&quot;</span> &#125;&#125;</span><span class="xml">web: true</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">helm install --name mychart --dry-run --debug ./mychart/</span><br><span class="xml">运行部分结果：</span><br><span class="xml"># Source: mychart/templates/configmap.yaml</span><br><span class="xml">apiVersion: v1</span><br><span class="xml">kind: ConfigMap</span><br><span class="xml">metadata:</span><br><span class="xml">  name: mychart-configmap</span><br><span class="xml">data:</span><br><span class="xml">  myvalue: &quot;Hello World&quot;</span><br><span class="xml">  k8s:  &quot;KLVCHEN&quot;&quot;KLVCHEN&quot;&quot;KLVCHEN&quot;</span><br><span class="xml">  python:  &quot;djangodjangodjango&quot;</span><br><span class="xml">  web: true</span><br><span class="xml"># 空格控制</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if eq .Values.course.python <span class="hljs-string">&quot;django&quot;</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml">web: true</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">如果要实现：</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if eq .Values.isCar <span class="hljs-literal">true</span> &#125;&#125;</span><span class="xml"> OR </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if eq .Values.isBus <span class="hljs-literal">true</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"># do something</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="xml"></span><br><span class="xml">功能，可以执行如下判断：</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if or (<span class="hljs-name">eq</span> .Values.gitdev.enable <span class="hljs-string">&quot;true&quot;</span>) (<span class="hljs-name">eq</span> .Values.gitpreftest.enable <span class="hljs-string">&quot;true&quot;</span>) &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">- name: galaxymxsdk-logs-pvc</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if eq .Values.pvc.enabled <span class="hljs-string">&quot;true&quot;</span> &#125;&#125;</span><span class="xml">  #如果values.pvc.enabled的值等于true，则存储用pvc，否则(不为true)用空卷</span><br><span class="xml">  persistentVolumeClaim:</span><br><span class="xml">    claimName: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.pvc.name</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> else &#125;&#125;</span><span class="xml"></span><br><span class="xml">  emptyDir: &#123;&#125;</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">values值为：</span><br><span class="xml">pvc:</span><br><span class="xml">  enabled: &quot;true&quot;</span><br><span class="xml">  name: logs-pvc</span><br><span class="xml"></span><br><span class="xml">通过dd测试是否有用cfs持久存储：dd if=/dev/zero of=test bs=1M count=1000</span><br><span class="xml"></span><br><span class="xml">区别存在判断：</span><br><span class="xml">- name: galaxymxsdk-logs-pvc</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if .Values.pvc &#125;&#125;</span><span class="xml">  #如果存在values.pvc，则存储用pvc，否则(不存在)用空卷</span><br><span class="xml">  persistentVolumeClaim:</span><br><span class="xml">    claimName: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.pvc.name</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> else &#125;&#125;</span><span class="xml"></span><br><span class="xml">  emptyDir: &#123;&#125;</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="With-关键字"><a href="#With-关键字" class="headerlink" title="With 关键字"></a>With 关键字</h3><p>with 关键字可以控制变量的作用域</p><p><code>&#123;&#123; .Release.xxx &#125;&#125;</code> 其中的.就是表示对当前范围的引用，.Values就是告诉模板在当前范围中查找Values对象的值。</p><p>with 语句可以允许将当前范围 . 设置为特定的对象，比如前面一直使用的.Values.course,可以使用 with 来将范围指向 <code>.Values.course:(templates/configmap.yaml)</code></p><p>with主要就是用来修改 . 作用域的，默认 . 代表全局作用域，with语句可以修改.的含义.</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">语法:</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-builtin-name">with</span></span> 引用的对象 &#125;&#125;</span><span class="xml"></span><br><span class="xml">这里可以使用 . (点)， 直接引用with指定的对象</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml">例子:</span><br><span class="xml">#.Values.favorite是一个object类型</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="xml"></span><br><span class="xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="xml">   #相当于.Values.favorite.drink</span><br><span class="xml">food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="range-关键字"><a href="#range-关键字" class="headerlink" title="range 关键字"></a>range 关键字</h3><p>range主要用于循环遍历数组类型。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">语法1:</span><br><span class="xml"># 遍历map类型，用于遍历键值对象</span><br><span class="xml"># 变量key代表对象的属性名，val代表属性值</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range key,val <span class="hljs-attr">:</span>= 键值对象 &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end&#125;&#125;</span><span class="xml"></span><br><span class="xml">语法2：</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range 数组 &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; . | <span class="hljs-name">title</span> | quote &#125;&#125;</span><span class="xml"> # . (点)，引用数组元素值,title即为把单词首字母大写,quote则为加引号,以字符串形式展示</span><br><span class="xml">#如果不需要任何形式的应用，直接用：</span><span class="hljs-template-variable">&#123;&#123; . &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="xml"></span><br><span class="xml">例子:</span><br><span class="xml"># values.yaml定义</span><br><span class="xml"># map类型</span><br><span class="xml">favorite:</span><br><span class="xml">  drink: coffee</span><br><span class="xml">  food: pizza</span><br><span class="xml"> </span><br><span class="xml"># 数组类型</span><br><span class="xml">pizzaToppings:</span><br><span class="xml">  - mushrooms</span><br><span class="xml">  - cheese</span><br><span class="xml">  - peppers</span><br><span class="xml">  - onions</span><br><span class="xml"> </span><br><span class="xml"># map类型遍历例子:</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $key, $val <span class="hljs-attr">:</span>= .Values.favorite &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end&#125;&#125;</span><span class="xml"></span><br><span class="xml"> </span><br><span class="xml"># 数组类型遍历例子:</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range .Values.pizzaToppings&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; . | <span class="hljs-name">quote</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">1. quote 函数，将值渲染模板时候，以字符串方式引用.</span><br><span class="xml">2. upper 函数，将小写字母转换为大写</span><br><span class="xml">3. repeat 函数，写法repeat n 是将参数复制n遍</span><br><span class="xml">4. default 函数，用法default &quot;tee&quot; 给一个默认的参数，建议将静态的参数都写入values.yaml</span><br><span class="xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="xml"></span><br><span class="xml">5. title 函数，首字母大写</span><br><span class="xml">6. indent 函数，缩进字符，以空格为单位</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">toYaml</span> .Values.strategy | indent <span class="hljs-number">4</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>参考：<a href="https://chenyongjun.vip/articles/136">https://chenyongjun.vip/articles/136</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;官方文档：&lt;a href=&quot;https://helm.sh/docs/chart_template_guide/function_list/&quot;&gt;https://helm.sh/docs/chart_template_guide/function_list/&lt;/a</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins use ca_https to access kubernetes_cluster api</title>
    <link href="http://www.leiyawu.com/2020/08/03/Jenkins-use-ca-https-to-access-kubernetes-cluster-api/"/>
    <id>http://www.leiyawu.com/2020/08/03/Jenkins-use-ca-https-to-access-kubernetes-cluster-api/</id>
    <published>2020-08-03T08:27:00.000Z</published>
    <updated>2021-08-03T08:28:36.904Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>通过之前生成的admin的证书访问api server:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  pipeline curl --insecure --cacert <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>ca.crt --key <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>admin-key.pem --cert <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>admin.pem https:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.14</span>:<span class="hljs-number">6443</span> <br></code></pre></td></tr></table></figure></li><li><p>在kubernetes master上调用本地接口8080访问api server:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  pipeline curl http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><br>&#123;<br>  <span class="hljs-string">&quot;paths&quot;</span>: [<br>    <span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-string">&quot;/api/v1&quot;</span>,<br>    ....<br></code></pre></td></tr></table></figure></li><li><p>通过”~/.kube/config”配置文件(base64 -d转码后生成的证书)(如下)访问api server:</p></li></ol><p>If you are not hosting Jenkins on the same Kubernetes cluster (or not hosting it on Kubernetes at all), then you need to perform a few extra steps to configure the access to your Kubernetes cluster.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">curl <span class="hljs-params">--insecure</span> <span class="hljs-params">--cacert</span> <span class="hljs-string">./ca.crt</span> <span class="hljs-params">--key</span> <span class="hljs-string">./client.key</span> -cert <span class="hljs-string">./client.crt</span> https:<span class="hljs-string">//192.168.0.14</span><span class="hljs-function">:6443</span><br></code></pre></td></tr></table></figure><p>详细步骤如下：</p><ul><li><p>cat ~/.kube/config</p></li><li><p>将”certificate-authority-data”的值保存在一个文件ca中<br>然后:cat ca|base64 -d &gt; ca.crt,生成ca证书文件</p></li><li><p>we need to grab the base64 encoded client-certificate-data,同样：将”client-certificate-data”的值保存在1.client.crt中，cat 1.client.crt |base64 -d &gt; client.crt</p></li><li><p>将”client-key-data”的值保存在1.client.key中，cat 1.client.key |base64 -d &gt; client.key</p></li><li><p>执行:”openssl pkcs12 -export -out cert.pfx -inkey client.key -in client.crt -certfile ca.crt -passout pass:passwd”其中cert.pfx上传给Jenkins，其密码为passwd</p></li><li><p>jenkins新建Credentials,Kind选择”Certificate”,通过”Upload PKCS#12 certificate”将生成的cert.pfx上传上来，Password为刚才pass后面指定的值”passwd”</p></li><li><p>Kubernetes URL:由”<a href="http://127.0.0.1:8080&quot;更改为：&quot;https://192.168.0.14:6443&quot;">http://127.0.0.1:8080&quot;更改为：&quot;https://192.168.0.14:6443&quot;</a><br>“127.0.0.1:8080”为本地验证的url,类型为:http;”192.168.0.14:6443”则为远程连接接口，类型为:https<br>至此需要认证的https ca证书配置完成。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过之前生成的admin的证书访问api server:&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/categories/jenkins/"/>
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap.memory_lock简要说明</title>
    <link href="http://www.leiyawu.com/2019/10/17/bootstrap-memory-lock/"/>
    <id>http://www.leiyawu.com/2019/10/17/bootstrap-memory-lock/</id>
    <published>2019-10-17T02:30:41.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall">https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall</a></p><h5 id="bootstrap-memory-lock"><a href="#bootstrap-memory-lock" class="headerlink" title="bootstrap.memory_lock"></a>bootstrap.memory_lock</h5><p>由于当jvm开始swapping时es的效率会降低，所以要保证它不swap，这对节点健康极其重要。实现这一目标的一种方法是将 bootstrap.memory_lock 设置为true。<br>要使此设置有效，首先需要配置其他系统设置。有关如何正确设置内存锁定的更多详细信息，请参阅启用bootstrap.memory_lock。</p><p>bootstrap.memory_lock: 是否锁住内存，避免交换(swapped)带来的性能损失,默认值是: false<br>bootstrap.system_call_filter: 是否支持过滤掉系统调用。elasticsearch 5.2以后引入的功能，在bootstrap的时候check是否支持seccomp。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">检查bootstrap.memory_lock设置是否生效:<br><span class="hljs-keyword">get</span> http:<span class="hljs-comment">//10.127.0.1:9200/_nodes?filter_path=**.mlockall</span><br>响应：<br>&#123;<br>    <span class="hljs-string">&quot;nodes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;9giihmDNRdS136KT52Gl5g&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;mlockall&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;X0zQESeeT8uJ9kVXvHpl-w&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;mlockall&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;w4hYw86rQhqL1ayGyUK1Kw&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;mlockall&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果看到mlockall为false，则表示mlockall请求失败。还将在日志中看到一行”Unable to lock JVM Memory”。</p><h5 id="elasticsearch报错之-memory-locking-requested-for-elasticsearch-process-but-memory-is-not-locked"><a href="#elasticsearch报错之-memory-locking-requested-for-elasticsearch-process-but-memory-is-not-locked" class="headerlink" title="elasticsearch报错之 memory locking requested for elasticsearch process but memory is not locked:"></a>elasticsearch报错之 memory locking requested for elasticsearch process but memory is not locked:</h5><p>安装elasticsearch报错如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[2019-01-14T03:57:16,453]</span><span class="hljs-comment">[ERROR]</span><span class="hljs-comment">[o.e.b.Bootstrap          ]</span> <span class="hljs-comment">[ip-172-31-30-62.ec2.internal]</span> node validation exception<br><span class="hljs-comment">[1]</span> bootstrap checks failed<br><span class="hljs-comment">[1]</span>: memory locking requested for elasticsearch process but memory <span class="hljs-keyword">is</span> not <span class="hljs-keyword">locked</span><br></code></pre></td></tr></table></figure><p>网上查找资料，发现都不是适应自己的环境。最后在官网找到了方法：</p><p>不过先跟大家声明一点就是：环境不一样解决的方法也不一样，这里是Centos7.5版本的系统，所有的服务都由systemd来管理。elasticsearch是6.5.4版本，使用RPM包的方式安装的。</p><p>现在我们开始解决问题：</p><h6 id="1、修改-etc-sysconfig-elasticsearch文件调整JVM内存大小"><a href="#1、修改-etc-sysconfig-elasticsearch文件调整JVM内存大小" class="headerlink" title="1、修改/etc/sysconfig/elasticsearch文件调整JVM内存大小"></a>1、修改/etc/sysconfig/elasticsearch文件调整JVM内存大小</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#ES_JAVA_OPTS=&quot;-Xms16g -Xmx16g&quot; (内存大小也可以在/etc/elasticsearch/jvm.options配置文件中定义，或者ES_HEAP_SIZE=16g)</span><br><span class="hljs-attr">JAVA_HOME</span>=/usr/java/jdk1.<span class="hljs-number">8.0</span>_51<br><span class="hljs-attr">ES_HEAP_SIZE</span>=<span class="hljs-number">16</span>g<br><span class="hljs-attr">MAX_OPEN_FILES</span>=<span class="hljs-number">655350</span><br><span class="hljs-attr">MAX_LOCKED_MEMORY</span>=unlimited<br></code></pre></td></tr></table></figure><p>替换16g为总内存的一半（Elasticsearch官方建议是主机总内存的一半）</p><h6 id="2、修改-etc-security-limits-conf文件内容"><a href="#2、修改-etc-security-limits-conf文件内容" class="headerlink" title="2、修改/etc/security/limits.conf文件内容"></a>2、修改/etc/security/limits.conf文件内容</h6><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">elasticsearch <span class="hljs-keyword">soft</span> memlock unlimited<br>elasticsearch hard memlock unlimited<br></code></pre></td></tr></table></figure><p>需要将elasticsearch替换为运行Elasticsearch程序的用户,使用root执行：service elasticsearch start实际上是以elasticsearch用户来执行</p><h6 id="3、在-etc-systemd-system-elasticsearch-service-d目录下创建一个文件override-conf，并添加下列内容"><a href="#3、在-etc-systemd-system-elasticsearch-service-d目录下创建一个文件override-conf，并添加下列内容" class="headerlink" title="3、在/etc/systemd/system/elasticsearch.service.d目录下创建一个文件override.conf，并添加下列内容"></a>3、在/etc/systemd/system/elasticsearch.service.d目录下创建一个文件override.conf，并添加下列内容</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Service]<br>LimitMEMLOCK=infinity<br>详情可以参考：https:<span class="hljs-regexp">//</span>www.elastic.co<span class="hljs-regexp">/guide/</span>en<span class="hljs-regexp">/elasticsearch/</span>reference<span class="hljs-regexp">/current/</span>setting-system-settings.html<span class="hljs-comment">#systemd</span><br></code></pre></td></tr></table></figure><h6 id="4、最后重新载入配置文件更新服务"><a href="#4、最后重新载入配置文件更新服务" class="headerlink" title="4、最后重新载入配置文件更新服务"></a>4、最后重新载入配置文件更新服务</h6><p>systemctl daemon-reload</p><h6 id="5、重启elasticsearch"><a href="#5、重启elasticsearch" class="headerlink" title="5、重启elasticsearch"></a>5、重启elasticsearch</h6><p>service elasticsearch restart</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall&quot;&gt;https://www.elastic.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows batch编程常用语法及命令</title>
    <link href="http://www.leiyawu.com/2019/01/21/Windows-batch%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.leiyawu.com/2019/01/21/Windows-batch%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%91%BD%E4%BB%A4/</id>
    <published>2019-01-21T02:09:00.000Z</published>
    <updated>2021-08-03T09:11:13.832Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">1 <span class="hljs-keyword">echo</span> 和 @<br>回显命令<br>@                     <span class="hljs-comment">#关闭单行回显</span><br><span class="hljs-keyword">echo</span> off              <span class="hljs-comment">#从下一行开始关闭回显</span><br>@<span class="hljs-keyword">echo</span> off             <span class="hljs-comment">#从本行开始关闭回显。一般批处理第一行都是这个</span><br><span class="hljs-keyword">echo</span> on               <span class="hljs-comment">#从下一行开始打开回显</span><br><span class="hljs-keyword">echo</span>                  <span class="hljs-comment">#显示当前是 echo off 状态还是 echo on 状态</span><br><span class="hljs-keyword">echo</span>.                 <span class="hljs-comment">#输出一个”回车换行”，空白行</span><br>                         <span class="hljs-comment">#(同echo, echo; echo+ echo[ echo] echo/ echo)</span><br><br>2 errorlevel<br><span class="hljs-keyword">echo</span> %errorlevel%<br>每个命令运行结束，可以用这个命令行格式查看返回码<br>默认值为0，一般命令执行出错会设 errorlevel 为1<br><br>3 dir<br>显示文件夹内容<br>dir                  <span class="hljs-comment">#显示当前目录中的文件和子目录</span><br>dir <span class="hljs-string">/a</span>               <span class="hljs-comment">#显示当前目录中的文件和子目录，包括隐藏文件和系统文件</span><br>dir c: <span class="hljs-string">/a</span><span class="hljs-function">:d</span>          <span class="hljs-comment">#显示 C 盘当前目录中的目录</span><br>dir c: <span class="hljs-string">/a</span><span class="hljs-function">:-d</span>         <span class="hljs-comment">#显示 C 盘根目录中的文件</span><br>dir c: <span class="hljs-string">/b/p</span>         <span class="hljs-comment">#/b只显示文件名，/p分页显示</span><br>dir *<span class="hljs-string">.exe</span> <span class="hljs-string">/s</span>         <span class="hljs-comment">#显示当前目录和子目录里所有的.exe文件</span><br><br>4 <span class="hljs-keyword">cd</span><br>切换目录<br><span class="hljs-keyword">cd</span>  \             <span class="hljs-comment">#进入根目录</span><br><span class="hljs-keyword">cd</span>                   <span class="hljs-comment">#显示当前目录</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">/d</span> d<span class="hljs-function">:sdk</span>        <span class="hljs-comment">#可以同时更改盘符和目录</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">/d</span> %~dp0<br>更改当前目录为批处理本身的目录<br>比如你有个批处理a.bat在D:\qq文件夹下<br>a.bat内容为<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/d</span> %~dp0<br>在这里<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/d</span> %~dp0的意思就是<span class="hljs-keyword">cd</span> <span class="hljs-string">/d</span> d:\qq<br>%0代表批处理本身 d:\qq\a.bat<br>~dp是变量扩充<br>d既是扩充到分区号 d:<br>p就是扩充到路径 \qq<br>dp就是扩充到分区号路径 d:\qq <br><br>5 md<br>创建目录<br>md d<span class="hljs-function">:abc</span>          <span class="hljs-comment">#如果 d:a 不存在，将会自动创建中级目录</span><br><span class="hljs-comment">#如果命令扩展名被停用，则需要键入 mkdir abc。</span><br><br>6 rd<br>删除目录<br>rd abc               <span class="hljs-comment">#删除当前目录里的 abc 子目录，要求为空目录</span><br>rd <span class="hljs-string">/s/q</span> d<span class="hljs-function">:temp</span>      <span class="hljs-comment">#删除 d:temp 文件夹及其子文件夹和文件，/q安静模式</span><br><br>7 del<br>删除文件<br>del d<span class="hljs-function">:test.txt</span>      <span class="hljs-comment">#删除指定文件，不能是隐藏、系统、只读文件</span><br>del <span class="hljs-string">/q/a/f</span> d<span class="hljs-function">:temp</span>*.*<br>删除 d<span class="hljs-function">:temp</span> 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录<br>del <span class="hljs-string">/q/a/f/s</span> d<span class="hljs-function">:temp</span>*.*<br>删除 d<span class="hljs-function">:temp</span> 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录<br><br>8 ren<br>重命名命令<br>ren d<span class="hljs-function">:temp</span> tmp      <span class="hljs-comment">#支持对文件夹的重命名</span><br><br>9 cls<br>清屏<br><br>10 type<br>显示文件内容<br>type c<span class="hljs-function">:boot.ini</span>     <span class="hljs-comment">#显示指定文件的内容，程序文件一般会显示乱码</span><br>type *<span class="hljs-string">.txt</span>           <span class="hljs-comment">#显示当前目录里所有.txt文件的内容</span><br><br>11 copy<br>拷贝文件<br>copy c<span class="hljs-function">:test.txt</span> d<span class="hljs-function">:test.bak</span><br>复制 c<span class="hljs-function">:test.txt</span> 文件到 d: ，并重命名为 test.bak<br>copy con test.txt<br>从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件<br>con代表屏幕，prn代表打印机，nul代表空设备<br>copy 1.txt + 2.txt 3.txt<br>合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件<br>如果不指定 3.txt ，则保存到 1.txt<br>copy test.txt +<br>复制文件到自己，实际上是修改了文件日期<br><br>12 title<br>设置cmd窗口的标题<br>title 新标题         <span class="hljs-comment">#可以看到cmd窗口的标题栏变了</span><br><br>13 ver<br>显示系统版本<br><br>14 label 和 vol<br>设置卷标<br>vol                  <span class="hljs-comment">#显示卷标</span><br>label                <span class="hljs-comment">#显示卷标，同时提示输入新卷标</span><br>label c<span class="hljs-function">:system</span>       <span class="hljs-comment">#设置C盘的卷标为 system</span><br><br>15 pause<br>暂停命令<br><br>16 rem 和 ::<br>注释命令<br>注释行不执行操作<br><br>17 date 和 time<br>日期和时间<br>date           <span class="hljs-comment">#显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入</span><br>date/t         <span class="hljs-comment">#只显示当前日期，不提示输入新日期</span><br>time           <span class="hljs-comment">#显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入</span><br>time/t         <span class="hljs-comment">#只显示当前时间，不提示输入新时间</span><br><br>18 goto 和 :<br>跳转命令<br><span class="hljs-function">:label</span>         <span class="hljs-comment">#行首为:表示该行是标签行，标签行不执行操作</span><br>goto label     <span class="hljs-comment">#跳转到指定的标签那一行</span><br><br>19 find <span class="hljs-params">(外部命令)</span><br>查找命令<br>find <span class="hljs-string">&quot;abc&quot;</span> c<span class="hljs-function">:test.txt</span><br>在 c<span class="hljs-function">:test.txt</span> 文件里查找含 abc 字符串的行<br>如果找不到，将设 errorlevel 返回码为1<br>find <span class="hljs-string">/i</span> “abc” c<span class="hljs-function">:test.txt</span><br>查找含 abc 的行，忽略大小写<br>find <span class="hljs-string">/c</span> <span class="hljs-string">&quot;abc&quot;</span> c<span class="hljs-function">:test.txt</span><br>显示含 abc 的行的行数<br><br>20 more <span class="hljs-params">(外部命令)</span><br>逐屏显示<br>more c<span class="hljs-function">:test.txt</span>     <span class="hljs-comment">#逐屏显示 c:test.txt 的文件内容</span><br><br>21 tree<br>显示目录结构<br>tree d:             <span class="hljs-comment">#显示D盘的文件目录结构</span><br><br>22 &amp;<br>顺序执行多条命令，而不管命令是否执行成功<br><br>23 &amp;&amp;<br>顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令<br>find <span class="hljs-string">&quot;ok&quot;</span> c<span class="hljs-function">:test.txt</span> &amp;&amp; <span class="hljs-keyword">echo</span> 成功<br>如果找到了<span class="hljs-string">&quot;ok&quot;</span>字样，就显示<span class="hljs-string">&quot;成功&quot;</span>，找不到就不显示<br><br>24 ||<br>顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令<br>find <span class="hljs-string">&quot;ok&quot;</span> c<span class="hljs-function">:test.txt</span> || <span class="hljs-keyword">echo</span> 不成功<br>如果找不到<span class="hljs-string">&quot;ok&quot;</span>字样，就显示<span class="hljs-string">&quot;不成功&quot;</span>，找到了就不显示<br><br>25 |<br>管道命令<br>dir *.* <span class="hljs-string">/s/a</span> | find <span class="hljs-string">/c</span> <span class="hljs-string">&quot;.exe&quot;</span><br>管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令<br>该命令行结果：输出当前文件夹及所有子文件夹里的<span class="hljs-string">.exe</span>文件的个数<br>type c<span class="hljs-function">:test.txt</span>|more<br>这个和 more c<span class="hljs-function">:test.txt</span> 的效果是一样的<br><br>26 &gt; 和 &gt;&gt;<br>输出重定向命令<br>&gt; 清除文件中原有的内容后再写入<br>&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容<br>主要将本来显示在屏幕上的内容输出到指定文件中<br>指定文件如果不存在，则自动生成该文件<br>type c<span class="hljs-function">:test.txt</span> &gt;prn<br>屏幕上不显示文件内容，转向输出到打印机<br><span class="hljs-keyword">echo</span> hello world&gt;con<br>在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的<br>copy c<span class="hljs-function">:test.txt</span> f: &gt;nul<br>拷贝文件，并且不显示<span class="hljs-string">&quot;文件复制成功&quot;</span>的提示信息，但如果f盘不存在，还是会显示出错信息<br>copy c<span class="hljs-function">:test.txt</span> f: &gt;nul 2&gt;nul<br>不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息<br><span class="hljs-keyword">echo</span> ^^W ^&gt; ^W&gt;c<span class="hljs-function">:test.txt</span><br>生成的文件内容为 ^W &gt; W<br>^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号<br><br>27 &lt;<br>从文件中获得输入信息，而不是从屏幕上<br>一般用于 date time label 等需要等待输入的命令<br>@<span class="hljs-keyword">echo</span> off<br><span class="hljs-keyword">echo</span> 2005-05-01&gt;temp.txt<br>date &lt;temp.txt<br>del temp.txt<br>这样就可以不等待输入直接修改当前日期<br><br>28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*<br>命令行传递给批处理的参数<br>%0 批处理文件本身<br>%1 第一个参数<br>%9 第九个参数<br>%* 从第一个参数开始的所有参数<br><br>批参数<span class="hljs-params">(%n)</span>的替代已被增强。您可以使用以下语法:<br><br>     %~1          - 删除引号<span class="hljs-params">(&quot;)</span>，扩充 %1<br>     %~f1         - 将 %1 扩充到一个完全合格的路径名<br>     %~d1         - 仅将 %1 扩充到一个驱动器号<br>     %~p1         - 仅将 %1 扩充到一个路径<br>     %~n1         - 仅将 %1 扩充到一个文件名<br>     %~x1         - 仅将 %1 扩充到一个文件扩展名<br>     %~s1         - 扩充的路径指含有短名<br>     %~a1         - 将 %1 扩充到文件属性<br>     %~t1         - 将 %1 扩充到文件的日期/时间<br>     %~z1         - 将 %1 扩充到文件的大小<br>     %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1<br>                   扩充到找到的第一个完全合格的名称。如果环境<br>                   变量名未被定义，或者没有找到文件，此组合键会<br>                   扩充到空字符串<br><br>可以组合修定符来取得多重结果:<br><br>    %~dp1        - 只将 %1 扩展到驱动器号和路径<br>    %~nx1        - 只将 %1 扩展到文件名和扩展名<br>    %~dp$PATH<span class="hljs-function">:1</span> - 在列在 PATH 环境变量中的目录里查找 %1，<br>                   并扩展到找到的第一个文件的驱动器号和路径。<br>    %~ftza1      - 将 %1 扩展到类似 DIR 的输出行。<br>可以参照 call/? 或 for/? 看出每个参数的含意<br><span class="hljs-keyword">echo</span> load <span class="hljs-string">&quot;%%1&quot;</span> <span class="hljs-string">&quot;%%2&quot;</span>&gt;c<span class="hljs-function">:test.txt</span><br>生成的文件内容为 load <span class="hljs-string">&quot;%1&quot;</span> <span class="hljs-string">&quot;%2&quot;</span><br>批处理文件里，用这个格式把命令行参数输出到文件<br><br>29 <span class="hljs-keyword">if</span><br>判断命令<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%1&quot;</span>==<span class="hljs-string">&quot;/a&quot;</span> <span class="hljs-keyword">echo</span> 第一个参数是<span class="hljs-string">/a</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">/i</span> <span class="hljs-string">&quot;%1&quot;</span> equ <span class="hljs-string">&quot;/a&quot;</span> <span class="hljs-keyword">echo</span> 第一个参数是<span class="hljs-string">/a</span><br><span class="hljs-string">/i</span> 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 <span class="hljs-keyword">if</span>/?<br><span class="hljs-keyword">if</span> exist c<span class="hljs-function">:test.bat</span> <span class="hljs-keyword">echo</span> 存在c<span class="hljs-function">:test.bat</span>文件<br><span class="hljs-keyword">if</span> not exist c<span class="hljs-function">:windows</span> <span class="hljs-params">(</span><br><span class="hljs-params">     echo 不存在c:windows文件夹</span><br><span class="hljs-params">     )</span><br><span class="hljs-keyword">if</span> exist c<span class="hljs-function">:test.bat</span> <span class="hljs-params">(</span><br><span class="hljs-params">     echo 存在c:test.bat</span><br><span class="hljs-params">     )</span> else <span class="hljs-params">(</span><br><span class="hljs-params">     echo 不存在c:test.bat</span><br><span class="hljs-params">     )</span><br><br>30 setlocal 和 endlocal<br>设置”命令扩展名”和”延缓环境变量扩充”<br>SETLOCAL ENABLEEXTENSIONS             <span class="hljs-comment">#启用&quot;命令扩展名&quot;</span><br>SETLOCAL DISABLEEXTENSIONS            <span class="hljs-comment">#停用&quot;命令扩展名&quot;</span><br>SETLOCAL ENABLEDELAYEDEXPANSION       <span class="hljs-comment">#启用&quot;延缓环境变量扩充&quot;</span><br>SETLOCAL DISABLEDELAYEDEXPANSION      <span class="hljs-comment">#停用&quot;延缓环境变量扩充&quot;</span><br>ENDLOCAL                              <span class="hljs-comment">#恢复到使用SETLOCAL语句以前的状态</span><br>“命令扩展名”默认为启用<br>“延缓环境变量扩充”默认为停用<br>批处理结束系统会自动恢复默认值<br>可以修改注册表以禁用<span class="hljs-string">&quot;命令扩展名&quot;</span>，详见 cmd /? 。所以用到<span class="hljs-string">&quot;命令扩展名&quot;</span>的程<br>序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确<br>保程序能在其它系统上正确运行<br><span class="hljs-string">&quot;延缓环境变量扩充&quot;</span>主要用于 <span class="hljs-keyword">if</span> 和 for 的符合语句，在 <span class="hljs-keyword">set</span> 的说明里有其实用例程<br><br>31 <span class="hljs-keyword">set</span><br>设置变量<br>引用变量可在变量名前后加 % ，即 %变量名%<br><span class="hljs-keyword">set</span>                     <span class="hljs-comment">#显示目前所有可用的变量，包括系统变量和自定义的变量</span><br><span class="hljs-keyword">echo</span> %SystemDrive%      <span class="hljs-comment">#显示系统盘盘符。系统变量可以直接引用</span><br><span class="hljs-keyword">set</span> p                   <span class="hljs-comment">#显示所有以p开头的变量，要是一个也没有就设errorlevel=1</span><br><span class="hljs-keyword">set</span> p=aa1bb1aa2bb2      <span class="hljs-comment">#设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2</span><br><span class="hljs-keyword">echo</span> %p%                <span class="hljs-comment">#显示变量p代表的字符串，即aa1bb1aa2bb2</span><br><span class="hljs-keyword">echo</span> %p:~6%             <span class="hljs-comment">#显示变量p中第6个字符以后的所有字符，即aa2bb2</span><br><span class="hljs-keyword">echo</span> %p:~6,3%           <span class="hljs-comment">#显示第6个字符以后的3个字符，即aa2</span><br><span class="hljs-keyword">echo</span> %p:~0,3%           <span class="hljs-comment">#显示前3个字符，即aa1</span><br><span class="hljs-keyword">echo</span> %p:~-2%            <span class="hljs-comment">#显示最后面的2个字符，即b2</span><br><span class="hljs-keyword">echo</span> %p:~0,-2%          <span class="hljs-comment">#显示除了最后2个字符以外的其它字符，即aa1bb1aa2b</span><br><span class="hljs-keyword">echo</span> %p<span class="hljs-function">:aa</span>=c%           <span class="hljs-comment">#用c替换变量p中所有的aa，即显示c1bb1c2bb2</span><br><span class="hljs-keyword">echo</span> %p<span class="hljs-function">:aa</span>=%            <span class="hljs-comment">#将变量p中的所有aa字符串置换为空，即显示1bb12bb2</span><br><span class="hljs-keyword">echo</span> %p:*bb=c%          <span class="hljs-comment">#第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2</span><br><span class="hljs-keyword">set</span> p=%p:*bb=c%         <span class="hljs-comment">#设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2</span><br><span class="hljs-keyword">set</span> <span class="hljs-string">/a</span> p=39             <span class="hljs-comment">#设置p为数值型变量，值为39</span><br><span class="hljs-keyword">set</span> <span class="hljs-string">/a</span> p=39/10          <span class="hljs-comment">#支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3</span><br><span class="hljs-keyword">set</span> <span class="hljs-string">/a</span> p=p/10           <span class="hljs-comment">#用 /a 参数时，在 = 后面的变量可以不加%直接引用</span><br><span class="hljs-keyword">set</span> <span class="hljs-string">/a</span> p=”1&amp;0″          <span class="hljs-comment">#”与”运算，要加引号。其它支持的运算符参见set/?</span><br><span class="hljs-keyword">set</span> p=                  <span class="hljs-comment">#取消p变量</span><br><span class="hljs-keyword">set</span> <span class="hljs-string">/p</span> p=请输入<br>屏幕上显示”请输入”，并会将输入的字符串赋值给变量p<br>注意这条可以用来取代 choice 命令<br>注意变量在 <span class="hljs-keyword">if</span> 和 for 的复合语句里是一次性全部替换的，如<br>@<span class="hljs-keyword">echo</span> off<br><span class="hljs-keyword">set</span> p=aaa<br><span class="hljs-keyword">if</span> %p%==aaa <span class="hljs-params">(</span><br><span class="hljs-params">     echo %p%</span><br><span class="hljs-params">     set <span class="hljs-attr">p</span>=bbb</span><br><span class="hljs-params">     echo %p%</span><br><span class="hljs-params">     )</span><br>结果将显示<br>aaa<br>aaa<br>因为在读取 <span class="hljs-keyword">if</span> 语句时已经将所有 %p% 替换为aaa<br>这里的<span class="hljs-string">&quot;替换&quot;</span>，在 /? 帮助里就是指<span class="hljs-string">&quot;扩充&quot;</span>、<span class="hljs-string">&quot;环境变量扩充&quot;</span><br>可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!<br>@<span class="hljs-keyword">echo</span> off<br>SETLOCAL ENABLEDELAYEDEXPANSION<br><span class="hljs-keyword">set</span> p=aaa<br><span class="hljs-keyword">if</span> %p%==aaa <span class="hljs-params">(</span><br><span class="hljs-params">     echo %p%</span><br><span class="hljs-params">     set <span class="hljs-attr">p</span>=bbb</span><br><span class="hljs-params">     echo !p!</span><br><span class="hljs-params">     )</span><br>ENDLOCAL<br>结果将显示<br>aaa<br>bbb<br>还有几个动态变量，运行 <span class="hljs-keyword">set</span> 看不到<br>%CD%                   <span class="hljs-comment">#代表当前目录的字符串</span><br>%DATE%                 <span class="hljs-comment">#当前日期</span><br>%TIME%                 <span class="hljs-comment">#当前时间</span><br>%RANDOM%               <span class="hljs-comment">#随机整数，介于0~32767</span><br>%ERRORLEVEL%           <span class="hljs-comment">#当前 ERRORLEVEL 值</span><br>%CMDEXTVERSION%        <span class="hljs-comment">#当前命令处理器扩展名版本号</span><br>%CMDCMDLINE%           <span class="hljs-comment">#调用命令处理器的原始命令行</span><br>可以用<span class="hljs-keyword">echo</span>命令查看每个变量值，如 <span class="hljs-keyword">echo</span> %time%<br>注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到<br><br>32 start<br>批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令<br><br>33 call<br>批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行<br>有时有的应用程序用start调用出错的，也可以call调用<br><br>34 choice <span class="hljs-params">(外部命令)</span><br>选择命令<br>让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……<br>win98里是choice.com<br>win2000pro里没有，可以从win98里拷过来<br>win2003里是choice.exe<br>choice <span class="hljs-string">/N</span> <span class="hljs-string">/C</span> y <span class="hljs-string">/T</span> 5 <span class="hljs-string">/D</span> y&gt;nul<br>延时5秒<br><br>35 assoc 和 ftype<br>文件关联<br>assoc 设置&#x27;文件扩展名&#x27;关联，关联到&#x27;文件类型&#x27;<br>ftype 设置&#x27;文件类型&#x27;关联，关联到&#x27;执行程序和参数&#x27;<br>当你双击一个<span class="hljs-string">.txt</span>文件时，windows并不是根据<span class="hljs-string">.txt</span>直接判断用 notepad.exe 打开<br>而是先判断<span class="hljs-string">.txt</span>属于 txtfile &#x27;文件类型&#x27;<br>再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1<br>可以在<span class="hljs-string">&quot;文件夹选项&quot;</span>→<span class="hljs-string">&quot;文件类型&quot;</span>里修改这2种关联<br>assoc            <span class="hljs-comment">#显示所有&#x27;文件扩展名&#x27;关联</span><br>assoc <span class="hljs-string">.txt</span>       <span class="hljs-comment">#显示.txt代表的&#x27;文件类型&#x27;，结果显示 .txt=txtfile</span><br>assoc <span class="hljs-string">.doc</span>       <span class="hljs-comment">#显示.doc代表的&#x27;文件类型&#x27;，结果显示 .doc=Word.Document.8</span><br>assoc <span class="hljs-string">.exe</span>       <span class="hljs-comment">#显示.exe代表的&#x27;文件类型&#x27;，结果显示 .exe=exefile</span><br>ftype            <span class="hljs-comment">#显示所有&#x27;文件类型&#x27;关联</span><br>ftype exefile    <span class="hljs-comment">#显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %* </span><br>assoc <span class="hljs-string">.txt=Word.Document.8</span><br>设置<span class="hljs-string">.txt</span>为word类型的文档，可以看到<span class="hljs-string">.txt</span>文件的图标都变了<br>assoc <span class="hljs-string">.txt=txtfile</span><br>恢复<span class="hljs-string">.txt</span>的正确关联<br>ftype exefile=<span class="hljs-string">&quot;%1&quot;</span> %*<br>恢复 exefile 的正确关联<br>如果该关联已经被破坏，可以运行 <span class="hljs-keyword">command</span>.com ，再输入这条命令<br><br>36 pushd 和 popd<br>切换当前目录<br>@<span class="hljs-keyword">echo</span> off<br>c: &amp; <span class="hljs-keyword">cd</span> &amp; md mp3        <span class="hljs-comment">#在 C: 建立 mp3 文件夹</span><br>md d<span class="hljs-function">:mp4</span>                <span class="hljs-comment">#在 D: 建立 mp4 文件夹</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">/d</span> d<span class="hljs-function">:mp4</span>             <span class="hljs-comment">#更改当前目录为 d:mp4</span><br>pushd c<span class="hljs-function">:mp3</span>             <span class="hljs-comment">#保存当前目录，并切换当前目录为 c:mp3</span><br>popd                     <span class="hljs-comment">#恢复当前目录为刚才保存的 d:mp4</span><br><br>37 for<br>循环命令<br>这个比较复杂，请对照 for/? 来看<br>for %%i in <span class="hljs-params">(c: d: e: f:)</span> do <span class="hljs-keyword">echo</span> %%i<br>依次调用小括号里的每个字符串，执行 do 后面的命令<br>注意%%i，在批处理中 for 语句调用参数用2个%<br>默认的字符串分隔符是<span class="hljs-string">&quot;空格键&quot;</span>，<span class="hljs-string">&quot;Tab键&quot;</span>，<span class="hljs-string">&quot;回车键&quot;</span><br>for %%i in <span class="hljs-params">(*.txt)</span> do find <span class="hljs-string">&quot;abc&quot;</span> %%i<br>对当前目录里所有的txt文件执行 find 命令<br>for <span class="hljs-string">/r</span> . %%i in <span class="hljs-params">(*.txt)</span> do find <span class="hljs-string">&quot;abc&quot;</span> %%i<br>在当前目录和子目录里所有的<span class="hljs-string">.txt</span>文件中搜索包含 abc 字符串的行<br>for <span class="hljs-string">/r</span> . %%i in <span class="hljs-params">(.)</span> do <span class="hljs-keyword">echo</span> %%~pni<br>显示当前目录名和所有子目录名，包括路径，不包括盘符<br>for <span class="hljs-string">/r</span> d<span class="hljs-function">:mp3</span> %%i in <span class="hljs-params">(*.mp3)</span> do <span class="hljs-keyword">echo</span> %%i&gt;&gt;d<span class="hljs-function">:mp3.txt</span><br>把 d<span class="hljs-function">:mp3</span> 及其子目录里的mp3文件的文件名都存到 d<span class="hljs-function">:mp3.txt</span> 里去<br>for <span class="hljs-string">/l</span> %%i in <span class="hljs-params">(2,1,8)</span> do <span class="hljs-keyword">echo</span> %%i<br>生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1<br>for <span class="hljs-string">/f</span> %%i in <span class="hljs-params">(&#x27;set&#x27;)</span> do <span class="hljs-keyword">echo</span> %%i<br>对 <span class="hljs-keyword">set</span> 命令的输出结果循环调用，每行一个<br>for <span class="hljs-string">/f</span> <span class="hljs-string">&quot;eol=P&quot;</span> %%i in <span class="hljs-params">(&#x27;set&#x27;)</span> do <span class="hljs-keyword">echo</span> %%i<br>取 <span class="hljs-keyword">set</span> 命令的输出结果，忽略以 P 开头的那几行<br>for <span class="hljs-string">/f</span> %%i in <span class="hljs-params">(d:mp3.txt)</span> do <span class="hljs-keyword">echo</span> %%i<br>显示 d<span class="hljs-function">:mp3.txt</span> 里的每个文件名，每行一个，不支持带空格的名称<br>for <span class="hljs-string">/f</span> <span class="hljs-string">&quot;delims=&quot;</span> %%i in <span class="hljs-params">(d:mp3.txt)</span> do <span class="hljs-keyword">echo</span> %%i<br>显示 d<span class="hljs-function">:mp3.txt</span> 里的每个文件名，每行一个，支持带空格的名称<br>for <span class="hljs-string">/f</span> <span class="hljs-string">&quot;skip=5 tokens=4&quot;</span> %%a in <span class="hljs-params">(&#x27;dir&#x27;)</span> do <span class="hljs-keyword">echo</span> %%a<br>对 dir 命令的结果，跳过前面5行，余下的每行取第4列<br>每列之间的分隔符为默认的<span class="hljs-string">&quot;空格&quot;</span><br>可以注意到 dir 命令输出的前5行是没有文件名的<br>for <span class="hljs-string">/f</span> <span class="hljs-string">&quot;tokens=1,2,3 delims=- &quot;</span> %%a in <span class="hljs-params">(&#x27;date /t&#x27;)</span> do <span class="hljs-params">(</span><br><span class="hljs-params">     echo %%a</span><br><span class="hljs-params">     echo %%b</span><br><span class="hljs-params">     echo %%c</span><br><span class="hljs-params">     )</span><br>如果一个循环你需要执行多条命令，可以在do后用<span class="hljs-params">()</span>括起来。对 date <span class="hljs-string">/t</span> 的输出结果，每行取1、2、3列<br>第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列<br>分隔符指定为 - 和<span class="hljs-string">&quot;空格&quot;</span>，注意 delims=- 后面有个<span class="hljs-string">&quot;空格&quot;</span><br>其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的<br><br>for <span class="hljs-string">/f</span> <span class="hljs-string">&quot;tokens=2* delims=- &quot;</span> %%a in <span class="hljs-params">(&#x27;date /t&#x27;)</span> do <span class="hljs-keyword">echo</span> %%b<br>取第2列给 %%a ，其后的列都给 %%b<br><br>38 subst <span class="hljs-params">(外部命令)</span><br>映射磁盘<br>subst z: serverd      <span class="hljs-comment">#这样输入z:就可以访问serverd了</span><br>subst z: <span class="hljs-string">/d</span>              <span class="hljs-comment">#取消该映射</span><br>subst                    <span class="hljs-comment">#显示目前所有的映时</span><br><br>39   xcopy <span class="hljs-params">(外部命令)</span><br>文件拷贝<br><br>COPY和XCOPY都可以复制文件，这是它们的共处，区别如下：<br>1. COPY不能复制文件夹下的文件，而XCOPY可以。<br>如：有这样的文件结构：A盘下有2个文件夹，为A和B，在A下有1个文件和1个文件夹，为AA.TXT和AB文件夹，在AB文件夹下有个AAA的文件夹。现在要将A文件夹下所有的文件和文件夹都复制到B文件夹下，并保持原有文件结构。<br><br>解：最简单的方式就是用XCOPY命令<br>A:\&gt;XCOPY A:\A\*.* A:\B <span class="hljs-string">/S</span> <span class="hljs-string">/E</span><br>~~~~<span class="hljs-params">-------------------------</span><br><br>（~~~~表示机器反映出的内容，<span class="hljs-params">----</span>表示你输入的内容）<br><br>2. XCOPY不能连接文件，而COPY可以连接文件<br>如：将A盘中的A.TXT和B.TXT文件连接起来，连接后的文件名为C.TXT<br>解：用COPY命令即可完成此项操作。<br>A:\&gt;COPY A.TXT+B.TXT C.TXT<br><br><br>40 <span class="hljs-keyword">shutdown</span><br>关机<br><span class="hljs-keyword">shutdown</span> -s -f -t 300  <span class="hljs-comment">#300秒后强制关机</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="windows" scheme="http://www.leiyawu.com/categories/windows/"/>
    
    
    <category term="windows" scheme="http://www.leiyawu.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes之secret</title>
    <link href="http://www.leiyawu.com/2018/11/14/kubernetes%E4%B9%8Bsecret/"/>
    <id>http://www.leiyawu.com/2018/11/14/kubernetes%E4%B9%8Bsecret/</id>
    <published>2018-11-14T07:36:00.000Z</published>
    <updated>2021-08-03T08:52:51.696Z</updated>
    
    <content type="html"><![CDATA[<p>Secret解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。</p><h4 id="Secret类型："><a href="#Secret类型：" class="headerlink" title="Secret类型："></a>Secret类型：</h4><ol><li>Opaque：base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱。</li><li>kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。</li><li>kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/kubernetes.io/serviceaccount中。</li></ol><h5 id="1-Opaque-Secret"><a href="#1-Opaque-Secret" class="headerlink" title="1.Opaque Secret"></a>1.Opaque Secret</h5><p>Opaque类型的数据是一个map类型，要求value是base64编码格式： 比如来创建一个用户名为：admin，密码为： 1f2d1e2e67df的Secret 对象，首先把这用户名和密码做base64编码，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;admin&quot;</span> | base64</span><br>YWRtaW4=<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;1f2d1e2e67df&quot;</span> | base64</span><br>MWYyZDFlMmU2N2Rm<br></code></pre></td></tr></table></figure><p>然后就可以利用上面编码过后的数据来编写一个YAML文件：(secrets.yml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysecret<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  password:</span> MWYyZDFlMmU2N2Rm<br><span class="hljs-symbol">  username:</span> YWRtaW4=<br></code></pre></td></tr></table></figure><p>同样的就可以使用kubectl命令来创建了： 创建secret：kubectl create -f secrets.yml。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get secret</span><br><span class="hljs-attribute">NAME</span>                  TYPE                                  DATA      AGE<br><span class="hljs-attribute">default</span>-token-xxx   kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">45</span>d<br><span class="hljs-attribute">mysecret</span>              Opaque                                <span class="hljs-number">2</span>         <span class="hljs-number">7</span>s<br></code></pre></td></tr></table></figure><p>注意：其中default-token-xxx为创建集群时默认创建的secret，被serviceacount/default引用。 可以使用describe命令查看详情，如果想看到Data里面的详细信息，可以输出成YAML文件进行查看</p><p>如果是从文件创建secret，则可以用更简单的kubectl命令，比如创建tls的secret：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ kubectl <span class="hljs-meta">create</span> secret generic helloworld-tls \<br>  --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=<span class="hljs-meta">key</span>.pem \<br>  --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=cert.pem<br></code></pre></td></tr></table></figure><h5 id="2-Opaque-Secret的使用"><a href="#2-Opaque-Secret的使用" class="headerlink" title="2.Opaque Secret的使用"></a>2.Opaque Secret的使用</h5><p>创建好secret之后，有两种方式来使用它：</p><ul><li>以Volume方式</li><li>以环境变量方式</li><li>以Volume方式挂载制定的key</li></ul><h6 id="将Secret挂载到Volume中"><a href="#将Secret挂载到Volume中" class="headerlink" title="将Secret挂载到Volume中"></a>将Secret挂载到Volume中</h6><p>用一个Pod来验证下Volume挂载，创建一个Pod文件：(secret2-pod.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/my_project_id/pg:v1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/etc/secrets&quot;</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cp</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5432</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><p>查看Pod中对应的信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># ls <span class="hljs-regexp">/etc/</span>secrets<br>password  username<br># cat  <span class="hljs-regexp">/etc/</span>secrets/username<br>admin<br># cat  <span class="hljs-regexp">/etc/</span>secrets/password<br><span class="hljs-number">1</span>f2d1e2e67df<br></code></pre></td></tr></table></figure><p>查看输出日志：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>kubectl logs secret2-pod<br>password<br>username<br></code></pre></td></tr></table></figure><p>可以看到secret把两个key挂载成了两个对应的文件。</p><span id="more"></span><h6 id="将Secret导出到环境变量中"><a href="#将Secret导出到环境变量中" class="headerlink" title="将Secret导出到环境变量中"></a>将Secret导出到环境变量中</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wordpress-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">wordpress</span><br>        <span class="hljs-attr">visualize:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;wordpress&quot;</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;wordpress&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">WORDPRESS_DB_USER</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">WORDPRESS_DB_PASSWORD</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><p>主要上面环境变量中定义的secretKeyRef关键字，和configMapKeyRef比较类似，一个是从Secret对象中获取，一个是从ConfigMap对象中获取</p><p>创建上面的Pod：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> secret1<span class="hljs-literal">-pod</span>.yaml<br>pod <span class="hljs-string">&quot;secret1-pod&quot;</span> created<br></code></pre></td></tr></table></figure><p>然后查看Pod的日志输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl logs secret1-pod<br><span class="hljs-attribute">USERNAME</span>=admin<br><span class="hljs-attribute">PASSWORD</span>=admin321<br></code></pre></td></tr></table></figure><p>可以看到有 USERNAME 和 PASSWORD 两个环境变量输出出来。</p><h6 id="将Secret挂载指定的key"><a href="#将Secret挂载指定的key" class="headerlink" title="将Secret挂载指定的key"></a>将Secret挂载指定的key</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">511</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">tst/psd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-number">511</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">tst/usr</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/etc/secrets&quot;</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cp</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><p>可以直接用kubectl命令来创建用于docker registry认证的secret：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistrykey <span class="hljs-attribute">--docker-server</span>=DOCKER_REGISTRY_SERVER <span class="hljs-attribute">--docker-username</span>=DOCKER_USER <span class="hljs-attribute">--docker-password</span>=DOCKER_PASSWORD <span class="hljs-attribute">--docker-email</span>=DOCKER_EMAIL<span class="hljs-built_in"></span><br><span class="hljs-built_in">secret </span><span class="hljs-string">&quot;myregistrykey&quot;</span> created.<br></code></pre></td></tr></table></figure><p>查看secret的内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># kubectl get secret myregistrykey  -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br>  .dockercfg: eyJjY3IuY2NzLnRlbmNlbnR5dW4uY29tL3RlbmNlbnR5dW4iOnsidXNlcm5hbWUiOiIzMzIxMzM3OTk0IiwicGFzc3dvcmQiOiIxMjM0NTYuY29tIiwiZW1haWwiOiIzMzIxMzM3OTk0QHFxLmNvbSIsImF1dGgiOiJNek15TVRNek56azVORG94TWpNME5UWXVZMjl0In19<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2017</span><span class="hljs-number">-08</span><span class="hljs-number">-04</span>T02:<span class="hljs-number">06</span>:<span class="hljs-number">05</span>Z<br><span class="hljs-symbol">  name:</span> myregistrykey<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;1374279324&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-meta-keyword">/api/</span>v1<span class="hljs-meta-keyword">/namespaces/</span>default<span class="hljs-meta-keyword">/secrets/</span>myregistrykey<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">78f</span>6a423<span class="hljs-number">-78</span>b9<span class="hljs-number">-11e7</span>-a70a<span class="hljs-number">-525400</span>bc11f0<br><span class="hljs-symbol">type:</span> kubernetes.io/dockercfg<br></code></pre></td></tr></table></figure><p>也可以直接读取~/.dockercfg的内容来创建：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ kubectl <span class="hljs-meta">create</span> secret docker-registry myregistrykey \<br>  --<span class="hljs-meta">from</span>-<span class="hljs-meta">file</span>=<span class="hljs-string">&quot;~/.docker/config.json&quot;</span><br></code></pre></td></tr></table></figure><p>在创建Pod的时候，通过imagePullSecrets来引用刚创建的myregistrykey:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">foo</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">janedoe/awesomeapp:v1</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myregistrykey</span><br></code></pre></td></tr></table></figure><p>kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ kubectl run nginx --image nginx<br>deployment <span class="hljs-string">&quot;nginx&quot;</span> created<br>$ kubectl get pods<br>NAME                     READY     STATUS    RESTARTS   AGE<br>nginx<span class="hljs-number">-3137573019</span>-md1u2   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">13</span>s<br>$ kubectl exec nginx<span class="hljs-number">-3137573019</span>-md1u2 ls /run/secrets/kubernetes.io/serviceaccount<br>ca.crt<br><span class="hljs-keyword">namespace</span><br>token<br></code></pre></td></tr></table></figure><h5 id="Secret与ConfigMap对比"><a href="#Secret与ConfigMap对比" class="headerlink" title="Secret与ConfigMap对比"></a>Secret与ConfigMap对比</h5><p>相同点：</p><ul><li>key/value的形式</li><li>属于某个特定的namespace</li><li>可以导出到环境变量</li><li>可以通过目录/文件形式挂载(支持挂载所有key和部分key)</li></ul><p>不同点：</p><ul><li>Secret可以被ServerAccount关联(使用)</li><li>Secret可以存储register的鉴权信息，用在ImagePullSecret参数中，用于拉取私有仓库的镜像</li><li>Secret支持Base64加密</li><li>Secret分为kubernetes.io/Service Account，kubernetes.io/dockerconfigjson，Opaque三种类型,Configmap不区分类型</li><li>Secret文件存储在tmpfs文件系统中，Pod删除后Secret文件也会对应的删除。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Secret解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。&lt;/p&gt;
&lt;h4 id=&quot;Secret类型：&quot;&gt;&lt;a href=&quot;#Secret类型：&quot; class=&quot;headerlink&quot; title=&quot;Secret类型：&quot;&gt;&lt;/a&gt;Secret类型：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Opaque：base64编码格式的Secret，用来存储密码、密钥等；但数据也通过base64 –decode解码得到原始数据，所有加密性很弱。&lt;/li&gt;
&lt;li&gt;kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。&lt;/li&gt;
&lt;li&gt;kubernetes.io/service-account-token： 用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod目录/run/secrets/kubernetes.io/serviceaccount中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;1-Opaque-Secret&quot;&gt;&lt;a href=&quot;#1-Opaque-Secret&quot; class=&quot;headerlink&quot; title=&quot;1.Opaque Secret&quot;&gt;&lt;/a&gt;1.Opaque Secret&lt;/h5&gt;&lt;p&gt;Opaque类型的数据是一个map类型，要求value是base64编码格式： 比如来创建一个用户名为：admin，密码为： 1f2d1e2e67df的Secret 对象，首先把这用户名和密码做base64编码，&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt; | base64&lt;/span&gt;&lt;br&gt;YWRtaW4=&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;1f2d1e2e67df&amp;quot;&lt;/span&gt; | base64&lt;/span&gt;&lt;br&gt;MWYyZDFlMmU2N2Rm&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以利用上面编码过后的数据来编写一个YAML文件：(secrets.yml)&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs dts&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;kind:&lt;/span&gt; Secret&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;  name:&lt;/span&gt; mysecret&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;type:&lt;/span&gt; Opaque&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;  password:&lt;/span&gt; MWYyZDFlMmU2N2Rm&lt;br&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;  username:&lt;/span&gt; YWRtaW4=&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的就可以使用kubectl命令来创建了： 创建secret：kubectl create -f secrets.yml。&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs apache&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# kubectl get secret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;NAME&lt;/span&gt;                  TYPE                                  DATA      AGE&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;default&lt;/span&gt;-token-xxx   kubernetes.io/service-account-token   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;d&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;mysecret&lt;/span&gt;              Opaque                                &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;s&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：其中default-token-xxx为创建集群时默认创建的secret，被serviceacount/default引用。 可以使用describe命令查看详情，如果想看到Data里面的详细信息，可以输出成YAML文件进行查看&lt;/p&gt;
&lt;p&gt;如果是从文件创建secret，则可以用更简单的kubectl命令，比如创建tls的secret：&lt;/p&gt;
&lt;figure class=&quot;highlight sas&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sas&quot;&gt;$ kubectl &lt;span class=&quot;hljs-meta&quot;&gt;create&lt;/span&gt; secret generic helloworld-tls \&lt;br&gt;  --&lt;span class=&quot;hljs-meta&quot;&gt;from&lt;/span&gt;-&lt;span class=&quot;hljs-meta&quot;&gt;file&lt;/span&gt;=&lt;span class=&quot;hljs-meta&quot;&gt;key&lt;/span&gt;.pem \&lt;br&gt;  --&lt;span class=&quot;hljs-meta&quot;&gt;from&lt;/span&gt;-&lt;span class=&quot;hljs-meta&quot;&gt;file&lt;/span&gt;=cert.pem&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;2-Opaque-Secret的使用&quot;&gt;&lt;a href=&quot;#2-Opaque-Secret的使用&quot; class=&quot;headerlink&quot; title=&quot;2.Opaque Secret的使用&quot;&gt;&lt;/a&gt;2.Opaque Secret的使用&lt;/h5&gt;&lt;p&gt;创建好secret之后，有两种方式来使用它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以Volume方式&lt;/li&gt;
&lt;li&gt;以环境变量方式&lt;/li&gt;
&lt;li&gt;以Volume方式挂载制定的key&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;将Secret挂载到Volume中&quot;&gt;&lt;a href=&quot;#将Secret挂载到Volume中&quot; class=&quot;headerlink&quot; title=&quot;将Secret挂载到Volume中&quot;&gt;&lt;/a&gt;将Secret挂载到Volume中&lt;/h6&gt;&lt;p&gt;用一个Pod来验证下Volume挂载，创建一个Pod文件：(secret2-pod.yaml)&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attr&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;labels:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-attr&quot;&gt;spec:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;volumes:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;secrets&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;secret:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;secretName:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;mysecret&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;containers:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;registry.martin.com:5000/my_project_id/pg:v1&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;volumeMounts:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;secrets&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;mountPath:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/etc/secrets&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;readOnly:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;ports:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;cp&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;containerPort:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5432&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-attr&quot;&gt;hostPort:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5432&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看Pod中对应的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs gradle&quot;&gt;# ls &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;secrets&lt;br&gt;password  username&lt;br&gt;# cat  &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;secrets/username&lt;br&gt;admin&lt;br&gt;# cat  &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;secrets/password&lt;br&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;f2d1e2e67df&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看输出日志：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs elixir&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;kubectl logs secret2-pod&lt;br&gt;password&lt;br&gt;username&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到secret把两个key挂载成了两个对应的文件。&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>生成k8s证书的三种方式</title>
    <link href="http://www.leiyawu.com/2018/08/21/%E7%94%9F%E6%88%90k8s%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.leiyawu.com/2018/08/21/%E7%94%9F%E6%88%90k8s%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2018-08-21T09:53:00.000Z</published>
    <updated>2021-08-03T08:54:10.684Z</updated>
    
    <content type="html"><![CDATA[<p>根据官方文档，生成k8s秘钥证书及相关管理证书有三种方式，其本质都是通过openssl:</p><ul><li>cfssl</li><li>easyrsa</li><li>openssl</li></ul><p>官方文档：<a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/">https://kubernetes.io/docs/concepts/cluster-administration/certificates/</a></p><h5 id="cfssl方式"><a href="#cfssl方式" class="headerlink" title="cfssl方式"></a>cfssl方式</h5><h6 id="1-cfssl下载地址"><a href="#1-cfssl下载地址" class="headerlink" title="1.cfssl下载地址:"></a>1.cfssl下载地址:</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">VERSION=R1.<span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;cfssl,cfssljson,cfssl-certinfo&#125;<br><span class="hljs-keyword">do</span><br>wget https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/$&#123;VERSION&#125;/</span><span class="hljs-variable">$&#123;i&#125;</span>_linux-amd64 -O <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><span class="hljs-variable">$&#123;i&#125;</span><br>done<br></code></pre></td></tr></table></figure><h6 id="2-生成CA配置文件"><a href="#2-生成CA配置文件" class="headerlink" title="2.生成CA配置文件"></a>2.生成CA配置文件</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir ssl &amp;&amp; cd ssl<br>cfssl print-defaults config &gt; config.json<br>cfssl print-defaults csr &gt; csr.json<br>cat &gt; ca-config.json &lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h6 id="3-生成CA签名配置文件"><a href="#3-生成CA签名配置文件" class="headerlink" title="3.生成CA签名配置文件"></a>3.生成CA签名配置文件</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> &gt; <span class="hljs-keyword">ca</span>-csr.json &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>:[&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>  &#125;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><span id="more"></span><h6 id="4-生成私钥和证书"><a href="#4-生成私钥和证书" class="headerlink" title="4.生成私钥和证书"></a>4.生成私钥和证书</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cfssl gencert -initca <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span><br></code></pre></td></tr></table></figure><h6 id="5-创建一个用于生成API-Server的密钥和证书的JSON配置文件"><a href="#5-创建一个用于生成API-Server的密钥和证书的JSON配置文件" class="headerlink" title="5.创建一个用于生成API Server的密钥和证书的JSON配置文件"></a>5.创建一个用于生成API Server的密钥和证书的JSON配置文件</h6><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cat &gt; kubernetes-csr.<span class="hljs-keyword">json </span>&lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;MASTER_IP&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;MASTER_CLUSTER_IP&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>  &#125;]<br>&#125; <br>EOF<br><span class="hljs-comment">#该文件需要包含所有使用该证书的ip和域名列表，包括etcd集群、kubernetes master集群、以及apiserver 集群内部cluster ip。</span><br></code></pre></td></tr></table></figure><h6 id="6-生成-kubernetes-证书和私钥"><a href="#6-生成-kubernetes-证书和私钥" class="headerlink" title="6.生成 kubernetes 证书和私钥"></a>6.生成 kubernetes 证书和私钥</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes<br></code></pre></td></tr></table></figure><h6 id="7-创建admin证书"><a href="#7-创建admin证书" class="headerlink" title="7.创建admin证书"></a>7.创建admin证书</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat &gt; <span class="hljs-keyword">admin</span>-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;admin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;system:masters&quot;,<br>      &quot;OU&quot;: &quot;System&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes <span class="hljs-keyword">admin</span>-csr.json | cfssljson -bare <span class="hljs-keyword">admin</span><br># 证书O配置为<span class="hljs-keyword">system</span>:masters 在集群内部<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span>的clusterrolebinding将<span class="hljs-keyword">system</span>:masters组和<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span> clusterrole绑定在一起<br></code></pre></td></tr></table></figure><h6 id="8-创建kube-proxy证书"><a href="#8-创建kube-proxy证书" class="headerlink" title="8.创建kube-proxy证书"></a>8.创建kube-proxy证书</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> &gt; kube-proxy-csr.json &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br>cfssl gencert -<span class="hljs-keyword">ca</span>=<span class="hljs-keyword">ca</span>.pem -<span class="hljs-keyword">ca</span>-key=<span class="hljs-keyword">ca</span>-key.pem -config=<span class="hljs-keyword">ca</span>-config.json -<span class="hljs-keyword">profile</span>=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy<br># 该证书用户名为<span class="hljs-built_in">system</span>:kube-proxy，预定义的<span class="hljs-built_in">system</span>:node-proxier clusterrolebindings将 <span class="hljs-built_in">system</span>:kube-proxy用户和<span class="hljs-built_in">system</span>:node-proxier角色绑定在一起<br></code></pre></td></tr></table></figure><h6 id="9-校验证书信息"><a href="#9-校验证书信息" class="headerlink" title="9.校验证书信息"></a>9.校验证书信息</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cfssl</span>-certinfo -cert kubernetes.pem<br><span class="hljs-attribute">openssl</span> x<span class="hljs-number">509</span>  -noout -text -in  kubernetes.pem<br></code></pre></td></tr></table></figure><h6 id="10-拷贝证书"><a href="#10-拷贝证书" class="headerlink" title="10.拷贝证书"></a>10.拷贝证书</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/ssl/</span> &amp;&amp; cp *.pem <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/ssl/</span><br></code></pre></td></tr></table></figure><h5 id="easyrsa方式"><a href="#easyrsa方式" class="headerlink" title="easyrsa方式"></a>easyrsa方式</h5><h6 id="1-下载："><a href="#1-下载：" class="headerlink" title="1.下载："></a>1.下载：</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">curl -L -O https:<span class="hljs-string">//storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz</span><br>tar xzf easy-rsa.tar.gz<br><span class="hljs-keyword">cd</span> easy-rsa-master/easyrsa3<br><span class="hljs-string">./easyrsa</span> init-pki<br><span class="hljs-string">./easyrsa</span> <span class="hljs-params">--batch</span> <span class="hljs-string">&quot;--req-cn=172.26.6.1@`date +%s`&quot;</span> build-ca nopass<br></code></pre></td></tr></table></figure><h6 id="2-生成-kubernetes-证书和私钥"><a href="#2-生成-kubernetes-证书和私钥" class="headerlink" title="2.生成 kubernetes 证书和私钥"></a>2.生成 kubernetes 证书和私钥</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">./easyrsa --<span class="hljs-attr">subject-alt-name=</span><span class="hljs-string">&quot;IP:172.26.6.1,IP:10.254.0.1,DNS:kubernetes.default&quot;</span> build-server-full kubernetes-<span class="hljs-keyword">master</span> <span class="hljs-title">nopass</span><br></code></pre></td></tr></table></figure><h6 id="3-签发admin证书"><a href="#3-签发admin证书" class="headerlink" title="3.签发admin证书"></a>3.签发admin证书</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./easyrsa</span> <span class="hljs-params">--dn-mode=org</span> <span class="hljs-params">--req-cn=admin</span> <span class="hljs-params">--req-org=system</span><span class="hljs-function">:masters</span> <span class="hljs-params">--req-c=</span> <span class="hljs-params">--req-st=</span> <span class="hljs-params">--req-city=</span> <span class="hljs-params">--req-email=</span> <span class="hljs-params">--req-ou=</span> build-client-full admin nopass<br></code></pre></td></tr></table></figure><h5 id="openssl方式"><a href="#openssl方式" class="headerlink" title="openssl方式"></a>openssl方式</h5><h6 id="1-生成ca"><a href="#1-生成ca" class="headerlink" title="1.生成ca"></a>1.生成ca</h6><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-meta">out</span> ca.<span class="hljs-meta">key</span> 2048<br>openssl req -x509 -new -nodes -<span class="hljs-meta">key</span> ca.<span class="hljs-meta">key</span> -subj <span class="hljs-string">&quot;/CN=172.26.6.1&quot;</span> -days 10000 -<span class="hljs-meta">out</span> ca.crt<br></code></pre></td></tr></table></figure><h6 id="2-kubernetes证书和私钥"><a href="#2-kubernetes证书和私钥" class="headerlink" title="2.kubernetes证书和私钥"></a>2.kubernetes证书和私钥</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out server<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>cat &gt;csr<span class="hljs-selector-class">.conf</span> &lt;&lt;EOF<br><span class="hljs-selector-attr">[ req ]</span><br>default_bits = <span class="hljs-number">2048</span><br>prompt = no<br>default_md = sha256<br>req_extensions = req_ext<br>distinguished_name = dn<br>    <br><span class="hljs-selector-attr">[ dn ]</span><br>C = &lt;country&gt;<br>ST = &lt;state&gt;<br>L = &lt;city&gt;<br>O = &lt;organization&gt;<br>OU = &lt;organization unit&gt;<br>CN = <span class="hljs-number">172.26</span>.<span class="hljs-number">6.1</span><br>    <br><span class="hljs-selector-attr">[ req_ext ]</span><br>subjectAltName = @alt_names<br>    <br><span class="hljs-selector-attr">[ alt_names ]</span><br>DNS.<span class="hljs-number">1</span> = kubernetes<br>DNS.<span class="hljs-number">2</span> = kubernetes<span class="hljs-selector-class">.default</span><br>DNS.<span class="hljs-number">3</span> = kubernetes<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><br>DNS.<span class="hljs-number">4</span> = kubernetes<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><br>DNS.<span class="hljs-number">5</span> = kubernetes<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span><br>IP.<span class="hljs-number">1</span> = <span class="hljs-number">172.26</span>.<span class="hljs-number">6.1</span><br>IP.<span class="hljs-number">2</span> = <span class="hljs-number">10.254</span>.<span class="hljs-number">0.1</span><br>    <br><span class="hljs-selector-attr">[ v3_ext ]</span><br>authorityKeyIdentifier=keyid,issuer:always<br>basicConstraints=CA:FALSE<br>keyUsage=keyEncipherment,dataEncipherment<br>extendedKeyUsage=serverAuth,clientAuth<br>subjectAltName=@alt_names<br>EOF<br><br>openssl req -new -key server<span class="hljs-selector-class">.key</span> -out server<span class="hljs-selector-class">.csr</span> -config csr<span class="hljs-selector-class">.conf</span><br>openssl x509 -req -<span class="hljs-keyword">in</span> server<span class="hljs-selector-class">.csr</span> -CA ca<span class="hljs-selector-class">.crt</span> -CAkey ca<span class="hljs-selector-class">.key</span> -CAcreateserial -out server<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span> -extensions v3_ext -extfile csr<span class="hljs-selector-class">.conf</span><br>openssl x509  -noout -text -<span class="hljs-keyword">in</span> ./server.crt<br></code></pre></td></tr></table></figure><h6 id="3-admin证书"><a href="#3-admin证书" class="headerlink" title="3.admin证书"></a>3.admin证书</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.key <span class="hljs-number">2048</span><br>openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">admin</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.csr -subj &quot;/O=system:masters/CN=dmin&quot;<br>openssl x509 -req -set_serial $(<span class="hljs-type">date</span> +%s%N) -<span class="hljs-keyword">in</span> <span class="hljs-keyword">admin</span>.csr -CA ca.crt -CAkey ca.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.crt -days <span class="hljs-number">365</span> -extensions v3_req -extfile req.conf<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据官方文档，生成k8s秘钥证书及相关管理证书有三种方式，其本质都是通过openssl:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cfssl&lt;/li&gt;
&lt;li&gt;easyrsa&lt;/li&gt;
&lt;li&gt;openssl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/certificates/&quot;&gt;https://kubernetes.io/docs/concepts/cluster-administration/certificates/&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;cfssl方式&quot;&gt;&lt;a href=&quot;#cfssl方式&quot; class=&quot;headerlink&quot; title=&quot;cfssl方式&quot;&gt;&lt;/a&gt;cfssl方式&lt;/h5&gt;&lt;h6 id=&quot;1-cfssl下载地址&quot;&gt;&lt;a href=&quot;#1-cfssl下载地址&quot; class=&quot;headerlink&quot; title=&quot;1.cfssl下载地址:&quot;&gt;&lt;/a&gt;1.cfssl下载地址:&lt;/h6&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;VERSION=R1.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;#123;cfssl,cfssljson,cfssl-certinfo&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;wget https:&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;pkg.cfssl.org&lt;span class=&quot;hljs-regexp&quot;&gt;/$&amp;#123;VERSION&amp;#125;/&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;_linux-amd64 -O &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;hljs-regexp&quot;&gt;/bin/&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;&lt;br&gt;done&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;2-生成CA配置文件&quot;&gt;&lt;a href=&quot;#2-生成CA配置文件&quot; class=&quot;headerlink&quot; title=&quot;2.生成CA配置文件&quot;&gt;&lt;/a&gt;2.生成CA配置文件&lt;/h6&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs arduino&quot;&gt;mkdir ssl &amp;amp;&amp;amp; cd ssl&lt;br&gt;cfssl print-defaults config &amp;gt; config.json&lt;br&gt;cfssl print-defaults csr &amp;gt; csr.json&lt;br&gt;cat &amp;gt; ca-config.json &amp;lt;&amp;lt;EOF&lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;signing&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;      &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;expiry&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;87600h&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;profiles&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;      &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;kubernetes&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;usages&amp;quot;&lt;/span&gt;: [&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;signing&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;key encipherment&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;server auth&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;client auth&amp;quot;&lt;/span&gt;&lt;br&gt;        ],&lt;br&gt;        &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;expiry&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;87600h&amp;quot;&lt;/span&gt;&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;EOF&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;3-生成CA签名配置文件&quot;&gt;&lt;a href=&quot;#3-生成CA签名配置文件&quot; class=&quot;headerlink&quot; title=&quot;3.生成CA签名配置文件&quot;&gt;&lt;/a&gt;3.生成CA签名配置文件&lt;/h6&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs stata&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;cat&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ca&lt;/span&gt;-csr.json &amp;lt;&amp;lt; EOF&lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;CN&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;kubernetes&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;algo&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;rsa&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 2048&lt;br&gt;  &amp;#125;,&lt;br&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;names&amp;quot;&lt;/span&gt;:[&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;CN&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;ST&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Beijing&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;BeiJing&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;O&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;k8s&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;OU&amp;quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;System&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;]&lt;br&gt;&amp;#125;&lt;br&gt;EOF&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>只在移动端网页内显示”Fork me on Github”</title>
    <link href="http://www.leiyawu.com/2018/08/19/%E5%8F%AA%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%86%85%E6%98%BE%E7%A4%BA%E2%80%9DFork-me-on-Github%E2%80%9D/"/>
    <id>http://www.leiyawu.com/2018/08/19/%E5%8F%AA%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%86%85%E6%98%BE%E7%A4%BA%E2%80%9DFork-me-on-Github%E2%80%9D/</id>
    <published>2018-08-19T07:48:00.000Z</published>
    <updated>2021-01-08T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块"><a href="#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块" class="headerlink" title="1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块"></a>1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;_partials/head.swig&#x27; %&#125;</span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-添加代码，结果如下："><a href="#2-添加代码，结果如下：" class="headerlink" title="2.添加代码，结果如下："></a>2.添加代码，结果如下：</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;_partials/head.swig&#x27; %&#125;</span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;_third-party/analytics/index.swig&#x27; %&#125;</span><span class="xml"></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.forkMeOnGithub</span>&#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">display</span>: none;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.forkMeOnGithub</span>&#123;</span></span><br><span class="css"><span class="xml">   <span class="hljs-attribute">display</span>: inline;</span></span><br><span class="css"><span class="xml">   &#125;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="3-最后在之前引用代码块上套上div加上class就行了，代码如下"><a href="#3-最后在之前引用代码块上套上div加上class就行了，代码如下" class="headerlink" title="3.最后在之前引用代码块上套上div加上class就行了，代码如下"></a>3.最后在之前引用代码块上套上div加上class就行了，代码如下</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;forkMeOnGithub&quot;</span>&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://github.com/hannius&quot;</span>&gt;&lt;img <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;position........&lt;/a&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块&quot;&gt;&lt;a href=&quot;#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://www.leiyawu.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MySQL5.6  5.7 SSL Config</title>
    <link href="http://www.leiyawu.com/2018/07/19/MySQL5-6-5-7-SSL-Config/"/>
    <id>http://www.leiyawu.com/2018/07/19/MySQL5-6-5-7-SSL-Config/</id>
    <published>2018-07-19T03:02:00.000Z</published>
    <updated>2021-08-03T09:06:46.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h3><h4 id="1-mysql5-7上开启并配置ssl"><a href="#1-mysql5-7上开启并配置ssl" class="headerlink" title="1.mysql5.7上开启并配置ssl"></a>1.mysql5.7上开启并配置ssl</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@mysqlmaster01 bin]# ./mysql_ssl_rsa_setup --datadir=/data/mysql_data1/ --user=mysql<br><br>Generating a 2048 bit RSA private key<br>............................................................................<span class="hljs-code">+++</span><br>............<span class="hljs-code">+++</span><br><span class="hljs-section">writing new private key to &#x27;ca-key.pem&#x27;</span><br><span class="hljs-section">-----</span><br>Generating a 2048 bit RSA private key<br>.......................<span class="hljs-code">+++</span><br>..........................<span class="hljs-code">+++</span><br><span class="hljs-section">writing new private key to &#x27;server-key.pem&#x27;</span><br><span class="hljs-section">-----</span><br>Generating a 2048 bit RSA private key<br>...........<span class="hljs-code">+++</span><br>..........<span class="hljs-code">+++</span><br><span class="hljs-section">writing new private key to &#x27;client-key.pem&#x27;</span><br><span class="hljs-section">-----</span><br></code></pre></td></tr></table></figure><p>查看：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show variables like &#x27;%ssl%&#x27;;<br>+---------------+-----------------+<br>|<span class="hljs-string"> Variable_name </span>|<span class="hljs-string"> Value </span>|<br>+---------------+-----------------+<br>|<span class="hljs-string"> have_openssl </span>|<span class="hljs-string"> DISABLED </span>|<br>|<span class="hljs-string"> have_ssl </span>|<span class="hljs-string"> DISABLED </span>|<br>|<span class="hljs-string"> ssl_ca </span>|<span class="hljs-string"> ca.pem </span>|<br>|<span class="hljs-string"> ssl_capath </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> ssl_cert </span>|<span class="hljs-string"> server-cert.pem </span>|<br>|<span class="hljs-string"> ssl_cipher </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> ssl_crl </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> ssl_crlpath </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> ssl_key </span>|<span class="hljs-string"> server-key.pem </span>|<br>+---------------+-----------------+<br>9 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p>(SSL还是没有启用)</p><p>解决办法：把数据目录下.pem的文件，属主和属组改成mysql</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@mysqlmaster01</span> mysql_data1]<span class="hljs-meta"># chown -R mysql.mysql *.pem</span><br></code></pre></td></tr></table></figure><p>然后重启服务</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@mysqlmaster01</span> mysql_data1]<span class="hljs-comment"># /etc/init.d/mysqld_multi stop 1</span><br><br>[root<span class="hljs-meta">@mysqlmaster01</span> mysql_data1]<span class="hljs-comment"># /etc/init.d/mysqld_multi start 1</span><br>[root<span class="hljs-meta">@mysqlmaster01</span> mysql_data1]<span class="hljs-comment"># /etc/init.d/mysqld_multi report</span><br>Reporting MySQL servers<br>MySQL server from group: mysqld1 is running<br><br>[root<span class="hljs-meta">@mysqlmaster01</span> mysql_data1]<span class="hljs-comment"># mysql --login-path=mysql1 -e &quot;show variables like &#x27;have%ssl%&#x27;;&quot;</span><br>+---------------+-------+<br>|<span class="hljs-string"> Variable_name </span>|<span class="hljs-string"> Value </span>|<br>+---------------+-------+<br>|<span class="hljs-string"> have_openssl </span>|<span class="hljs-string"> YES </span>|<br>|<span class="hljs-string"> have_ssl </span>|<span class="hljs-string"> YES </span>|<br>+---------------+-------+<br><br>(说明ssl已经启用）<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@mysqlmaster01 mysql_data1]<span class="hljs-comment"># ll *.pem</span><br>-rw-------.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1679 </span>Nov<span class="hljs-number"> 24 </span>11:14 ca-key.pem<br>-rw-r--r--.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1107 </span>Nov<span class="hljs-number"> 24 </span>11:14 ca.pem<br>-rw-r--r--.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1107 </span>Nov<span class="hljs-number"> 24 </span>11:14 client-cert.pem<br>-rw-------.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1679 </span>Nov<span class="hljs-number"> 24 </span>11:14 client-key.pem<br>-rw-------.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1679 </span>Nov<span class="hljs-number"> 24 </span>11:14 private_key.pem<br>-rw-r--r--.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 451 </span>Nov<span class="hljs-number"> 24 </span>11:14 public_key.pem<br>-rw-r--r--.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1107 </span>Nov<span class="hljs-number"> 24 </span>11:14 server-cert.pem<br>-rw-------.<span class="hljs-number"> 1 </span>mysql mysql<span class="hljs-number"> 1675 </span>Nov<span class="hljs-number"> 24 </span>11:14 server-key.pem<br></code></pre></td></tr></table></figure><h4 id="2-通过ssl进行连接："><a href="#2-通过ssl进行连接：" class="headerlink" title="2.通过ssl进行连接："></a>2.通过ssl进行连接：</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs smali">[root@mysqlmaster01 mysql_data2]<span class="hljs-comment"># mysql -u ssl -p -h 10.2.11.226 --ssl-cert=/data/mysql_data2/client-cert.pem --ssl-key=/data/mysql_data2/client-key.pem -P 3307</span><br>Enter password: <br>Welcome to the MySQ<span class="hljs-class">L monitor. Commands end with ;</span><span class="hljs-built_in"> or </span>\g.<br>Your MySQL connection id is 15<br>Server version: 5.7.20-log MySQL Community Server (GPL)<br><br>Copyright (c) 2000, 2017, Oracle<span class="hljs-built_in"> and/or </span>its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation<span class="hljs-built_in"> and/or </span>its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27;<span class="hljs-built_in"> or </span>&#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt; \q<br></code></pre></td></tr></table></figure><p>(默认如果授权没有做任何限制，用户既可以通过秘钥登录,也可以通过用户名和密码登录)</p><h4 id="3-用户授权规定只能通过ssl方式登录"><a href="#3-用户授权规定只能通过ssl方式登录" class="headerlink" title="3.用户授权规定只能通过ssl方式登录"></a>3.用户授权规定只能通过ssl方式登录</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; create user &#x27;tom&#x27;@&#x27;<span class="hljs-number">10</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span>.%&#x27; identified by &#x27;Aa<span class="hljs-number">123456</span>&#x27;;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><br><span class="hljs-attribute">mysql</span>&gt; grant <span class="hljs-literal">all</span> <span class="hljs-literal">on</span> *.* to &#x27;tom&#x27;@&#x27;<span class="hljs-number">10</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span>.%&#x27; require ssl;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected, <span class="hljs-number">1</span> warning (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@mysqlmaster01 ~]# mysql -u tom -p -h 10.2.11.226 --ssl-mode <span class="hljs-emphasis">&#x27;REQUIRED&#x27;</span> -P 3306 <br>Enter password: <br>Welcome to the MySQL monitor. Commands end with ; or \g.<br><br><span class="hljs-section">mysql&gt; \s</span><br><span class="hljs-section">--------------</span><br>mysql Ver 14.14 Distrib 5.7.20, for linux-glibc2.12 (x86_64) using EditLine wrapper<br><br>Connection id:25<br>Current database:<br>Current user:tom@10.2.11.226<br>SSL:Cipher in use is DHE-RSA-AES256-SHA<br>Current pager:stdout<br>Using outfile:&#x27;&#x27;<br>Using delimiter:;<br>Server version:5.7.20-log MySQL Community Server (GPL)<br>Protocol version:10<br>Connection:10.2.11.226 via TCP/IP<br>Server characterset:latin1<br>Db characterset:latin1<br>Client characterset:utf8<br>Conn. characterset:utf8<br>TCP port:3306<br>Uptime:1 hour 34 min 11 sec<br><br><span class="hljs-section">Threads: 2 Questions: 56 Slow queries: 0 Opens: 124 Flush tables: 1 Open tables: 117 Queries per second avg: 0.009</span><br><span class="hljs-section">--------------</span><br></code></pre></td></tr></table></figure><h4 id="5-不仅需要ssl还需要秘钥"><a href="#5-不仅需要ssl还需要秘钥" class="headerlink" title="5.不仅需要ssl还需要秘钥"></a>5.不仅需要ssl还需要秘钥</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; alter user &#x27;tom&#x27;@&#x27;<span class="hljs-number">10</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span>.%&#x27; require x<span class="hljs-number">509</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br></code></pre></td></tr></table></figure><p>或者新建一个用户，要求ssl+秘钥登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; grant <span class="hljs-literal">all</span> <span class="hljs-literal">on</span> *.* to &#x27;test&#x27;@&#x27;<span class="hljs-number">10</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span>.%&#x27; identified by &#x27;Aa<span class="hljs-number">123456</span>&#x27; require x<span class="hljs-number">509</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected, <span class="hljs-number">1</span> warning (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br><br><span class="hljs-attribute">mysql</span>&gt; grant <span class="hljs-literal">all</span> <span class="hljs-literal">on</span> *.* to &#x27;test&#x27;@&#x27;<span class="hljs-number">10</span>.<span class="hljs-number">2</span>.<span class="hljs-number">18</span>.%&#x27; identified by &#x27;Aa<span class="hljs-number">123456</span>&#x27; require x<span class="hljs-number">509</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected, <span class="hljs-number">1</span> warning (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br><br><span class="hljs-attribute">mysql</span>&gt; flush privileges;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br></code></pre></td></tr></table></figure><p>测试登录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@mysqlmaster01</span> mysql_data1]# mysql <span class="hljs-operator">-</span>u test <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>h <span class="hljs-number">10.2</span><span class="hljs-number">.11</span><span class="hljs-number">.226</span> <span class="hljs-operator">-</span>P <span class="hljs-number">3306</span> <span class="hljs-comment">--ssl</span><br>WARNING: <span class="hljs-comment">--ssl is deprecated and will be removed in a future version. Use --ssl-mode instead.</span><br>Enter password: <br>ERROR <span class="hljs-number">1045</span> (<span class="hljs-number">28000</span>): Access denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;10.2.11.226&#x27;</span> (<span class="hljs-keyword">using</span> password: YES)<br><br>[root<span class="hljs-variable">@mysqlmaster01</span> mysql_data1]# mysql <span class="hljs-operator">-</span>u test <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>h <span class="hljs-number">10.2</span><span class="hljs-number">.11</span><span class="hljs-number">.226</span> <span class="hljs-operator">-</span>P <span class="hljs-number">3306</span> <span class="hljs-comment">--ssl-cert=/data/dbdata/client-cert.pem --ssl-key=/data/dbdata/client-key.pem</span><br>mysql<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h3><h4 id="1-加密连接服务端配置"><a href="#1-加密连接服务端配置" class="headerlink" title="1.加密连接服务端配置"></a>1.加密连接服务端配置</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">ssl-ca</span>=ca.pem<br><span class="hljs-attr">ssl-cert</span>=server-cert.pem<br><span class="hljs-attr">ssl-key</span>=server-key.pem<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>ss-ca：证书颁发机构(CA)证书文件的路径名</li><li>ssl-cert：服务器公钥证书文件的路径名。这可以发送到客户端，并通过CA证书进行身份验证。</li><li>ssl-key：服务器的私钥证书文件的路径名</li></ul><h4 id="2-客户端使用ssl"><a href="#2-客户端使用ssl" class="headerlink" title="2.客户端使用ssl"></a>2.客户端使用ssl</h4><p>案例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql  <span class="hljs-attribute">--ssl-ca</span>=ca.pem  <span class="hljs-attribute">--ssl-cert</span>=client-cert.pem  <span class="hljs-attribute">--ssl-key</span>=client-key.pem<br></code></pre></td></tr></table></figure><h4 id="3-通过openssl-制作生成-SSL-证书"><a href="#3-通过openssl-制作生成-SSL-证书" class="headerlink" title="3.通过openssl 制作生成 SSL 证书"></a>3.通过openssl 制作生成 SSL 证书</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@mysqlmaster01</span> CA]<span class="hljs-meta"># touch index.txt</span><br>[root<span class="hljs-symbol">@mysqlmaster01</span> CA]<span class="hljs-meta"># echo 01&gt;serial</span><br></code></pre></td></tr></table></figure><h4 id="4-创建CA证书"><a href="#4-创建CA证书" class="headerlink" title="4.创建CA证书"></a>4.创建CA证书</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs delphi">[root@server mysql56]# openssl genrsa <span class="hljs-number">2048</span> &gt; ca-key.pem<br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">2048</span> bit long modulus<br>...............................................+++<br>......................................................................................................................+++<br>e <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0</span>x10001)<br>[root@server mysql56]# openssl req -new -x509 -nodes -days <span class="hljs-number">3600</span> -key ca-key.pem -<span class="hljs-keyword">out</span> ca.pem<br>You are about <span class="hljs-keyword">to</span> be asked <span class="hljs-keyword">to</span> enter information that will be incorporated<br>into your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter <span class="hljs-keyword">is</span> what <span class="hljs-keyword">is</span> called a Distinguished <span class="hljs-keyword">Name</span> <span class="hljs-keyword">or</span> a DN.<br>There are quite a few fields but you can leave some blank<br><span class="hljs-keyword">For</span> some fields there will be a <span class="hljs-keyword">default</span> value,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Country <span class="hljs-keyword">Name</span> (<span class="hljs-number">2</span> letter code) [XX]:CN<br>State <span class="hljs-keyword">or</span> Province <span class="hljs-keyword">Name</span> (full <span class="hljs-keyword">name</span>) []:shanghai<br>Locality <span class="hljs-keyword">Name</span> (eg, city) [<span class="hljs-keyword">Default</span> City]:shanghai<br>Organization <span class="hljs-keyword">Name</span> (eg, company) [<span class="hljs-keyword">Default</span> Company Ltd]:als<br>Organizational <span class="hljs-keyword">Unit</span> <span class="hljs-keyword">Name</span> (eg, section) []:ops<br>Common <span class="hljs-keyword">Name</span> (eg, your <span class="hljs-keyword">name</span> <span class="hljs-keyword">or</span> your server<span class="hljs-string">&#x27;s hostname) []:ca.test.com</span><br><span class="hljs-string">Email Address []:</span><br><span class="hljs-string">[root@server mysql56]# ll *.pem</span><br><span class="hljs-string">-rw-r--r--. 1 root root 1679 Nov 24 15:15 ca-key.pem</span><br><span class="hljs-string">-rw-r--r--. 1 root root 1314 Nov 24 15:16 ca.pem</span><br></code></pre></td></tr></table></figure><h4 id="5-创建服务器证书"><a href="#5-创建服务器证书" class="headerlink" title="5.创建服务器证书"></a>5.创建服务器证书</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">[root@server mysql56]# openssl req -newkey rsa:<span class="hljs-number">2048</span> -days <span class="hljs-number">3600</span> -nodes -keyout server-<span class="hljs-keyword">key</span>.pem -out server-req.pem<br>Generating a <span class="hljs-number">2048</span> bit RSA <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span><br>......................................................+++<br>.........................+++<br>writing <span class="hljs-built_in">new</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;server-key.pem&#x27;</span><br>-----<br>You are about <span class="hljs-keyword">to</span> be asked <span class="hljs-keyword">to</span> enter information that will be incorporated<br><span class="hljs-keyword">into</span> your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter <span class="hljs-built_in">is</span> what <span class="hljs-built_in">is</span> called a Distinguished Name <span class="hljs-built_in">or</span> a DN.<br>There are quite a few fields but you can leave some blank<br><span class="hljs-keyword">For</span> some fields there will be a <span class="hljs-keyword">default</span> value,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-comment">&#x27;.&#x27;, the field will be left blank.</span><br>-----<br>Country Name (<span class="hljs-number">2</span> letter code) [XX]:CN<br>State <span class="hljs-built_in">or</span> Province Name (full name) []:shanghai<br>Locality Name (eg, city) [<span class="hljs-keyword">Default</span> City]:shanghai<br>Organization Name (eg, company) [<span class="hljs-keyword">Default</span> Company Ltd]:als<br>Organizational Unit Name (eg, section) []:ops<br>Common Name (eg, your name <span class="hljs-built_in">or</span> your server<span class="hljs-comment">&#x27;s hostname) []:server.test.com</span><br>Email Address []:<br><br>Please enter the following <span class="hljs-comment">&#x27;extra&#x27; attributes</span><br><span class="hljs-keyword">to</span> be sent <span class="hljs-keyword">with</span> your certificate request<br>A challenge password []:<br>An <span class="hljs-keyword">optional</span> company name []:<br>[root@server mysql56]# openssl rsa -<span class="hljs-keyword">in</span> server-<span class="hljs-keyword">key</span>.pem -out server-<span class="hljs-keyword">key</span>.pem <br>writing RSA <span class="hljs-keyword">key</span><br><br>[root@server mysql56]# openssl x509 -req -<span class="hljs-keyword">in</span> server-req.pem -days <span class="hljs-number">3600</span> -CA ca.pem -CAkey ca-<span class="hljs-keyword">key</span>.pem -set_serial <span class="hljs-number">01</span> -out server-cert.pem<br>Signature ok<br>subject=/C=CN/ST=shanghai/L=shanghai/O=als/OU=ops/CN=server.test.com<br>Getting CA <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Key</span><br></code></pre></td></tr></table></figure><h4 id="6-创建客户端证书"><a href="#6-创建客户端证书" class="headerlink" title="6.创建客户端证书"></a>6.创建客户端证书</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">[root@server mysql56]# openssl req -newkey rsa:<span class="hljs-number">2048</span> -days <span class="hljs-number">3600</span> -nodes -keyout client-<span class="hljs-keyword">key</span>.pem -out client-req.pem<br>Generating a <span class="hljs-number">2048</span> bit RSA <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span><br>.+++<br>...............................................+++<br>writing <span class="hljs-built_in">new</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;client-key.pem&#x27;</span><br>-----<br>You are about <span class="hljs-keyword">to</span> be asked <span class="hljs-keyword">to</span> enter information that will be incorporated<br><span class="hljs-keyword">into</span> your certificate request.<br>What you are about <span class="hljs-keyword">to</span> enter <span class="hljs-built_in">is</span> what <span class="hljs-built_in">is</span> called a Distinguished Name <span class="hljs-built_in">or</span> a DN.<br>There are quite a few fields but you can leave some blank<br><span class="hljs-keyword">For</span> some fields there will be a <span class="hljs-keyword">default</span> value,<br><span class="hljs-keyword">If</span> you enter <span class="hljs-comment">&#x27;.&#x27;, the field will be left blank.</span><br>-----<br>Country Name (<span class="hljs-number">2</span> letter code) [XX]:CN<br>State <span class="hljs-built_in">or</span> Province Name (full name) []:shanghai<br>Locality Name (eg, city) [<span class="hljs-keyword">Default</span> City]:shanghai<br>Organization Name (eg, company) [<span class="hljs-keyword">Default</span> Company Ltd]:als<br>Organizational Unit Name (eg, section) []:ops<br>Common Name (eg, your name <span class="hljs-built_in">or</span> your server<span class="hljs-comment">&#x27;s hostname) []:client.test.com </span><br>Email Address []:<br><br>Please enter the following <span class="hljs-comment">&#x27;extra&#x27; attributes</span><br><span class="hljs-keyword">to</span> be sent <span class="hljs-keyword">with</span> your certificate request<br>A challenge password []:<br>An <span class="hljs-keyword">optional</span> company name []:<br>[root@server mysql56]# openssl rsa -<span class="hljs-keyword">in</span> client-<span class="hljs-keyword">key</span>.pem -out client-<span class="hljs-keyword">key</span>.pem <br>writing RSA <span class="hljs-keyword">key</span><br>[root@server mysql56]# openssl x509 -req -<span class="hljs-keyword">in</span> client-req.pem -days <span class="hljs-number">3600</span> -CA ca.pem -CAkey ca-<span class="hljs-keyword">key</span>.pem -set_serial <span class="hljs-number">02</span> -out client-cert.pem<br>Signature ok<br>subject=/C=CN/ST=shanghai/L=shanghai/O=als/OU=ops/CN=client.test.com<br>Getting CA <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Key</span><br></code></pre></td></tr></table></figure><h4 id="7-检测"><a href="#7-检测" class="headerlink" title="7.检测"></a>7.检测</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">[root@mysqlmaster01 mysql56]<span class="hljs-meta"># openssl verify -CAfile ca.pem server-cert.pem client-cert.pem </span><br><span class="hljs-keyword">server</span>-cert.pem: OK<br><span class="hljs-keyword">client</span>-cert.pem: OK<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><p>ca.pem: Use this as the argument to –ssl-ca on the server and client sides. (The CA certificate, if used, must be the same on both sides.)</p></li><li><p>server-cert.pem, server-key.pem: Use these as the arguments to –ssl-cert and –ssl-key on the server side.</p></li><li><p>client-cert.pem, client-key.pem: Use these as the arguments to –ssl-cert and –ssl-key on the client side.</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@mysqlmaster01</span> mysql56]<span class="hljs-meta"># chown -R mysql.mysql *.pem （更改属主和属组</span><br></code></pre></td></tr></table></figure><p>编写my.cnf文件，在【mysqld】下填写</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssl-ca=<span class="hljs-regexp">/data/my</span>sql56/ca.pem <br>ssl-cert=<span class="hljs-regexp">/data/my</span>sql56/server-cert.pem <br>ssl-key=<span class="hljs-regexp">/data/my</span>sql56/server-key.pem<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql&gt; grant all on *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;10.2.11.%&#x27;</span> identified by <span class="hljs-string">&#x27;Aa123456&#x27;</span> require x509; （授权test用户通过ssl+秘钥登录）<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br><br>[root@mysqlmaster01 ~]# mysql -u test -h 10.2.11.226 -p -P 3308<br>Enter password: <br><span class="hljs-builtin-name">ERROR</span> 1045 (28000): Access denied <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span><span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;10.2.11.226&#x27;</span> (using password: <span class="hljs-literal">YES</span>)<br>(直接用密码登录错误)<br><br>[root@mysqlmaster01 ~]# mysql -u test -h 10.2.11.226 -p -P 3308 <span class="hljs-attribute">-ssl-cert</span>=client-cert.pem <span class="hljs-attribute">--ssl-key</span>=client-key.pem <span class="hljs-attribute">--ssl-ca</span>=ca.pem<br>mysql: [<span class="hljs-builtin-name">ERROR</span>] mysql: unknown option <span class="hljs-string">&#x27;-l&#x27;</span><br>[root@mysqlmaster01 ~]# mysql -u test -h 10.2.11.226 -p -P 3308 <span class="hljs-attribute">--ssl-cert</span>=client-cert.pem <span class="hljs-attribute">--ssl-key</span>=client-key.pem <span class="hljs-attribute">--ssl-ca</span>=ca.pem<br>Enter password: <br><span class="hljs-builtin-name">ERROR</span> 2026 (HY000): SSL<span class="hljs-built_in"> connection </span>error: SSL_CTX_set_default_verify_paths failed<br>[root@mysqlmaster01 ~]# mysql -u test -h 10.2.11.226 -p -P 3308 <span class="hljs-attribute">--ssl-cert</span>=/data/mysql56/client-cert.pem <span class="hljs-attribute">--ssl-key</span>=/data/mysql56/client-key.pem<br>Enter password: <br>Welcome <span class="hljs-keyword">to</span> the MySQL monitor. Commands end with ; <span class="hljs-keyword">or</span> \g.<br>Your MySQL<span class="hljs-built_in"> connection </span>id is 5<span class="hljs-built_in"></span><br><span class="hljs-built_in">Server </span>version: 5.6.38-log MySQL<span class="hljs-built_in"> Community Server </span>(GPL)<br><br>Copyright (c) 2000, 2017, Oracle <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">Type </span><span class="hljs-string">&#x27;help;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help.<span class="hljs-built_in"> Type </span><span class="hljs-string">&#x27;\c&#x27;</span> <span class="hljs-keyword">to</span> clear the current input statement.<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>(如果要在其他电脑上通过ssl登录该机器的数据库，必须要ca.pem,client-cert.pem,client-key.pem拷贝到其他电脑上，然后配置连接数据库的工具使用ssl)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;5-7&quot;&gt;&lt;a href=&quot;#5-7&quot; class=&quot;headerlink&quot; title=&quot;5.7&quot;&gt;&lt;/a&gt;5.7&lt;/h3&gt;&lt;h4 id=&quot;1-mysql5-7上开启并配置ssl&quot;&gt;&lt;a href=&quot;#1-mysql5-7上开启并配置ssl&quot; class=&quot;he</summary>
      
    
    
    
    <category term="mysql" scheme="http://www.leiyawu.com/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://www.leiyawu.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins CICD实用经验分享</title>
    <link href="http://www.leiyawu.com/2018/07/10/Jenkins-CICD%E5%AE%9E%E7%94%A8%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>http://www.leiyawu.com/2018/07/10/Jenkins-CICD%E5%AE%9E%E7%94%A8%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</id>
    <published>2018-07-10T08:33:00.000Z</published>
    <updated>2021-08-03T08:34:57.684Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-修改-JVM-的内存配置"><a href="#1-修改-JVM-的内存配置" class="headerlink" title="1.修改 JVM 的内存配置"></a>1.修改 JVM 的内存配置</h3><p>Jenkins 启动方式有两种方式，一种是以 Jdk Jar 方式运行，一种是将 War 包放在 Tomcat 容器下运行。不管何种方式运行，都会存在一个问题就是，默认 JVM 内存分配太少，导致启动或者运行一段时间后内存溢出报错 java.lang.OutOfMemoryError: PermGen space。所以，需要在启动前修改 JVM 内存配置。以 Tomcat 容器方式启动 Jenkins 为例配置如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 进入到 Jenkins 运行所在 Tomcat bin目录<br>$ vim catalina.sh<br># 在 #JAVA_OPTS=<span class="hljs-string">&quot;$JAVA_OPTS -Dorg.apache.catalina.security.SecurityListener.UMASK=`umask`&quot;</span> 行下增加修改配置 JVM 内存配置大小，例如下边配置：<br>JAVA_OPTS=<span class="hljs-string">&quot;$JAVA_OPTS -server -Xms512m -Xmx1024m -XX:PermSize=256M -XX:MaxPermSize=512m&quot;</span><br></code></pre></td></tr></table></figure><p>注意：这里的几个JVM 参数含义如下：</p><ul><li>-Xms: 使用的最小堆内存大小</li><li>-Xmx: 使用的最大堆内存大小</li><li>-XX:PermSize: 内存的永久保存区域大小</li><li>-XX:MaxPermSize: 最大内存的永久保存区域大小</li></ul><h3 id="2-修改-Jenkins-主目录"><a href="#2-修改-Jenkins-主目录" class="headerlink" title="2.修改 Jenkins 主目录"></a>2.修改 Jenkins 主目录</h3><p>Linux下Jenkins默认安装目录为:/home/jenkins/.jenkins，这个目录磁盘空间有限，长时间使用会导致磁盘空间不够，建议修改为其他大磁盘空间目录。这里修改安装目录有两种方式，一种是配置为系统环境变量中，一种是配置到 Tomcat 容器环境变量中。</p><p>2.1. 配置JENKINS_HOME到系统环境变量里面</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">注意：如果一台机器只安装一个Jenkins时，可以配置如下。<br><span class="hljs-variable">$vim</span> /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">..</span>.<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JENKINS_HOME</span>=/data/app/jenkins<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JENKINS_HOME<br><span class="hljs-comment"># 使配置生效</span><br>$ source /etc/profile<br></code></pre></td></tr></table></figure><p>2.2 配置JENKINS_HOME到该Jenkins启动的Tomcat容器环境变量中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">注意：如果一台机器上边安装多个Jenkins 时，不能配置JENKINS_HOME 到系统环境变量里面，需要配置JENKINS_HOME到该Jenkins启动的Tomcat 容器配置里面，这样可以区分不同的Jenkins目录。<br>(<span class="hljs-number">1</span>)第一种方法是修改context.xml文件:<br>$ vim <span class="hljs-regexp">/data/</span>app<span class="hljs-regexp">/apache-tomcat-7.0.85/</span>conf/context.xml<br>&lt;Context&gt;<br>    ...<br>    <span class="hljs-comment"># 增加以下配置，优先获取该配置路径。</span><br>    &lt;Environment name=<span class="hljs-string">&quot;JENKINS_HOME&quot;</span> value=<span class="hljs-string">&quot;/data/app/jenkins/master/.jenkins&quot;</span> type=<span class="hljs-string">&quot;java.lang.String&quot;</span>/&gt;<br>&lt;/Context&gt;<br><br>(<span class="hljs-number">2</span>)第二种方法是修改bin下的catalina.sh<br>添加如下：<br>export JENKINS_HOME=<span class="hljs-string">&quot;/data/app/jenkins/master/.jenkins&quot;</span><br></code></pre></td></tr></table></figure><p>这里要说明一下，如果一台机器上只安装了一个Jenkins服务时，可以配置 JENKINS_HOME到系统环境变量里面，如果安装了多个Jenkins服务时，不能这么配置，因为Jenkins会读取系统环境变量中JENKINS_HOME作为主目录安装，那样会存在配置覆盖的问题。</p><p>此时应该采用第二种方式，各自配置JENKINS_HOME到自己启动的Tomcat容器环境变量中，Jenkins会优先读取该容器环境变量作为各自的主目录安装。</p><p>附Jenkins寻找JENKINS_HOME环境变量的顺序为：</p><ul><li>首先读取容器环境变量</li><li>如果没有，则读取系统环境变量</li><li>如果还没有，则使用默认路径安装。</li></ul><h3 id="3-配置优化减少磁盘空间占用"><a href="#3-配置优化减少磁盘空间占用" class="headerlink" title="3.配置优化减少磁盘空间占用"></a>3.配置优化减少磁盘空间占用</h3><p>Jenkins运行Job构建比较多时，如果没有配置好清理策略的话，会导致占用磁盘空间比较大，最终由于磁盘空间不够导致构建失败的问题。</p><h4 id="3-1-丢弃旧的构建配置"><a href="#3-1-丢弃旧的构建配置" class="headerlink" title="3.1.丢弃旧的构建配置"></a>3.1.丢弃旧的构建配置</h4><p>可以在Job中配置丢弃旧的构建，通过设置“保持构建的天数” 和“保持构建的最大个数” 两个参数，控制该Job最大保存构建数量。</p><p>配置了最大保持3天之内的构建，如果超过3天的构建，则会在Job执行前被清理掉。同时配置了最大保持构建数量为10个，意思就是如果3天内构建次数如果超过10次，则最多保留最近执行的10个构建。这样配置的好处，除了能够自动清理一些Build之外，还能够为我们代码执行远程停止Job Build时，缩短停止时间</p><h4 id="3-2-修改工作空间和构建记录根目录"><a href="#3-2-修改工作空间和构建记录根目录" class="headerlink" title="3.2.修改工作空间和构建记录根目录"></a>3.2.修改工作空间和构建记录根目录</h4><p>Jenkins 工作主要分为安装主目录，工作空间目录以及构建记录目录，默认配置路径：/home/jenkins/.jenkins<br>先停止tomcat,修改catalina.sh指定JENKINS_HOME,然后将/home/jenkins/.jenkins复制到JENKINS_HOME下，最后启动tomcat，则主目录会变成新的指定的JENKINS_HOME目录。</p><h3 id="4-设置全局属性"><a href="#4-设置全局属性" class="headerlink" title="4.设置全局属性"></a>4.设置全局属性</h3><p>适当设置全局属性，可以避免在Job中重复写一些固定值，例如输出日志地址、接口请求地址等等，而且当固定值需要修改时，只需要修改一次即可，不用去每个Job里面修改，方便维护。可以去“系统管理” —&gt; “系统配置” —&gt; “全局属性” 下增加Environment variables键值对:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elixir">键<span class="hljs-symbol">:DOCKER_JENKINS_URL</span><br><br>值<span class="hljs-symbol">:http</span><span class="hljs-symbol">://</span><span class="hljs-number">127.0</span>.0.<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">8080</span>/jenkins<br><br>键<span class="hljs-symbol">:API_SERVICE_URL</span><br><br>值<span class="hljs-symbol">:http</span><span class="hljs-symbol">://</span><span class="hljs-number">127.0</span>.0.<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">9090</span>/api/v1<br><br>键<span class="hljs-symbol">:LOG_PATH</span><br><br>值<span class="hljs-symbol">:/data/app/logs</span><br></code></pre></td></tr></table></figure><p>那么在job构建时执行”Execute Shell”，可以直接应用，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#转发另一个Jenkins job执行</span><br>curl -X POST <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DOCKER_JENKINS_URL&#125;</span>/job/maven_build/buildWithParameters?token=a4575431315316313665555asdasdee55&quot;</span><br><br><span class="hljs-comment">#进入到日志目录</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;LOG_PATH&#125;</span><br><br><span class="hljs-comment">#输出接口地址</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;API_SERVICE_URL&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-JDK-Maven-Gradle-等软件多版本安装"><a href="#5-JDK-Maven-Gradle-等软件多版本安装" class="headerlink" title="5.JDK/Maven/Gradle 等软件多版本安装"></a>5.JDK/Maven/Gradle 等软件多版本安装</h3><p>对于一些常用的软件，比如Jdk、Maven、Gradle等，可能每个项目对软件依赖版本不一样，有的项目依赖Jdk7，有的依赖Jdk8，所以为了更好的适配各个项目，可以指定安装多个版本软件，然后Job创建时选择其中一个版本使用。<br>这里以Jdk为例，去 “系统管理” —&gt; “Global Tool Configuration” —&gt; “JDK” 分别安装jdk6、Jdk7、Jdk8。 </p><p>然后，在创建Job时，选择项目需要的一个版本即可!</p><h3 id="6-设置构建超时时间"><a href="#6-设置构建超时时间" class="headerlink" title="6.设置构建超时时间"></a>6.设置构建超时时间</h3><p>有些Job在执行构建时，由于某些原因导致构建挂起，耗时比较长，而这些长时间挂起的Job会导致Jenkins内存占用比较大，性能下降，严重的会直接导致 Jenkins挂掉。所以，需要设置构建超时时间来预防这种事情发生，一旦超过一定的时间，要让Job自动停止掉。</p><p>jenkins的”build timeout plugin”插件可以帮我们完成该任务。</p><p>Build Timeout<br>Aborts a build if it’s taking too long</p><p>例如，这里设置构建超过30分钟则将本次Build置为失败:<br>Abort the build if it’s stuck:<br>time-out strategy: Absolute   Timeout minutes:30</p><h3 id="7-配置视图分类管理Job"><a href="#7-配置视图分类管理Job" class="headerlink" title="7.配置视图分类管理Job"></a>7.配置视图分类管理Job</h3><p>Jenkins默认视图为ALL,显示所有Job列表,如Job比较多的话,找某个Job会不太方便，虽然有Search搜索功能，毕竟还是不太方便。这时候，可以通过新建视图方式，对Job进行分门别类，这样管理和查找起来就方便多了！</p><h3 id="8-配置多节点管理"><a href="#8-配置多节点管理" class="headerlink" title="8.配置多节点管理"></a>8.配置多节点管理</h3><p>一般我们会使用Jenkins Slave集群管理来完成日常持续集成操作，使用 Jenkins Slave一主多从方式，可以将Job调度到对应的Slave机器上执行，能够大大提高系统并发执行效率。</p><p>可以从“系统管理”—&gt;“管理节点”—&gt;“新建节点”，设置节点类型为“Permanent Agent”名称“slave1”的一个从节点，当然有多个节点时，可以创建多个。创建完毕之后，此时插件还属于不可用状态，因为还没有执行关联，具体关联方式可以参照Jenkins上节点关联说明，关联完毕之后，就可以在新建Job中配置指定那个Slave节点运行了</p><ul><li>远程工作目录: /data/app/jenkins/slave</li><li>标签：slave1</li><li>用法：尽可能的使用这个节点</li><li>启动方式：Launch slave agents via SSH</li><li>主机：jenkins master所在主机ip</li><li>可用性：尽量保持代理在线</li></ul><p>有两种方式指定Job在哪个Slave节点运行：</p><ul><li>一种是对于自由风格类型的Job，我们可以通过在“Restrict where this project can be run” 选项下指定“Label Expression” 标签指定节点标签。</li><li>另一种是对于多配置项目类型的Job，可以通过在 “Configuration Matrix” 先配置“Slave”选择Node/Label勾选指定一个或多个Slave 执行。 </li></ul><h3 id="9-一些实用插件"><a href="#9-一些实用插件" class="headerlink" title="9.一些实用插件"></a>9.一些实用插件</h3><p>Jenkins的基础配置就能够满足我们日常的基本工作，但是为了提高构建效率和方便维护，Jenkins上提供了很多实用的插件，使用这些插件，可以更加轻松、更加简便、更加高效的执行持续集成和发布流程。下边，简单介绍几个插件。</p><h4 id="9-1-Managed-Script-插件管理脚本文件"><a href="#9-1-Managed-Script-插件管理脚本文件" class="headerlink" title="9.1 Managed Script 插件管理脚本文件"></a>9.1 Managed Script 插件管理脚本文件</h4><p>该插件是为了在管理文件时创建Script脚本文件，然后在Job中配置直接使用，方便脚本的统一管理和维护。首先我们需要去“系统管理” —&gt; “管理插件” —&gt; “可选插件” 中选择“Managed script” 插件，安装重启即可。 </p><p>安装完毕后，可以从“系统管理”—&gt;“Managed files”—&gt;“Add a new Config” 选择 “Managed script file” 类型，创建一个新的shell 脚本文件，然后输入我们要执行的脚本代码。这里我创建了两个脚本，分别为 before-build-step-shell 和 after-build-step-shell，意思很明确了，前者在构建前执行的一些操作，后者在构建后执行的一些操作。 </p><p>注意: 这里的脚本可以使用一些Jenkins系统的环境变量参数、参数化构建时传递的参数以及系统命令。</p><p>创建完毕后，在Job中构建处选择“Execute managed script” 就可以使用这些脚本了。 </p><h4 id="9-2-PostBuildScript-插件根据-Build-状态执行脚本"><a href="#9-2-PostBuildScript-插件根据-Build-状态执行脚本" class="headerlink" title="9.2 PostBuildScript 插件根据 Build 状态执行脚本"></a>9.2 PostBuildScript 插件根据 Build 状态执行脚本</h4><p>推荐安装 PostBuildScript插件，该插件可以在构建后操作中，根据构建结果状态，执行对应的脚本操作，很实用的一个插件。同上安装该插件，重启 Jenkins 完毕插件生效后，Job 中构建后操作处选择 “Execute Scripts” ，然后在 “Add build step” 中选择 “Execute shell” 等选项（当然也可以配合上一个插件，那么这里就选择 “Execute managed script”），下边选择一个build状态条件值，如果选择SUCCESS状态，那么该脚本只有在Build成功时才会执行，其他状态依次类推，状态可以多选，多选代表多种状态都能下触发。 </p><h4 id="9-3-Jenkins2-0-Pipeline-插件执行持续集成发布流程"><a href="#9-3-Jenkins2-0-Pipeline-插件执行持续集成发布流程" class="headerlink" title="9.3 Jenkins2.0 Pipeline 插件执行持续集成发布流程"></a>9.3 Jenkins2.0 Pipeline 插件执行持续集成发布流程</h4><p>详细文章参考<a href="https://blog.csdn.net/aixiaoyang168/article/details/72818804"> 初试Jenkins2.0 Pipeline持续集成</a></p><h4 id="9-4-Kubernetes-Plugin-插件动态创建-Jenkins-Slave"><a href="#9-4-Kubernetes-Plugin-插件动态创建-Jenkins-Slave" class="headerlink" title="9.4 Kubernetes Plugin 插件动态创建 Jenkins Slave"></a>9.4 Kubernetes Plugin 插件动态创建 Jenkins Slave</h4><p>传统的Jenkins Slave一主多从方式会存在一些痛点，比如Master单点故障，Slave配置环境差异，资源分配不均衡等导致可靠性和可维护性比较差，而使用 Kubernetes Plugin插件可以动态的创建和删除Jenkins Slave 节点，使用它可以很好的保证服务高可用，动态伸缩合理使用资源，以及良好的扩展性。</p><p>使用该插件后，它的工作流程大致为：当Jenkins Master接受到Build 请求时，会根据配置的Label动态创建一个运行在Docker Container中的 Jenkins Slave,并注册到Master上，当运行完Job后，这个Slave会被注销并且 Docker Container也会自动删除，恢复到最初状态。 </p><p>详细文章参考<a href="https://blog.csdn.net/aixiaoyang168/article/details/79767649">  初试 Jenkins 使用 Kubernetes Plugin 完成持续构建与发布</a></p><h3 id="10-JAVA-代码触发-Jenkins-Job-创建、删除、停止等操作。"><a href="#10-JAVA-代码触发-Jenkins-Job-创建、删除、停止等操作。" class="headerlink" title="10.JAVA 代码触发 Jenkins Job 创建、删除、停止等操作。"></a>10.JAVA 代码触发 Jenkins Job 创建、删除、停止等操作。</h3><p>Jenkins Job创建、删除、构建等操作，除了在页面手动操作外，还可以通过 Jenkins API接口执行对应操作，详细接口可参考 Jenkins<br>REST API 文档地址：http://<jenkins_url>/api。这里演示的是使用 Jenkins-client.jar包，使用JAVA代码操作如何创建、删除、停止、触发构建等，使用代码触发jenkins相关操作，好处就是自己可控，这样可以配合自己的业务需要，随时启动或者新建Job</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> JenkinsUtils &#123;<br><br>    <span class="hljs-keyword">private</span> static String jenkins_url = <span class="hljs-string">&quot;http://127.0.0.1/jenkins/&quot;</span>;<br>    <span class="hljs-keyword">private</span> static String jenkins_user = <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">private</span> static String jenkins_token = <span class="hljs-string">&quot;1b356d175432ed0d34c440d68d00fe49&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过模板创建 Job</span><br><span class="hljs-comment">     * @param jobName</span><br><span class="hljs-comment">     * @param jobTemplate</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static boolean create<span class="hljs-constructor">JobFromTemplate(String <span class="hljs-params">jobName</span>, String <span class="hljs-params">jobTemplate</span>)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            URI uri = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URI(<span class="hljs-params">jenkins_url</span>)</span>;            <br>            JenkinsServer jenkins = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JenkinsServer(<span class="hljs-params">uri</span>, <span class="hljs-params">jenkins_user</span>, <span class="hljs-params">jenkins_token</span>)</span>;<br>            String template = jenkins.get<span class="hljs-constructor">JobXml(<span class="hljs-params">jobTemplate</span>)</span>;<br>            Document doc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DocumentHelper</span>.</span></span>parse<span class="hljs-constructor">Text(<span class="hljs-params">template</span>)</span>;<br>            String newConfigXml = doc.<span class="hljs-keyword">as</span><span class="hljs-constructor">XML()</span>;<br>            jenkins.create<span class="hljs-constructor">Job(<span class="hljs-params">jobName</span>, <span class="hljs-params">newConfigXml</span>, <span class="hljs-params">false</span>)</span>;<br>        &#125;catch (Exception e)&#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除/禁用 Job</span><br><span class="hljs-comment">     * @param jobName</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static boolean delete<span class="hljs-constructor">Job(String <span class="hljs-params">jobName</span>)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            URI uri = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URI(<span class="hljs-params">jenkins_url</span>)</span>;            <br>            JenkinsServer jenkins = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JenkinsServer(<span class="hljs-params">uri</span>, <span class="hljs-params">jenkins_user</span>, <span class="hljs-params">jenkins_token</span>)</span>;<br>            jenkins.delete<span class="hljs-constructor">Job(<span class="hljs-params">jobName</span>, <span class="hljs-params">false</span>)</span>;<br>            jenkins.disable<span class="hljs-constructor">Job(<span class="hljs-params">jobName</span>, <span class="hljs-params">false</span>)</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动 Job 构建</span><br><span class="hljs-comment">     * @param jobName</span><br><span class="hljs-comment">     * @param params</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static boolean start<span class="hljs-constructor">Job(String <span class="hljs-params">jobName</span>, String <span class="hljs-params">params</span>)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String buildUrl = jenkins_url + jobName + <span class="hljs-string">&quot;/buildWithParameters?&quot;</span> + params;<br>            HttpUtils.<span class="hljs-constructor">HttpGet(<span class="hljs-params">buildUrl</span>)</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 停止正在构建中的 Job，先清除等待队列中的 build，在停止运行中的 build</span><br><span class="hljs-comment">     * @param jobName</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static boolean stop<span class="hljs-constructor">Job(String <span class="hljs-params">jobName</span>)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            URI uri = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URI(<span class="hljs-params">jenkins_url</span>)</span>;<br>            JenkinsServer jenkins = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JenkinsServer(<span class="hljs-params">uri</span>, <span class="hljs-params">jenkins_user</span>, <span class="hljs-params">jenkins_token</span>)</span>;<br>            <span class="hljs-comment">// 先 kill 掉 queue 里面的 build</span><br>            QueueItem qi = jenkins.get<span class="hljs-constructor">Job(<span class="hljs-params">jobName</span>)</span>.get<span class="hljs-constructor">QueueItem()</span>;<br>            <span class="hljs-keyword">if</span>(qi != null)&#123;<br>                HttpUtils.<span class="hljs-constructor">HttpPost(<span class="hljs-params">jenkinsUrl</span> + <span class="hljs-string">&quot;queue/cancelItem?id=&quot;</span> + <span class="hljs-params">qi</span>.<span class="hljs-params">getId</span>()</span>);<br>            &#125;<br>            <span class="hljs-comment">// 在 kill 掉正在运行中的 build</span><br>            List&lt;Build&gt; bulidsList = jenkins.get<span class="hljs-constructor">Job(<span class="hljs-params">jobName</span>)</span>.get<span class="hljs-constructor">AllBuilds()</span>;<br>            <span class="hljs-keyword">for</span>(Build b:bulidsList)&#123;<br>                <span class="hljs-keyword">if</span>(b.details<span class="hljs-literal">()</span>.is<span class="hljs-constructor">Building()</span>)&#123;<br>                    <span class="hljs-keyword">try</span>&#123;<br>                        b.<span class="hljs-constructor">Stop()</span>;<br>                    &#125;catch(Exception ee)&#123;<br>                        ee.print<span class="hljs-constructor">StackTrace()</span>;<br>                        return <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; catch(Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一个地方要注意，在停止构建中的Job 时，这里是遍历所有 Build，然后在Kill掉运行中的Build，如果Build历史比较多的时候，会耗时比较久，这将会导致立马重新执行该Job Build时，Build会被异常Abort掉。 也尝试过获取最后一次Build执行Stop操作，好像也不太好使。所以这里大家可以通过上边3.1、丢弃旧的构建配置中的操作，减少构建历史记录，这样就可以很快执行完毕，就不会出现上述问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-修改-JVM-的内存配置&quot;&gt;&lt;a href=&quot;#1-修改-JVM-的内存配置&quot; class=&quot;headerlink&quot; title=&quot;1.修改 JVM 的内存配置&quot;&gt;&lt;/a&gt;1.修改 JVM 的内存配置&lt;/h3&gt;&lt;p&gt;Jenkins 启动方式有两种方式，一种是以</summary>
      
    
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/categories/jenkins/"/>
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>pipeline jnlp</title>
    <link href="http://www.leiyawu.com/2018/07/03/pipeline-jnlp/"/>
    <id>http://www.leiyawu.com/2018/07/03/pipeline-jnlp/</id>
    <published>2018-07-03T08:30:00.000Z</published>
    <updated>2021-08-03T08:32:40.516Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通过默认的jnlp"><a href="#通过默认的jnlp" class="headerlink" title="通过默认的jnlp"></a>通过默认的jnlp</h4><ol><li>jenkins-&gt;系统管理-&gt;系统设置-&gt;新增一个云(kubernetes)</li><li>kubernetes相应设置：</li></ol><ul><li>Name: kubernetes_jnlp</li><li>Kubernetes URL: <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a>(通过http访问不用添加certificate key,不然要使用6443的https协议:API Server证书经过知名CA签名的)</li><li>Disable https certifiacate check: 勾选</li><li>Kubernetes Namespace: default</li><li>Credentials: none</li><li>Jenkins URL: <a href="http://192.168.0.14:9191/jenkins">http://192.168.0.14:9191/jenkins</a></li><li>如果在K8S集群内部可以直接访问Jenkins URL，则Jenkins tunnel不需要填写</li></ul><h4 id="pipeline-scripts"><a href="#pipeline-scripts" class="headerlink" title="pipeline scripts"></a>pipeline scripts</h4><p>指定kubernetes的相应pod(jnlp)来执行pipeline:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs gams">pipeline &#123;<br>    agent &#123;<br>kubernetes &#123;<br>label <span class="hljs-string">&#x27;mypod&#x27;</span><br>cloud <span class="hljs-string">&#x27;kubernetes_jnlp&#x27;</span><br><span class="hljs-comment">//podTemplate &#123;</span><br><span class="hljs-comment">//inheritFrom &quot;mypod&quot;</span><br><span class="hljs-comment">//&#125;</span><br>&#125;<br>&#125;<br><br>    <span class="hljs-keyword">parameters</span> &#123;<br>    <span class="hljs-comment">//git代码路径【参数值对外隐藏】</span><br>    string(name:<span class="hljs-string">&#x27;repoUrl&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;http://git.galaxymx.com/yunwei/oms.git&#x27;</span>, description: <span class="hljs-string">&#x27;git代码路径&#x27;</span>)<br>    string(name:<span class="hljs-string">&#x27;repoBranch&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;master&#x27;</span>, description: <span class="hljs-string">&#x27;git分支名称&#x27;</span>)<br>    <span class="hljs-comment">//pom.xml的相对路径</span><br>    string(name:<span class="hljs-string">&#x27;pomPath&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;pom.xml&#x27;</span>, description: <span class="hljs-string">&#x27;pom.xml的相对路径&#x27;</span>)<br>    <span class="hljs-comment">//war包的相对路径</span><br>    string(name:<span class="hljs-string">&#x27;warLocation&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;/data/app/war/target/*.war&#x27;</span>, description: <span class="hljs-string">&#x27;war包的相对路径 &#x27;</span>)<br>    <span class="hljs-comment">//服务器参数采用了组合方式，避免多次选择，使用docker为更佳实践【参数值对外隐藏】</span><br>    choice(name: <span class="hljs-string">&#x27;server&#x27;</span>,choices:<span class="hljs-string">&#x27;192.168.1.107,9090,*****,*****\n192.168.1.60,9090,*****,*****&#x27;</span>, description: <span class="hljs-string">&#x27;测试服务器列表选择(IP,JettyPort,Name,Passwd)&#x27;</span>)<br>    <span class="hljs-comment">//测试服务器的dubbo服务端口</span><br>    string(name:<span class="hljs-string">&#x27;dubboPort&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;31100&#x27;</span>, description: <span class="hljs-string">&#x27;测试服务器的dubbo服务端口&#x27;</span>)<br>    <span class="hljs-comment">//单元测试代码覆盖率要求，各项目视要求调整参数</span><br>    string(name:<span class="hljs-string">&#x27;lineCoverage&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;20&#x27;</span>, description: <span class="hljs-string">&#x27;单元测试代码覆盖率要求(%)，小于此值pipeline将会失败！&#x27;</span>)<br>    <span class="hljs-comment">//若勾选在pipelie完成后会邮件通知测试人员进行验收</span><br>    booleanParam(name: <span class="hljs-string">&#x27;isCommitQA&#x27;</span>,description: <span class="hljs-string">&#x27;是否邮件通知测试人员进行人工验收&#x27;</span>,defaultValue: false <span class="hljs-comment">)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//常量参数，初始确定后一般不需更改</span><br>    environment <span class="hljs-comment">&#123;</span> <br>    <span class="hljs-comment">//def ITEMNAME = &quot;&quot;</span><br>    def <span class="hljs-comment">DESTPATH =</span> <span class="hljs-comment">&quot;/data/wwwroot/devops&quot;</span><br>    def <span class="hljs-comment">SRCPATH =</span> <span class="hljs-comment">&quot;~/.jenkins/workspace/oms&quot;</span><br>    def <span class="hljs-comment">CRED_ID =</span> <span class="hljs-comment">&#x27;d4a8ba52-0ea0-4f60-86f5-95a4fe0eaa84&#x27;</span><br>    <span class="hljs-comment">//测试人员邮箱地址</span><br>    def <span class="hljs-comment">QA_EMAIL =</span> <span class="hljs-comment">&#x27;hanniusshine@gmail.com&#x27;</span><br>    &#125;<br>    <br>    options <span class="hljs-comment">&#123;</span><br>        <span class="hljs-comment">//保持构建的最大个数</span><br>        buildDiscarder(logRotator(numToKeepStr: <span class="hljs-string">&#x27;10&#x27;</span>)) <br>    &#125;<br>    <span class="hljs-comment">//定期检查开发代码更新，工作日每晚4点做daily build</span><br>    triggers <span class="hljs-comment">&#123;</span><br>        pollSCM(<span class="hljs-string">&#x27;H 4 * * 1-5&#x27;</span>)<br>    &#125;<br>   <span class="hljs-comment">//pipeline运行结果通知给触发者</span><br>    post&#123;<br>        success&#123;<br>            script <span class="hljs-comment">&#123;</span> <br>                wrap([$class: <span class="hljs-string">&#x27;BuildUser&#x27;</span>]) &#123;<br>                mail <span class="hljs-comment">to:</span> <span class="hljs-comment">&quot;$&#123;BUILD_USER_EMAIL &#125;&quot;</span><span class="hljs-comment">,</span><br>                subject: <span class="hljs-string">&quot;PineLine &#x27;$&#123;JOB_NAME&#125;&#x27; ($&#123;BUILD_NUMBER&#125;) result&quot;</span>,<br>                body: <span class="hljs-string">&quot;$&#123;BUILD_USER&#125;&#x27;s pineline &#x27;$&#123;JOB_NAME&#125;&#x27; ($&#123;BUILD_NUMBER&#125;) run success\n请及时前往$&#123;env.BUILD_URL&#125;进行查看&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        failure&#123;<br>            script <span class="hljs-comment">&#123;</span> <br>                wrap([$class: <span class="hljs-string">&#x27;BuildUser&#x27;</span>]) &#123;<br>                mail <span class="hljs-comment">to:</span> <span class="hljs-comment">&quot;$&#123;BUILD_USER_EMAIL &#125;&quot;</span><span class="hljs-comment">,</span><br>                subject: <span class="hljs-string">&quot;PineLine &#x27;$&#123;JOB_NAME&#125;&#x27; ($&#123;BUILD_NUMBER&#125;) result&quot;</span>,<br>                body: <span class="hljs-string">&quot;$&#123;BUILD_USER&#125;&#x27;s pineline  &#x27;$&#123;JOB_NAME&#125;&#x27; ($&#123;BUILD_NUMBER&#125;) run failure\n请及时前往$&#123;env.BUILD_URL&#125;进行查看&quot;</span><br>                &#125;<br>            &#125;<br><br>        &#125;<br>        unstable&#123;<br>            script <span class="hljs-comment">&#123;</span> <br>                wrap([$class: <span class="hljs-string">&#x27;BuildUser&#x27;</span>]) &#123;<br>                mail <span class="hljs-comment">to:</span> <span class="hljs-comment">&quot;$&#123;BUILD_USER_EMAIL &#125;&quot;</span><span class="hljs-comment">,</span><br>                subject: <span class="hljs-string">&quot;PineLine &#x27;$&#123;JOB_NAME&#125;&#x27; ($&#123;BUILD_NUMBER&#125;)结果&quot;</span>,<br>                body: <span class="hljs-string">&quot;$&#123;BUILD_USER&#125;&#x27;s pineline &#x27;$&#123;JOB_NAME&#125;&#x27; ($&#123;BUILD_NUMBER&#125;) run unstable\n请及时前往$&#123;env.BUILD_URL&#125;进行查看&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//pipeline的各个阶段场景</span><br>    stages <span class="hljs-comment">&#123;</span>    <br>        stage(<span class="hljs-string">&#x27;代码拉取&#x27;</span>)&#123;<br>            steps <span class="hljs-comment">&#123;</span><br>            echo <span class="hljs-comment">&quot;checkout from $&#123;params.repoUrl&#125;&quot;</span><br>            <span class="hljs-comment">//git url: &#x27;http://git.galaxymx.com/yunwei/oms.git&#x27;, branch: &#x27;master&#x27;</span><br>            git <span class="hljs-comment">credentialsId:CRED_ID, url:params.repoUrl, branch:params.repoBranch</span><br>                    &#125;<br>                    &#125;<br>        stage(<span class="hljs-string">&#x27;目录检查&#x27;</span>) &#123;<br>            steps <span class="hljs-comment">&#123;</span><br>                echo <span class="hljs-comment">&quot;检查$&#123;DESTPATH&#125;目录是否存在&quot;</span><br>                script&#123;<br>                    <span class="hljs-comment">//def resultUpdateshell = sh script: &#x27;ansible webapp -m shell -a &quot;ls -d $&#123;DESTPATH&#125;&quot;&#x27;</span><br>                    def <span class="hljs-comment">resultUpdateshell = sh script:</span> <span class="hljs-comment">&#x27;ls -d $&#123;DESTPATH&#125;&#x27;</span><br>                    if <span class="hljs-comment">(resultUpdateshell == 0) &#123;</span><br>                        skip <span class="hljs-comment">=</span> <span class="hljs-comment">&#x27;0&#x27;</span><br>                        return<br>                    &#125;   <br>                    &#125;<br>                    &#125;<br>                    &#125;       <br>        stage(<span class="hljs-string">&#x27;nginx服务检查&#x27;</span>) &#123;<br>            steps <span class="hljs-comment">&#123;</span><br>                echo <span class="hljs-comment">&quot;检查nginx进程是否存在&quot;</span><br>                script&#123;<br>                    def <span class="hljs-comment">resultUpdateshell = sh script:</span> <span class="hljs-comment">&#x27;ps aux|grep nginx|grep -v grep&#x27;</span><br>                    if <span class="hljs-comment">(resultUpdateshell == 0) &#123;</span><br>                        skip <span class="hljs-comment">=</span> <span class="hljs-comment">&#x27;0&#x27;</span><br>                        return<br>                    &#125;   <br>                    &#125;<br>                    &#125;<br>                    &#125;<br>        stage(<span class="hljs-string">&#x27;tomcat服务检查&#x27;</span>) &#123;<br>            steps <span class="hljs-comment">&#123;</span><br>                echo <span class="hljs-comment">&quot;检查tomcat进程是否存在&quot;</span><br>                script&#123;<br>                    def <span class="hljs-comment">resultUpdateshell = sh script:</span> <span class="hljs-comment">&#x27;ps aux|grep tomcat|grep -v grep&#x27;</span><br>                    if <span class="hljs-comment">(resultUpdateshell == 0) &#123;</span><br>                        skip <span class="hljs-comment">=</span> <span class="hljs-comment">&#x27;0&#x27;</span><br>                        return<br>                    &#125;   <br>                    &#125;<br>                    &#125;<br>                    &#125;<br>        stage(<span class="hljs-string">&#x27;发布确认&#x27;</span>) &#123;<br>            steps <span class="hljs-comment">&#123;</span><br>                input <span class="hljs-comment">&quot;检查完成，是否发布?&quot;</span><br>            &#125;<br>        &#125;                   <br>        stage(<span class="hljs-string">&#x27;代码推送&#x27;</span>) &#123;<br>            steps <span class="hljs-comment">&#123;</span><br>            echo <span class="hljs-comment">&quot;code sync&quot;</span><br>            <span class="hljs-comment">//sh &quot;ansible $&#123;ITEMNAME&#125; -m synchronize -a &#x27;src=$&#123;SRCPATH&#125;/ dest=$&#123;DESTPATH&#125;/ rsync_opts=-avz,--exclude=.git,--delete&#x27;&quot;</span><br>            sh <span class="hljs-comment">&quot;rsync -avz $&#123;SRCPATH&#125;/ $&#123;DESTPATH&#125;/ --exclude=.git --delete&quot;</span><br>        &#125;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为默认的jnlp容器是使用的官方的：jenkins/jnlp-slave:alpine<br>容器里面是没有：/data/wwwroot/devops目录，所以上面构建在”检查目录是否存在”步骤则返回0结束。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;通过默认的jnlp&quot;&gt;&lt;a href=&quot;#通过默认的jnlp&quot; class=&quot;headerlink&quot; title=&quot;通过默认的jnlp&quot;&gt;&lt;/a&gt;通过默认的jnlp&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;jenkins-&amp;gt;系统管理-&amp;gt;系统设置-&amp;gt;新增一个云(</summary>
      
    
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/categories/jenkins/"/>
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>pipeline 语法详解</title>
    <link href="http://www.leiyawu.com/2018/07/03/pipeline-%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.leiyawu.com/2018/07/03/pipeline-%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2018-07-03T08:23:00.000Z</published>
    <updated>2021-08-03T08:29:08.775Z</updated>
    
    <content type="html"><![CDATA[<p>pipeline 脚本是有groovy语言实现的,无需专门学习 groovy</p><p>pipeline支持两种语法:</p><ul><li>Declarative 声明式</li><li>Scripted pipeline脚本式</li></ul><p>如何创建基本的pipeline</p><ul><li>直接在jenkins web ui网页界面输入脚本</li><li>通过常见一个jenkins可以检入项目的源代码管理库</li></ul><p>Declarative 声明式pipeline<br>声明式pipeline基本语法和表达式遵循groovy语法，但是有以下例外：</p><ul><li>声明式pipeline必须包含在固定格式的pipeline{}块内</li><li>每个声明语句必须独立一行，行尾无需使用分号</li><li>块(Blocks{})只能包含章节(Sections),指令（Directives）,步骤(Steps),或者赋值语句</li><li>属性引用语句被视为无参数方法调用,如input()</li></ul><ol><li>块(Blocks{}):由大括号括起来的语句： 如Pipeline{}, Sections{}, parameters{}, script{}</li><li>章节(Sections):通常包括一个或者多个指令或步骤,如agent，post，stages，steps</li><li>指令(Directives): environment, options, parameters, triggers, stage, tools, when</li><li>步骤(steps)：执行脚本式pipeline, 如script{}</li></ol><p>参考文章：<a href="https://www.cnblogs.com/fengjian2016/p/8227532.html">Jenkins pipeline：pipeline 语法详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pipeline 脚本是有groovy语言实现的,无需专门学习 groovy&lt;/p&gt;
&lt;p&gt;pipeline支持两种语法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declarative 声明式&lt;/li&gt;
&lt;li&gt;Scripted pipeline脚本式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何</summary>
      
    
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/categories/jenkins/"/>
    
    
    <category term="jenkins" scheme="http://www.leiyawu.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes之Service Account</title>
    <link href="http://www.leiyawu.com/2018/06/28/kubernetes%E4%B9%8BService-Account/"/>
    <id>http://www.leiyawu.com/2018/06/28/kubernetes%E4%B9%8BService-Account/</id>
    <published>2018-06-28T08:46:00.000Z</published>
    <updated>2021-08-03T08:47:22.355Z</updated>
    
    <content type="html"><![CDATA[<p>Service Account概念的引入是基于这样的使用场景：运行在pod里的进程需要调用Kubernetes API以及非Kubernetes API的其它服务。Service Account它并不是给kubernetes集群的用户使用的，而是给pod里面的进程使用的，它为pod提供必要的身份认证。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  nexus kubectl <span class="hljs-keyword">get</span> sa<br><span class="hljs-type">NAME</span>      SECRETS   AGE<br><span class="hljs-keyword">default</span>   <span class="hljs-number">1</span>         <span class="hljs-number">18</span>d<br>➜  nexus <br>➜  nexus kubectl <span class="hljs-keyword">get</span> sa <span class="hljs-comment">--all-namespaces </span><br>NAMESPACE     <span class="hljs-type">NAME</span>                   SECRETS   AGE<br><span class="hljs-keyword">default</span>       <span class="hljs-keyword">default</span>                <span class="hljs-number">1</span>         <span class="hljs-number">18</span>d<br>kube-<span class="hljs-built_in">public</span>   <span class="hljs-keyword">default</span>                <span class="hljs-number">1</span>         <span class="hljs-number">18</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">admin</span>-<span class="hljs-keyword">user</span>             <span class="hljs-number">1</span>         <span class="hljs-number">9</span>d<br>kube-<span class="hljs-keyword">system</span>   coredns                <span class="hljs-number">1</span>         <span class="hljs-number">13</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">default</span>                <span class="hljs-number">1</span>         <span class="hljs-number">18</span>d<br>kube-<span class="hljs-keyword">system</span>   heapster               <span class="hljs-number">1</span>         <span class="hljs-number">9</span>d<br>kube-<span class="hljs-keyword">system</span>   kubernetes-dashboard   <span class="hljs-number">1</span>         <span class="hljs-number">9</span>d<br>➜  nexus <br></code></pre></td></tr></table></figure><p>如果kubernetes api开启了ServiceAccount（–admission_control=…,ServiceAccount,… ）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">➜  nexus vim /usr/lib/systemd/system/kube-apiserver.service<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes API<span class="hljs-built_in"> Server</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://github.com/GoogleCloudPlatform/kubernetes<br><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/data/kubernetes/bin/kube-apiserver \<br>  <span class="hljs-attribute">--admission-control</span>=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,NodeRestriction \<br>  <span class="hljs-attribute">--bind-address</span>=192.168.0.14 \<br>  <span class="hljs-attribute">--insecure-bind-address</span>=127.0.0.1 \<br>  <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><p>那么会在每个namespace下面都会创建一个默认的default的sa。<br>如下，其中最重要的就是secrets，每个sa下面都会拥有的一个加密的token。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">➜  nexus kubectl <span class="hljs-keyword">get</span> sa <span class="hljs-keyword">default</span> <br>NAME      SECRETS   AGE<br><span class="hljs-keyword">default</span>   <span class="hljs-number">1</span>         <span class="hljs-number">18</span>d<br>➜  nexus <br>➜  nexus kubectl <span class="hljs-keyword">get</span> sa <span class="hljs-keyword">default</span> -o yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br>  creationTimestamp: <span class="hljs-number">2018</span>-<span class="hljs-number">06</span>-<span class="hljs-number">07</span>T07:<span class="hljs-number">52</span>:<span class="hljs-number">58</span>Z<br>  name: <span class="hljs-keyword">default</span><br>  <span class="hljs-keyword">namespace</span>: <span class="hljs-keyword">default</span><br>  resourceVersion: <span class="hljs-string">&quot;149&quot;</span><br>  selfLink: /api/v1/namespaces/<span class="hljs-keyword">default</span>/serviceaccounts/<span class="hljs-keyword">default</span><br>  uid: cb4da2fd-<span class="hljs-number">6</span>a27-<span class="hljs-number">11e8</span>-<span class="hljs-number">8209</span>-<span class="hljs-number">5254004</span>f2222<br><span class="hljs-symbol">secrets:</span><br>- name: <span class="hljs-keyword">default</span>-token-fck44<br>➜  nexus <br></code></pre></td></tr></table></figure><p>当用户在该namespace下创建pod的时候都会默认使用这个sa，下面是get pod -o yaml截取的部分，可以看到kubernetes会把默认的sa挂载到容器内。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus-data</span><br>    <span class="hljs-attr">persistentVolumeClaim:</span><br>      <span class="hljs-attr">claimName:</span> <span class="hljs-string">nexus3-data-pvc</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">default-token-fck44</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">default-token-fck44</span><br></code></pre></td></tr></table></figure><p>具体看一下secret</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  nexus kubectl get secret                     <br>NAME                  TYPE                                  DATA      AGE<br>default-token-fck44   kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">18</span>d<br>registrykey<span class="hljs-number">-2.6</span><span class="hljs-number">.2</span>     kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">3</span>d<br>registrykey-m262<span class="hljs-number">-3</span>    kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">2</span>d<br>registrykey-m262<span class="hljs-number">-5</span>    kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">2</span>h<br>➜  nexus <br>➜  nexus kubectl get secret default-token-fck44 -o yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br>  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVVVZFU2V4MnJsdddcUN3NzF5V1RTCjJicjZXbHRHanZsaVJSK1VoWWlGOGJ3ODk2ZGxzVjYvSUtHVDRwUE1zUUV1bmE2RmZEd0Y5V3cxbVFPRE1BWlUKalRUSzA0aXFHdmVSL2RqMitzSTc0SGJnSDA0N2hCb1pXUHhkOVorUHFPeDhYOVZBeUtvMW10aktVTDltOXdsbQovOWc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K<br><span class="hljs-symbol">  namespace:</span> ZGVmYXVsdA==<br><span class="hljs-symbol">  token:</span> ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1ZdsdsdN3dHZG9URDNrU1RjNEhiWmxzNUZuWmtrbGJ5SmFkT3JnYUlQVWROTE56eUt4OGdINkFkXzYtNjQ3QnhObUdiZGQ0ZXBVSG9Ga0tDZlAxaktid3daYVI4OXRxb1Z3YUhXVnBuVTdkU3hVZkNtZV8waE1Bc1RQRFFfX2xPWWJuX1ZMNjFKSXAydDdBSXRGQjl4c3hnX1pLZEdEWTcwZGI3TEo1Mm01TmRhREgxdEhHX0VGckdiVVI2QmYyLTVsa3JhYl9BTTE0a1NfM19MRWRLSXM3SWc=<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    kubernetes.io/service-account.name: default<br>    kubernetes.io/service-account.uid: cb4da2fd<span class="hljs-number">-6</span>a27<span class="hljs-number">-11e8</span><span class="hljs-number">-8209</span><span class="hljs-number">-5254004</span>f2222<br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2018</span><span class="hljs-number">-06</span><span class="hljs-number">-07</span>T07:<span class="hljs-number">52</span>:<span class="hljs-number">58</span>Z<br><span class="hljs-symbol">  name:</span> default-token-fck44<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;146&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-meta-keyword">/api/</span>v1<span class="hljs-meta-keyword">/namespaces/</span>default<span class="hljs-meta-keyword">/secrets/</span>default-token-fck44<br><span class="hljs-symbol">  uid:</span> cb51b5b6<span class="hljs-number">-6</span>a27<span class="hljs-number">-11e8</span><span class="hljs-number">-8209</span><span class="hljs-number">-5254004</span>f2222<br><span class="hljs-symbol">type:</span> kubernetes.io/service-account-token<br>➜  nexus <br></code></pre></td></tr></table></figure><p>上面的内容是经过base64加密过后的，直接进入容器内：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">➜  nexus kubectl get pod              <br>NAME                              READY     STATUS    RESTARTS   AGE<br>nexus3-68f55d9746-vfnf8           1/1       Running  <span class="hljs-number"> 0 </span>         3d<br>rbd-rest-api-registrykey-m262-1   1/1       Running  <span class="hljs-number"> 0 </span>         3d<br>➜  nexus <br>➜  nexus kubectl exec nexus3-68f55d9746-vfnf8 -it /bin/bash<br>[root@nexus3-68f55d9746-vfnf8 /]<span class="hljs-comment"># ls -lth /var/run/secrets/kubernetes.io/serviceaccount</span><br>total 0<br>lrwxrwxrwx.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 13 </span>Jun<span class="hljs-number"> 21 </span>21:29 ca.crt -&gt; ..data/ca.crt<br>lrwxrwxrwx.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 16 </span>Jun<span class="hljs-number"> 21 </span>21:29 namespace -&gt; ..data/namespace<br>lrwxrwxrwx.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 12 </span>Jun<span class="hljs-number"> 21 </span>21:29 token -&gt; ..data/token<br></code></pre></td></tr></table></figure><p>可以看到已将ca.crt 、namespace和token放到容器内了，那么这个容器就可以通过https的请求访问apiserver了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Service Account概念的引入是基于这样的使用场景：运行在pod里的进程需要调用Kubernetes API以及非Kubernetes API的其它服务。Service Account它并不是给kubernetes集群的用户使用的，而是给pod里面的进程使用的，它</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes RBAC  Detailed</title>
    <link href="http://www.leiyawu.com/2018/06/27/bernetes-RBAC-Detailed/"/>
    <id>http://www.leiyawu.com/2018/06/27/bernetes-RBAC-Detailed/</id>
    <published>2018-06-27T10:47:00.000Z</published>
    <updated>2021-08-03T08:54:32.012Z</updated>
    
    <content type="html"><![CDATA[<p>RBAC - 基于角色的访问控制<br>RBAC使用：rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/kube-apiserver.service<br>或者是：<br>$ cat <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-apiserver.yaml<br>...<br>    - --authorization-mode=Node,RBAC<br>...<br></code></pre></td></tr></table></figure><p>如果是二进制的方式搭建的集群，添加这个参数过后，记得要重启 apiserver 服务。</p><hr><h3 id="RBAC-API-对象"><a href="#RBAC-API-对象" class="headerlink" title="RBAC API 对象"></a>RBAC API 对象</h3><p>Kubernetes有一个很基本的特性就是它的所有资源对象都是模型化的 API 对象，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：</p><ul><li>Pods</li><li>ConfigMaps</li><li>Deployments</li><li>Nodes</li><li>Secrets</li><li>Namespaces</li></ul><p>上面这些资源对象的可能存在的操作有：</p><ul><li>create</li><li>get</li><li>delete</li><li>list</li><li>update</li><li>edit</li><li>watch</li><li>exec</li></ul><p>在更上层，这些资源和API Group 进行关联，比如Pods属于Core API Group，而Deployements属于 apps API Group，要在Kubernetes中进行RBAC的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：</p><ol><li>Rule：规则，规则是一组属于不同API Group 资源上的一组操作的集合</li><li>Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的Rules 元素，二者的区别在于，在Role 中，定义的规则只适用于单个命名空间，也就是和namespace 关联的，而ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外Role和 ClusterRole在Kubernetes中都被定义为集群内部的API 资源，和Pod、ConfigMap 这些类似，都是集群的资源对象，所以同样的可以使用kubectl相关的命令来进行操作</li><li>Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：</li></ol><ul><li>User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用KeyStone或者Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的API 来进行管理</li><li>Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin</li><li>Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和namespace 进行关联的，适用于集群内部运行的应用程序，需要通过API 来完成权限认证，所以在集群内部进行权限操作，都需要使用到 ServiceAccount</li></ul><ol start="4"><li>RoleBinding和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的Subject和Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding只会影响到当前namespace 下面的资源操作权限，而ClusterRoleBinding会影响到所有的 namespace。</li></ol><span id="more"></span><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>通过如下示例来演示RBAC的配置方法：</p><h4 id="创建一个只能访问某个-namespace-的用户"><a href="#创建一个只能访问某个-namespace-的用户" class="headerlink" title="创建一个只能访问某个 namespace 的用户"></a>创建一个只能访问某个 namespace 的用户</h4><p>创建一个 User Account，只能访问 kube-system这个命名空间：</p><ul><li>username: martin</li><li>group: op</li></ul><h5 id="第一步：创建用户凭证"><a href="#第一步：创建用户凭证" class="headerlink" title="第一步：创建用户凭证"></a>第一步：创建用户凭证</h5><p>Kubernetes没有User Account的API 对象，不过要创建一个用户帐号的话也是挺简单的，利用管理员分配的一个私钥就可以创建了。<br>创建方法有两种:</p><h6 id="1-使用OpenSSL证书来创建User；"><a href="#1-使用OpenSSL证书来创建User；" class="headerlink" title="1. 使用OpenSSL证书来创建User；"></a>1. 使用OpenSSL证书来创建User；</h6><ul><li>给用户martin创建一个私钥，命名成：martin.key：</li></ul><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ openssl genrsa -<span class="hljs-meta">out</span> martin.<span class="hljs-meta">key</span> 2048<br></code></pre></td></tr></table></figure><ul><li>使用刚刚创建的私钥创建一个证书签名请求文件：martin.csr，要注意需要确保在-subj参数中指定用户名和组(CN表示用户名，O表示组)：</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ openssl req -<span class="hljs-built_in">new</span> -<span class="hljs-built_in">key</span> martin.<span class="hljs-built_in">key</span> -out martin.csr -subj <span class="hljs-string">&quot;/CN=martin/O=op&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>然后找到Kubernetes集群的CA，我们使用的是kubeadm安装的集群，CA相关证书位于/etc/kubernetes/pki/目录下面，如果是二进制方式搭建的，应该在最开始搭建集群的时候就已经指定好了CA的目录(/data/kubernetes/ssl)，然后利用该目录下面的ca.crt和ca.key两个文件来批准上面的证书请求</p></li><li><p>生成最终的证书文件，这里设置证书的有效期为500天</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ openssl x509 -req -<span class="hljs-keyword">in</span> martin.csr -CA <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>ca.crt -CAkey <span class="hljs-regexp">/data/</span>kubernetes<span class="hljs-regexp">/ssl/</span>ca.key -CAcreateserial -out martin.crt -days <span class="hljs-number">500</span><br>现在查看当前文件夹下面是否生成了一个证书文件：<br>$ ls<br>martin.csr martin.key martin.crt<br></code></pre></td></tr></table></figure><ul><li>现在可以使用刚刚创建的证书文件和私钥文件在集群中创建新的凭证和上下文(Context):</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">martin</span> <span class="hljs-built_in">--client-certificate=martin.crt</span>  <span class="hljs-built_in">--client-key=martin.key</span><br></code></pre></td></tr></table></figure><ul><li>可以看到一个用户martin创建了，然后为这个用户设置新的 Context:</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">martin-context</span> <span class="hljs-built_in">--cluster=kubernetes</span> <span class="hljs-built_in">--namespace=kube-system</span> <span class="hljs-built_in">--user=martin</span><br></code></pre></td></tr></table></figure><p>到这里，用户martin就已经创建成功了，现在使用当前的这个配置文件来操作kubectl命令的时候，应该会出现错误，因为还没有为该用户定义任何操作的权限：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-builtin-name">get</span> pods <span class="hljs-attribute">--context</span>=martin-context<br><span class="hljs-builtin-name">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;martin&quot;</span> cannot list pods <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br></code></pre></td></tr></table></figure><h6 id="2-使用cfssl工具来创建，也是参考官方文档中的方法。"><a href="#2-使用cfssl工具来创建，也是参考官方文档中的方法。" class="headerlink" title="2. 使用cfssl工具来创建，也是参考官方文档中的方法。"></a>2. 使用cfssl工具来创建，也是参考官方文档中的方法。</h6><ul><li><p>CFSSL是CloudFlare开源的一款PKI/TLS工具。 CFSSL 包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。</p></li><li><p>CFSSL包括：</p><ul><li>一组用于生成自定义TLS PKI的工具</li><li>cfssl程序，是CFSSL的命令行工具</li><li>multirootca程序是可以使用多个签名密钥的证书颁发机构服务器</li><li>mkbundle程序用于构建证书池</li><li>cfssljson程序，从cfssl和multirootca程序获取JSON输出，并将证书，密钥，CSR和bundle写入磁盘</li></ul></li><li><p>PKI借助数字证书和公钥加密技术提供可信任的网络身份。通常，证书就是一个包含如下身份信息的文件：</p><ul><li>证书所有组织的信息</li><li>公钥</li><li>证书颁发组织的信息</li><li>证书颁发组织授予的权限，如证书有效期、适用的主机名、用途等</li><li>使用证书颁发组织私钥创建的数字签名</li></ul></li><li><p>cfssl工具，子命令介绍：</p><ul><li>bundle: 创建包含客户端证书的证书包</li><li>genkey: 生成一个key(私钥)和CSR(证书签名请求)</li><li>scan: 扫描主机问题</li><li>revoke: 吊销证书</li><li>certinfo: 输出给定证书的证书信息，跟cfssl-certinfo 工具作用一样</li><li>gencrl: 生成新的证书吊销列表</li><li>selfsign: 生成一个新的自签名密钥和签名证书</li><li>print-defaults: 打印默认配置，这个默认配置可以用作模板</li><li>serve: 启动一个HTTP API服务</li><li>gencert: 生成新的key(密钥)和签名证书</li><li>-ca：指明ca的证书</li><li>-ca-key：指明ca的私钥文件</li><li>-config：指明请求证书的json文件</li><li>-profile：与-config中的profile对应，是指根据config中的prof  ile段来生成证书的相关信息</li><li>ocspdump</li><li>ocspsign</li><li>info: 获取有关远程签名者的信息</li><li>sign: 签名一个客户端证书，通过给定的CA和CA密钥，和主机名</li><li>ocsprefresh</li><li>ocspserve</li></ul></li><li><p>创建认证中心(CA)，也就是Kubernetes集群的CA，上面用openssl时已经将其省略了，现cfssl操作说明下详细方法：</p><ol><li><p>CFSSL可以创建一个获取和操作证书的内部认证中心。运行认证中心需要一个CA证书和相应的CA私钥。任何知道私钥的人都可以充当CA颁发证书。因此，私钥的保护至关重要。</p></li><li><p>创建用来生成CA文件的JSON配置文件,配置证书生成策略，让CA软件知道颁发什么样的证书。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs axapta">[root@linux-node1 ssl]<span class="hljs-meta"># vim ca-config.json</span><br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>这个策略，有一个默认的配置，和一个profile，可以设置多个profile，这里的profile   是kubernetes。<br>默认策略，指定了证书的有效期是一年(<span class="hljs-number">8760</span>h)<br>kubernetes策略，指定了证书的用途<br>signing, 表示该证书可用于签名其它证书；生成的ca.pem 证书中   CA=TRUE<br><span class="hljs-keyword">server</span> auth：表示<span class="hljs-keyword">client</span>可以用该CA对<span class="hljs-keyword">server</span>提供的证书进行验证<br><span class="hljs-keyword">client</span> auth：表示<span class="hljs-keyword">server</span>可以用该CA对<span class="hljs-keyword">client</span>提供的证书进行验证<br></code></pre></td></tr></table></figure></li><li><p>创建用来生成CA证书签名请求（CSR）的JSON配置文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@linux-node1 ssl]<span class="hljs-comment"># vim ca-csr.json</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-section">术语介绍:</span><br><span class="hljs-section">CN: Common Name，浏览器使用该字段验证网站是否合法，一般写的是域名。非常重要。浏览器使用该字段验证网站是否合法</span><br><span class="hljs-section">C: Country， 国家</span><br><span class="hljs-section">L: Locality，地区，城市</span><br><span class="hljs-section">O: Organization Name，组织名称，公司名称</span><br><span class="hljs-section">OU: Organization Unit Name，组织单位名称，公司部门</span><br><span class="hljs-section">ST: State，州，省</span><br></code></pre></td></tr></table></figure></li><li><p>生成CA证书（ca.pem）和私钥（ca-key.pem）  </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@ linux-node1 ssl]<span class="hljs-comment"># cfssl gencert -initca ca-csr.json |   cfssljson -bare ca  </span><br><span class="hljs-comment">#初始化ca</span><br>[root@ linux-node1 ssl]<span class="hljs-comment"># ls -l ca*</span><br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 290 </span>Mar <span class="hljs-number"> 4 </span>13:45 ca-config.json<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1001 </span>Mar <span class="hljs-number"> 4 </span>14:09 ca.csr<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 208 </span>Mar <span class="hljs-number"> 4 </span>13:51 ca-csr.json<br>-rw-------<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1679 </span>Mar <span class="hljs-number"> 4 </span>14:09 ca-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1359 </span>Mar <span class="hljs-number"> 4 </span>14:09 ca.pem<br>该命令会生成运行CA所必需的文件ca-key.pem（私钥）和ca.pem（证书），还会生成ca.csr（证书签名请求），用于交叉签名或重新签名。<br></code></pre></td></tr></table></figure><p>小提示：</p></li></ol><ul><li>使用现有的CA私钥，重新生成：</li></ul> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cfssl gencert -initca -<span class="hljs-keyword">ca</span>-key key.pem <span class="hljs-keyword">ca</span>-csr.json |     cfssljson -bare <span class="hljs-keyword">ca</span><br></code></pre></td></tr></table></figure><ul><li>使用现有的CA私钥和CA证书，重新生成：</li></ul> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">cfssl gencert -renewca -ca cert.pem -ca-<span class="hljs-type">key</span> <span class="hljs-type">key</span>.pem<br></code></pre></td></tr></table></figure><ul><li>查看cert(证书信息)：cfssl certinfo -cert ca.pem</li><li>查看CSR(证书签名请求)信息：cfssl certinfo -csr ca.csr</li></ul></li><li><p>创建martin证书签名请求(Kubernetes集群的CA创建好了，再根据该CA证书来创建一个只能访问某个namespace的用户)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  martin cat martin-csr.json <br>&#123;<br>  &quot;CN&quot;: &quot;martin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;op&quot;, #<span class="hljs-keyword">system</span>:masters<br>      &quot;OU&quot;: &quot;System&quot;<br>    &#125;<br>  ]<br>&#125;<br>➜  martin <br>后续kube-apiserver使用RBAC对客户端(如kubelet、kube-proxy、Pod)请求进行授权；<br>kube-apiserver预定义了一些RBAC使用的RoleBindings，如<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span>将<span class="hljs-keyword">Group</span> op(<span class="hljs-keyword">system</span>:masters)与 <span class="hljs-keyword">Role</span> <span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span> 绑定，该<span class="hljs-keyword">Role</span>授予了调用kube-apiserver的所有API的权限；<br>OU指定该证书的<span class="hljs-keyword">Group</span>为op(<span class="hljs-keyword">system</span>:masters)，kubelet使用该证书访问 kube-apiserver时,由于证书被CA签名，所以认证通过，同时由于证书用户组为经过预授权的op(<span class="hljs-keyword">system</span>:masters)，所以被授予访问所有 API 的权限；<br></code></pre></td></tr></table></figure></li><li><p>生成martin证书和私钥</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  martin ls -lth<br>total <span class="hljs-number">4.0</span>K<br>-rw-r<span class="hljs-comment">--r-- 1 root root 218 Jun 26 11:59 martin-csr.json</span><br>➜  martin cfssl gencert -ca=/data/kubernetes/ssl/ca.pem -ca-key=/data/kubernetes/ssl/ca-key.pem -config=/data/kubernetes/ssl/ca-config.json -profile=kubernetes martin-csr.json|cfssljson -bare martin<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">37</span> [<span class="hljs-keyword">INFO</span>] generate received request<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">37</span> [<span class="hljs-keyword">INFO</span>] received CSR<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">37</span> [<span class="hljs-keyword">INFO</span>] generating key: rsa<span class="hljs-number">-2048</span><br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">38</span> [<span class="hljs-keyword">INFO</span>] encoded CSR<br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">38</span> [<span class="hljs-keyword">INFO</span>] signed certificate <span class="hljs-keyword">with</span> <span class="hljs-type">serial</span> number <span class="hljs-number">451530418945753741698899402739082416074910829402</span><br><span class="hljs-number">2018</span>/<span class="hljs-number">06</span>/<span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">38</span> [<span class="hljs-built_in">WARNING</span>] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable <span class="hljs-keyword">for</span><br>websites. <span class="hljs-keyword">For</span> more information see the Baseline Requirements <span class="hljs-keyword">for</span> the Issuance <span class="hljs-keyword">and</span> Management<br><span class="hljs-keyword">of</span> Publicly-<span class="hljs-keyword">Trusted</span> Certificates, v<span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-number">.6</span>, <span class="hljs-keyword">from</span> the CA/Browser Forum (https://cabforum.org);<br>specifically, section <span class="hljs-number">10.2</span><span class="hljs-number">.3</span> (&quot;Information Requirements&quot;).<br>➜  martin ls -lth<br>total <span class="hljs-number">16</span>K<br>-rw-r<span class="hljs-comment">--r-- 1 root root  993 Jun 26 16:20 martin.csr</span><br>-rw<span class="hljs-comment">------- 1 root root 1.7K Jun 26 16:20 martin-key.pem</span><br>-rw-r<span class="hljs-comment">--r-- 1 root root 1.4K Jun 26 16:20 martin.pem</span><br>-rw-r<span class="hljs-comment">--r-- 1 root root  218 Jun 26 11:59 martin-csr.json</span><br>➜  martin <br></code></pre></td></tr></table></figure></li><li><p>设置集群参数</p></li></ul><p>本段主要设置了需要访问的集群的信息。使用set-cluster设置了需要访问的集群，如下为kubernetes，这只是个名称，实际为–server指向的apiserver；–certificate-authority设置了该集群的公钥；–embed-certs为true表示将–certificate-authority证书写入到kubeconfig中；–server则表示该集群的kube-apiserver地址</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> <span class="hljs-built_in">--certificate-authority=/data/kubernetes/ssl/ca.pem</span> <span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--server=https://192.168.0.14:6443</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span><br><span class="hljs-string">Cluster</span> <span class="hljs-string">&quot;kubernetes&quot;</span> <span class="hljs-string">set</span>.<br>➜  <span class="hljs-string">martin</span> <span class="hljs-string">ls</span> -<span class="hljs-string">lth</span><br><span class="hljs-string">total</span> <span class="hljs-string">20K</span><br>-<span class="hljs-string">rw</span>------- <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-string">2</span>.<span class="hljs-string">0K</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:29 </span><span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span><br>-<span class="hljs-string">rw-r</span><span class="hljs-built_in">--r--</span> <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span>  <span class="hljs-string">993</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:20 </span><span class="hljs-string">martin</span>.<span class="hljs-string">csr</span><br>-<span class="hljs-string">rw</span>------- <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-string">1</span>.<span class="hljs-string">7K</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:20 </span><span class="hljs-string">martin-key</span>.<span class="hljs-string">pem</span><br>-<span class="hljs-string">rw-r</span><span class="hljs-built_in">--r--</span> <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-string">1</span>.<span class="hljs-string">4K</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">16:20 </span><span class="hljs-string">martin</span>.<span class="hljs-string">pem</span><br>-<span class="hljs-string">rw-r</span><span class="hljs-built_in">--r--</span> <span class="hljs-string">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span>  <span class="hljs-string">218</span> <span class="hljs-string">Jun</span> <span class="hljs-string">26</span> <span class="hljs-string">11:59 </span><span class="hljs-string">martin-csr</span>.<span class="hljs-string">json</span><br>生成了新的文件：<span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span><br>➜  <span class="hljs-string">martin</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span> <br><span class="hljs-string">apiVersion</span>: <span class="hljs-string">v1</span><br><span class="hljs-string">clusters</span>:<br>- <span class="hljs-string">cluster</span>:<br>    <span class="hljs-string">certificate-authority-data</span>: <span class="hljs-string">xxx</span><br>    <span class="hljs-string">server</span>: <span class="hljs-string">https</span>://<span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">0</span>.<span class="hljs-string">14:6443</span><br><span class="hljs-string"></span>  <span class="hljs-string">name</span>: <span class="hljs-string">kubernetes</span><br><span class="hljs-string">contexts</span>: []<br><span class="hljs-string">current-context</span>: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">kind</span>: <span class="hljs-string">Config</span><br><span class="hljs-string">preferences</span>: &#123;&#125;<br><span class="hljs-string">users</span>: []<br>➜  <span class="hljs-string">martin</span> <br><br></code></pre></td></tr></table></figure><p>注意：–kubeconfig=martin.kubeconfig是将生成的相关信息全部写入martin.kubeconfig文件,如果不指定的话，默认是写入到“~/.kube/config ”</p><ul><li>设置客户端认证参数</li></ul><p>本段主要设置用户的相关信息，主要是用户证书。如下用户名为martin，证书为：/martin.pem，私钥为：./martin-key.pem。客户端的证书首先要经过集群CA的签署，否则不会被集群认可。此处使用的是ca认证方式，也可以使用token认证，如kubelet的TLS Boostrap机制下的bootstrapping使用的就是token认证方式。如下kubectl使用的是ca认证，不需要token字段</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">martin</span> <span class="hljs-built_in">--client-certificate=./martin.pem</span> <span class="hljs-built_in">--client-key=./martin-key.pem</span> <span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span>                                      <br><span class="hljs-string">User</span> <span class="hljs-string">&quot;martin&quot;</span> <span class="hljs-string">set</span>.<br>➜  <span class="hljs-string">martin</span> <br>可以看到<span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span>新增了如下内容：<br><span class="hljs-string">users</span>:<br>- <span class="hljs-string">name</span>: <span class="hljs-string">martin</span><br>  <span class="hljs-string">user</span>:<br>    <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure><ul><li>设置上下文参数,指定命名空间为：kube-system</li></ul><p>集群参数和用户参数可以同时设置多对，在上下文参数中将集群参数和用户参数关联起来。下面的上下文名称为martin-context，集群为kubenetes，用户为martin，表示使用martin的用户凭证来访问kubenetes集群的kube-system命名空间(增加–namspace来指定访问的命名空间)。</p><p>执行之前先看下:martin.kubeconfig文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">martin</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin.kubeconfig</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://192.168.0.14:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> []<br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">martin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">xxx</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">martin</span> <br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">martin-context</span> <span class="hljs-built_in">--cluster=kubernetes</span> <span class="hljs-built_in">--namespace=kube-system</span> <span class="hljs-built_in">--user=martin</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span>   <br><span class="hljs-string">Context</span> <span class="hljs-string">&quot;martin-context&quot;</span> <span class="hljs-string">created</span>.<br>➜  <span class="hljs-string">martin</span> <br></code></pre></td></tr></table></figure><p>再次查看martin.kubeconfig文件,发现内容做了如下改变：<br>之前：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">contexts:</span> [] <br></code></pre></td></tr></table></figure><p>现在：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">martin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-context</span><br></code></pre></td></tr></table></figure><p>增加了上下文的相关信息。</p><ul><li>设置默认上下文</li></ul><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">➜  martin kubectl config <span class="hljs-keyword">use</span>-<span class="hljs-keyword">context</span> martin-<span class="hljs-keyword">context</span> <span class="hljs-comment">--kubeconfig=martin.kubeconfig</span><br>Switched <span class="hljs-keyword">to</span> <span class="hljs-keyword">context</span> <span class="hljs-string">&quot;martin-context&quot;</span>.<br></code></pre></td></tr></table></figure><p>如果配置了多个环境项，可以通过切换不同的环境项名字或指定kubeconfig文件来访问到不同的集群环境。</p><ul><li>现在martin用户通过cfssl创建成功,可以看到所有关于martin用户的信息都写入了配置文件：martin.kubeconfig,不指定”-kubeconfig=”的话，默认是写入到”~/.kube/config”，如果之前有admin的相关信息，会追加到后面。martin.kubeconfig配置文件描述了集群、用户和上下文</li></ul><p>kubectl只是个go编写的可执行程序，只要为kubectl配置合适的kubeconfig，就可以在集群中的任意节点使用。kubectl默认会从$HOME/.kube目录下查找文件名为config的文件，也可以通过设置环境变量KUBECONFIG或者通过设置–kubeconfig去指定其它kubeconfig文件,总之kubeconfig就是为访问集群所作的配置。</p><p>如果之前”~/.kube/config”下配置的是admin账号信息，要用martin账号，则指定kubeconfig文件即可：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span>                               <br><span class="hljs-string">CURRENT</span>   <span class="hljs-string">NAME</span>         <span class="hljs-string">CLUSTER</span>      <span class="hljs-string">AUTHINFO</span>   <span class="hljs-string">NAMESPACE</span><br>*         <span class="hljs-string">kubernetes</span>   <span class="hljs-string">kubernetes</span>   <span class="hljs-string">admin</span>      <br>➜  <span class="hljs-string">martin</span> <br>➜  <span class="hljs-string">martin</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span> <span class="hljs-built_in">--kubeconfig</span> <span class="hljs-string">martin</span>.<span class="hljs-string">kubeconfig</span><br><span class="hljs-string">CURRENT</span>   <span class="hljs-string">NAME</span>             <span class="hljs-string">CLUSTER</span>      <span class="hljs-string">AUTHINFO</span>   <span class="hljs-string">NAMESPACE</span><br>*         <span class="hljs-string">martin-context</span>   <span class="hljs-string">kubernetes</span>   <span class="hljs-string">martin</span>     <span class="hljs-string">kube-system</span><br>➜  <span class="hljs-string">martin</span> <br></code></pre></td></tr></table></figure><p>现在使用当前的这个配置文件来操作kubectl命令的时候，应该会出现错误，因为还没有为该用户定义任何操作的权限呢：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">➜  martin kubectl get pods --kubeconfig martin.kubeconfig<br><span class="hljs-keyword">Error </span>from server (Forbidden): pods is forbidden: User &quot;martin&quot; cannot list pods in the namespace &quot;default&quot;<br>➜  martin <br></code></pre></td></tr></table></figure><p>如果提示：“kubectl error: You must be logged in to the server (Unauthorized)”<br>则是没有指定martin.kubeconfig文件或者默认的”~/.kube/config”里面没有martin用户的相关证书信息，因为前面设置客户端认证的时候没有指定password，而是用了证书。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kubeuser</span>/<span class="hljs-string">foo</span>.<span class="hljs-string">kubernetes</span>.<span class="hljs-string">com</span> <span class="hljs-built_in">--username=kubeuser</span> <span class="hljs-built_in">--password=kubepassword</span> (用户名密码认证方式)<br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">martin</span> <span class="hljs-built_in">--client-certificate=./martin.pem</span> <span class="hljs-built_in">--client-key=./martin-key.pem</span> <span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--kubeconfig=martin.kubeconfig</span><br>(证书认证方式)<br></code></pre></td></tr></table></figure><p>另外可以通过：”Cfssl-Certinfo“命令来查看martin证书信息</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs prolog">➜  martin cfssl-certinfo -cert martin.pem<br>&#123;<br>  <span class="hljs-string">&quot;subject&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;common_name&quot;</span>: <span class="hljs-string">&quot;martin&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;organization&quot;</span>: <span class="hljs-string">&quot;op&quot;</span>,<br>    <span class="hljs-string">&quot;organizational_unit&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>,<br>    <span class="hljs-string">&quot;locality&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;op&quot;</span>,<br>      <span class="hljs-string">&quot;System&quot;</span>,<br>      <span class="hljs-string">&quot;martin&quot;</span><br>    ]<br>  &#125;,<br>  <span class="hljs-string">&quot;issuer&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;common_name&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;organization&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;organizational_unit&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>,<br>    <span class="hljs-string">&quot;locality&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;System&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes&quot;</span><br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><h5 id="第二步：创建角色"><a href="#第二步：创建角色" class="headerlink" title="第二步：创建角色"></a>第二步：创建角色</h5><p>用户创建完成后，接下来就需要给该用户添加操作权限，定义一个YAML文件，创建一个允许用户操作Deployment、Pod、ReplicaSets 的角色，如下定义：(martin-role.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  martin cat martin-role.yaml <br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> martin-role<br><span class="hljs-symbol">  namespace:</span> kube-system<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>, <span class="hljs-string">&quot;replicasets&quot;</span>, <span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>] <span class="hljs-meta"># 也可以使用[<span class="hljs-string">&#x27;*&#x27;</span>]</span><br>➜  martin <br></code></pre></td></tr></table></figure><p>其中Pod属于core这个API Group，在YAML中用空字符就可以，而Deployment属于apps 这个API Group，ReplicaSets属于extensions这个API Group(<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/">点这里查文档</a>)，所以 rules下面的apiGroups 就综合了这几个资源的 API Group：[“”, “extensions”, “apps”]，其中verbs就是上面提到的可以对这些资源对象执行的操作，这里需要所有的操作方法，所以也可以使用[‘*’]来代替。</p><p>然后创建这个Role:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  martin kubectl create -f martin-role<span class="hljs-selector-class">.yaml</span> <br>role<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-role&quot;</span> created<br>➜  martin <br></code></pre></td></tr></table></figure><p>注意这里没有使用上面的martin-context这个上下文，因为木有权限</p><h5 id="第三步：创建角色权限绑定"><a href="#第三步：创建角色权限绑定" class="headerlink" title="第三步：创建角色权限绑定"></a>第三步：创建角色权限绑定</h5><p>Role创建完成了，但是很明显现在这个Role和我们的用户martin 还没有任何关系，这里就需要创建一个RoleBinding对象，在 kube-system这个命名空间下面将上面的martin-role角色和用户 martin进行绑定:(martin-rolebinding.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  martin cat martin-rolebinding.yaml <br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> RoleBinding<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> martin-rolebinding<br><span class="hljs-symbol">  namespace:</span> kube-system<br><span class="hljs-symbol">roleRef:</span><br>  <span class="hljs-meta">#apiGroup: rbac.authorization.k8s.io</span><br>  <span class="hljs-meta">#kind: ClusterRole</span><br><span class="hljs-symbol">  kind:</span> Role<br><span class="hljs-symbol">  name:</span> martin-role<br><span class="hljs-symbol">  apiGroup:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">subjects:</span><br>- apiGroup: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  kind:</span> User<br><span class="hljs-symbol">  name:</span> martin<br>  <span class="hljs-meta">#apiGroup: <span class="hljs-string">&quot;&quot;</span>  #会提示语法错误</span><br>➜  martin <br></code></pre></td></tr></table></figure><p>上面的YAML文件中看到了subjects关键字，这里就是上面提到的用来尝试操作集群的对象，这里对应上面的 User帐号martin，使用kubectl创建上面的资源对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  martin kubectl create -f martin-rolebinding<span class="hljs-selector-class">.yaml</span><br>rolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-rolebinding&quot;</span> created<br></code></pre></td></tr></table></figure><p>使用admin账号(martin账号无权限查看)查看role和rolebinding相关信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  martin kubectl <span class="hljs-keyword">get</span> rolebinding <span class="hljs-comment">--all-namespaces</span><br>NAMESPACE     <span class="hljs-type">NAME</span>                                             AGE<br>kube-<span class="hljs-built_in">public</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">system</span>   martin-rolebinding                               <span class="hljs-number">18</span>h<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-controller-manager   <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-scheduler            <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:cloud-provider                 <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:token-cleaner                  <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   ui-<span class="hljs-keyword">admin</span>-binding                                 <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">system</span>   ui-<span class="hljs-keyword">read</span>-binding                                  <span class="hljs-number">11</span>d<br>➜  martin <br>➜  martin kubectl <span class="hljs-keyword">get</span> <span class="hljs-keyword">role</span> <span class="hljs-comment">--all-namespaces            </span><br>NAMESPACE     <span class="hljs-type">NAME</span>                                             AGE<br>kube-<span class="hljs-built_in">public</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">extension</span>-apiserver-authentication-reader        <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">system</span>   martin-<span class="hljs-keyword">role</span>                                      <span class="hljs-number">18</span>h<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-controller-manager   <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>::leader-locking-kube-scheduler            <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:bootstrap-signer               <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:cloud-provider                 <span class="hljs-number">19</span>d<br>kube-<span class="hljs-keyword">system</span>   <span class="hljs-keyword">system</span>:controller:token-cleaner                  <span class="hljs-number">19</span>d<br>➜  martin<br></code></pre></td></tr></table></figure><h5 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h5><p>现在应该可以用上面的martin-context上下文来操作集群了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">➜  martin kubectl <span class="hljs-keyword">get</span> pods                                          <br>NAME                              READY     STATUS    RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746<span class="hljs-operator">-</span>vfnf8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>d<br>➜  martin <br>➜  martin kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-operator">-</span>n <span class="hljs-keyword">default</span><br>NAME                              READY     STATUS    RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746<span class="hljs-operator">-</span>vfnf8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>d<br>➜  martin <br>➜  martin kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-comment">--kubeconfig martin.kubeconfig</span><br>NAME                                    READY     STATUS    RESTARTS   AGE<br>coredns<span class="hljs-number">-77</span>c989547b<span class="hljs-operator">-</span>lcbfw                <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">1</span>          <span class="hljs-number">15</span>d<br>coredns<span class="hljs-number">-77</span>c989547b<span class="hljs-operator">-</span>xq4dr                <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">1</span>          <span class="hljs-number">15</span>d<br>heapster<span class="hljs-number">-77</span>b9c5bd7b<span class="hljs-operator">-</span>l5ms6               <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br>kubernetes<span class="hljs-operator">-</span>dashboard<span class="hljs-number">-66</span>c9d98865<span class="hljs-operator">-</span>g8l6l   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br>monitoring<span class="hljs-operator">-</span>grafana<span class="hljs-number">-7</span>c674cb7f6<span class="hljs-operator">-</span>nqvlw     <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br>monitoring<span class="hljs-operator">-</span>influxdb<span class="hljs-number">-644</span>db5c5b6<span class="hljs-operator">-</span>llnp9    <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>d<br></code></pre></td></tr></table></figure><p>使用kubectl时并没有指定namespace，这是因为之前已经为该用户分配了权限，并且指定了kube-system命名空间写入到martin.kubeconfig文件中，如果使用default命名空间，在后面加上一个-n default，则会提示forbidden,如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">➜  martin kubectl <span class="hljs-builtin-name">get</span> pods -n<span class="hljs-built_in"> default </span>--kubeconfig martin.kubeconfig <br><span class="hljs-builtin-name">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;martin&quot;</span> cannot list pods <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br>➜  martin <br></code></pre></td></tr></table></figure><p>这是因为该用户并没有default这个命名空间的操作权限。</p><hr><h4 id="创建一个只能访问某个namespace的ServiceAccount"><a href="#创建一个只能访问某个namespace的ServiceAccount" class="headerlink" title="创建一个只能访问某个namespace的ServiceAccount"></a>创建一个只能访问某个namespace的ServiceAccount</h4><p>上面创建了一个只能访问某个命名空间下面的普通用户，前面也提到过subjects,下面还有一种类型的主题资源：ServiceAccount。</p><h5 id="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"><a href="#第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments" class="headerlink" title="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"></a>第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments</h5><p>首先来创建一个ServiceAccount对象：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  serviceaccount kubectl <span class="hljs-keyword">create</span> sa martin-sa -n kube-<span class="hljs-keyword">system</span><br>serviceaccount &quot;martin-sa&quot; created<br>➜  serviceaccount <br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> sa <br><span class="hljs-type">NAME</span>      SECRETS   AGE<br><span class="hljs-keyword">default</span>   <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> sa -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                   SECRETS   AGE<br><span class="hljs-keyword">admin</span>-<span class="hljs-keyword">user</span>             <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>coredns                <span class="hljs-number">1</span>         <span class="hljs-number">15</span>d<br><span class="hljs-keyword">default</span>                <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>heapster               <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>kubernetes-dashboard   <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>martin-sa              <span class="hljs-number">1</span>         <span class="hljs-number">13</span>s<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>当然也可以定义成YAML文件的形式来创建:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> martin-sa<br><span class="hljs-symbol">  namespace:</span> kube-system<br><br></code></pre></td></tr></table></figure><h5 id="第二步：创建一个Role对象：-martin-sa-role-yaml"><a href="#第二步：创建一个Role对象：-martin-sa-role-yaml" class="headerlink" title="第二步：创建一个Role对象：(martin-sa-role.yaml)"></a>第二步：创建一个Role对象：(martin-sa-role.yaml)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  serviceaccount <span class="hljs-keyword">cat</span> martin-<span class="hljs-keyword">sa</span>-role.yaml <br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: Role<br>metadat<span class="hljs-variable">a:</span><br>  name: martin-<span class="hljs-keyword">sa</span>-role<br>  namespace: kube-<span class="hljs-built_in">system</span><br>rule<span class="hljs-variable">s:</span><br>- apiGroup<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  resource<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-keyword">verb</span><span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>] # 也可以使用[<span class="hljs-string">&#x27;*&#x27;</span>]<br>- apiGroup<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;apps&quot;</span>]<br>  resource<span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]<br>  <span class="hljs-keyword">verb</span><span class="hljs-variable">s:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br>➜  serviceaccount<br></code></pre></td></tr></table></figure><p>可以看到这里定义的角色没有创建、删除、更新Pod的权限，等会可以重点测试一下。</p><p>创建该Role对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  serviceaccount kubectl create -f martin-sa-role<span class="hljs-selector-class">.yaml</span> <br>role<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-sa-role&quot;</span> created<br></code></pre></td></tr></table></figure><h5 id="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml"><a href="#第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml" class="headerlink" title="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)"></a>第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin-sa-rolebinding.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-rolebinding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-role</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>创建这个资源对象：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  serviceaccount kubectl <span class="hljs-keyword">get</span> rolebinding -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                                             AGE<br>kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>martin-rolebinding                               <span class="hljs-number">22</span>h<br>➜  serviceaccount <br><br>➜  serviceaccount kubectl <span class="hljs-keyword">create</span> -f martin-sa-rolebinding.yaml <br>rolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io &quot;martin-sa-rolebinding&quot; created<br>➜  serviceaccount <br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> rolebinding               <br><span class="hljs-keyword">No</span> resources <span class="hljs-built_in">found</span>.<br>➜  serviceaccount kubectl <span class="hljs-keyword">get</span> rolebinding -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                                             AGE<br>kubernetes-dashboard-minimal                     <span class="hljs-number">11</span>d<br>martin-rolebinding                               <span class="hljs-number">23</span>h<br>martin-sa-rolebinding                            <span class="hljs-number">26</span>s<br>可以看到martin-sa-rolebinding已经添加<br><br></code></pre></td></tr></table></figure><h5 id="第四步，验证这个ServiceAccount"><a href="#第四步，验证这个ServiceAccount" class="headerlink" title="第四步，验证这个ServiceAccount"></a>第四步，验证这个ServiceAccount</h5><p>一个ServiceAccount会生成一个Secret对象和它进行映射，这个Secret里面包含一个token：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stata">➜  serviceaccount kubectl get secret -<span class="hljs-keyword">n</span> kube-system<br>NAME                               <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br>admin-user-<span class="hljs-keyword">token</span>-xszp7             kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>coredns-<span class="hljs-keyword">token</span>-9ppnq                kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         15d<br>default-<span class="hljs-keyword">token</span>-fs7zj                kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         20d<br>heapster-<span class="hljs-keyword">token</span>-gn8g5               kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>kubernetes-dashboard-certs         Opaque                                0         11d<br>kubernetes-dashboard-key-holder    Opaque                                2         15d<br>kubernetes-dashboard-<span class="hljs-keyword">token</span>-tg782   kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>martin-<span class="hljs-keyword">sa</span>-<span class="hljs-keyword">token</span>-78s5j              kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         41m  #新增<br>➜  serviceaccount <br>➜  serviceaccount kubectl <span class="hljs-keyword">describe</span> secret martin-<span class="hljs-keyword">sa</span>-<span class="hljs-keyword">token</span>-78s5j -<span class="hljs-keyword">n</span> kube-system<br>Name:         martin-<span class="hljs-keyword">sa</span>-<span class="hljs-keyword">token</span>-78s5j<br>Namespace:    kube-system<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io/service-account.name=martin-<span class="hljs-keyword">sa</span><br>              kubernetes.io/service-account.uid=576ef41d-79e2-11e8-bede-5254004f2222<br><br><span class="hljs-keyword">Type</span>:  kubernetes.io/service-account-<span class="hljs-keyword">token</span><br><br>Data<br>====<br><span class="hljs-keyword">ca</span>.crt:     1359 bytes<br>namespace:  11 bytes<br><span class="hljs-keyword">token</span>:      xxx<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>==注意：查看时需要-n指定kube-system命名空间！==</p><p>然后可以利用这个token去登录Dashboard，就可以在Dashboard中来验证功能是否符合预期：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">➜  serviceaccount kubectl <span class="hljs-built_in">get</span> secret martin-sa-token-78s5j -o jsonpath=&#123;.data.token&#125; -n kube-<span class="hljs-built_in">system</span> |<span class="hljs-built_in">base64</span> -d #会生成一串很长的<span class="hljs-built_in">base64</span>后的字符串<br>xxxxxxxxxxxxxxxx<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>使用这里的xxx token去Dashboard页面进行登录：<br>会出现如下提示信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">configmaps <span class="hljs-keyword">is</span> forbidden: <span class="hljs-keyword">User</span> &quot;system:serviceaccount:kube-system:martin-sa&quot; cannot list configmaps <span class="hljs-keyword">in</span> the namespace &quot;default&quot;<br><span class="hljs-keyword">close</span><br><span class="hljs-built_in">warning</span><br>persistentvolumeclaims <span class="hljs-keyword">is</span> forbidden: <span class="hljs-keyword">User</span> &quot;system:serviceaccount:kube-system:martin-sa&quot; cannot list persistentvolumeclaims <span class="hljs-keyword">in</span> the namespace &quot;default&quot; <br></code></pre></td></tr></table></figure><p>这是因为登录进来后默认跳转到default命名空间，但是却没有改空间的权限，因此需要切换到kube-system命名空间下面:</p><p>原来url:<br><a href="https://xxx/#!/deployment?namespace=default">https://xxx/#!/deployment?namespace=default</a></p><p>修改为新url:<br><a href="https://xxx/#!/deployment?namespace=kube-system">https://xxx/#!/deployment?namespace=kube-system</a></p><p>可以看到能访问pod列表了，但是也会有一些其他额外的提示：events is forbidden: User “system:serviceaccount:kube-system:martin-sa” cannot list events in the namespace “kube-system”，这是因为当前登录用只被授权了访问pod和deployment的权限，同样的，访问下deployment看看可以了吗？</p><p>同样的，可以根据自己的需求来对访问用户的权限进行限制，可以自己通过Role定义更加细粒度的权限，也可以使用系统内置的一些权限……</p><hr><h4 id="创建一个可以访问所有-namespace-的ServiceAccount"><a href="#创建一个可以访问所有-namespace-的ServiceAccount" class="headerlink" title="创建一个可以访问所有 namespace 的ServiceAccount"></a>创建一个可以访问所有 namespace 的ServiceAccount</h4><p>刚刚创建的martin-sa这个ServiceAccount和一个Role角色进行绑定的，如果现在创建一个新的ServiceAccount，需要他操作的权限作用于所有的namespace，这个时候就需要使用到ClusterRole 和 ClusterRoleBinding 这两种资源对象了。</p><h5 id="第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml"><a href="#第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml" class="headerlink" title="第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)"></a>第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  serviceaccount <span class="hljs-keyword">cat</span> martin-sa2.yaml <br>apiVersion: v1<br>kind: ServiceAccount<br>metadat<span class="hljs-variable">a:</span><br>  name: martin-sa2<br>  namespace: kube-<span class="hljs-built_in">system</span><br>➜  serviceaccount <br>➜  serviceaccount kubectl create -<span class="hljs-keyword">f</span> martin-sa2.yaml <br>serviceaccount <span class="hljs-string">&quot;martin-sa2&quot;</span> created<br>➜  serviceaccount kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">sa</span>   <br>NAME      SECRETS   AGE<br>default   <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>➜  serviceaccount kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">sa</span> -n kube-<span class="hljs-built_in">system</span><br>NAME                   SECRETS   AGE<br>admin-user             <span class="hljs-number">1</span>         <span class="hljs-number">12</span>d<br>coredns                <span class="hljs-number">1</span>         <span class="hljs-number">15</span>d<br>default                <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>heapster               <span class="hljs-number">1</span>         <span class="hljs-number">12</span>d<br>kubernetes-dashboard   <span class="hljs-number">1</span>         <span class="hljs-number">12</span>d<br>martin-<span class="hljs-keyword">sa</span>              <span class="hljs-number">1</span>         <span class="hljs-number">1</span>h<br>martin-sa2             <span class="hljs-number">1</span>         <span class="hljs-number">12</span>s<br>➜  serviceaccount<br></code></pre></td></tr></table></figure><h5 id="第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml"><a href="#第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml" class="headerlink" title="第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):"></a>第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin-clusterolebinding.yaml</span>   <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa2-clusterrolebinding</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <br></code></pre></td></tr></table></figure><p>对比下之前的”martin-sa-rolebinding.yaml”</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <span class="hljs-string">cat</span> <span class="hljs-string">martin-sa-rolebinding.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-rolebinding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">martin-sa-role</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">serviceaccount</span> <br></code></pre></td></tr></table></figure><p>从上面可以看到没有为这个资源对象声明namespace，因为这是一个ClusterRoleBinding 资源对象，是作用于整个集群的，也没有单独新建一个ClusterRole对象，而是使用的 cluster-admin这个对象，这是Kubernetes集群内置的ClusterRole对象，可以使用kubectl get clusterrole 和kubectl get clusterrolebinding查看系统内置的一些集群角色和集群角色绑定，这里使用的 cluster-admin这个集群角色是拥有最高权限的集群角色，所以一般需要谨慎使用该集群角色。</p><p>创建上面集群角色绑定资源对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜  serviceaccount kubectl create -f martin-clusterolebinding<span class="hljs-selector-class">.yaml</span> <br>clusterrolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span> <span class="hljs-string">&quot;martin-sa2-clusterrolebinding&quot;</span> created<br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>通过ubectl get clusterrolebinding可以看到”martin-sa2-clusterrolebinding”已经加入其中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  serviceaccount kubectl <span class="hljs-keyword">get</span> clusterrolebinding <br><span class="hljs-type">NAME</span>                                                   AGE<br><span class="hljs-keyword">admin</span>-<span class="hljs-keyword">user</span>                                             <span class="hljs-number">12</span>d<br><span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">admin</span>                                          <span class="hljs-number">20</span>d<br>heapster                                               <span class="hljs-number">12</span>d<br>kubelet-bootstrap                                      <span class="hljs-number">19</span>d<br>martin-sa2-clusterrolebinding                          <span class="hljs-number">22</span>s<br></code></pre></td></tr></table></figure><h5 id="第三步，使用-ServiceAccount对应的token去登录Dashboard验证："><a href="#第三步，使用-ServiceAccount对应的token去登录Dashboard验证：" class="headerlink" title="第三步，使用 ServiceAccount对应的token去登录Dashboard验证："></a>第三步，使用 ServiceAccount对应的token去登录Dashboard验证：</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">➜  serviceaccount kubectl get secret -n kube-<span class="hljs-keyword">system</span>|grep martin-sa2-<span class="hljs-built_in">token</span>-q7bhr<br>martin-sa2-<span class="hljs-built_in">token</span>-q7bhr             kubernetes.io/service-account-<span class="hljs-built_in">token</span>   <span class="hljs-number">3</span>         <span class="hljs-number">34</span>m<br>➜  serviceaccount <br>➜  serviceaccount kubectl get secret martin-sa2-<span class="hljs-built_in">token</span>-q7bhr -o jsonpath=&#123;.data.token&#125; -n kube-<span class="hljs-keyword">system</span> |base64 -d<br>xxxxxxx<br><span class="hljs-meta">#会生成一串很长的base64后的字符串</span><br>➜  serviceaccount <br></code></pre></td></tr></table></figure><p>在最开始接触到RBAC认证的时候，可能不太熟悉，特别是不知道应该怎么去编写rules规则，可以去分析系统自带的clusterrole、clusterrolebinding这些资源对象的编写方法，利用 kubectl的get、describe、-o yaml这些操作，所以kubectl最基本的操作一定要掌握好。</p><p>RBAC只是Kubernetes中安全认证的一种方式，当然也是现在最重要的一种方式。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;RBAC - 基于角色的访问控制&lt;br&gt;RBAC使用：rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs awk&quot;&gt;$ cat &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;lib&lt;span class=&quot;hljs-regexp&quot;&gt;/systemd/&lt;/span&gt;system/kube-apiserver.service&lt;br&gt;或者是：&lt;br&gt;$ cat &lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;kubernetes&lt;span class=&quot;hljs-regexp&quot;&gt;/manifests/&lt;/span&gt;kube-apiserver.yaml&lt;br&gt;...&lt;br&gt;    - --authorization-mode=Node,RBAC&lt;br&gt;...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果是二进制的方式搭建的集群，添加这个参数过后，记得要重启 apiserver 服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;RBAC-API-对象&quot;&gt;&lt;a href=&quot;#RBAC-API-对象&quot; class=&quot;headerlink&quot; title=&quot;RBAC API 对象&quot;&gt;&lt;/a&gt;RBAC API 对象&lt;/h3&gt;&lt;p&gt;Kubernetes有一个很基本的特性就是它的所有资源对象都是模型化的 API 对象，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;ConfigMaps&lt;/li&gt;
&lt;li&gt;Deployments&lt;/li&gt;
&lt;li&gt;Nodes&lt;/li&gt;
&lt;li&gt;Secrets&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面这些资源对象的可能存在的操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;get&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;edit&lt;/li&gt;
&lt;li&gt;watch&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在更上层，这些资源和API Group 进行关联，比如Pods属于Core API Group，而Deployements属于 apps API Group，要在Kubernetes中进行RBAC的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rule：规则，规则是一组属于不同API Group 资源上的一组操作的集合&lt;/li&gt;
&lt;li&gt;Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的Rules 元素，二者的区别在于，在Role 中，定义的规则只适用于单个命名空间，也就是和namespace 关联的，而ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外Role和 ClusterRole在Kubernetes中都被定义为集群内部的API 资源，和Pod、ConfigMap 这些类似，都是集群的资源对象，所以同样的可以使用kubectl相关的命令来进行操作&lt;/li&gt;
&lt;li&gt;Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用KeyStone或者Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的API 来进行管理&lt;/li&gt;
&lt;li&gt;Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin&lt;/li&gt;
&lt;li&gt;Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和namespace 进行关联的，适用于集群内部运行的应用程序，需要通过API 来完成权限认证，所以在集群内部进行权限操作，都需要使用到 ServiceAccount&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;RoleBinding和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的Subject和Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding只会影响到当前namespace 下面的资源操作权限，而ClusterRoleBinding会影响到所有的 namespace。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes从Private Registry中拉取容器镜像的方法</title>
    <link href="http://www.leiyawu.com/2018/06/25/Kubernetes%E4%BB%8EPrivate-Registry%E4%B8%AD%E6%8B%89%E5%8F%96%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://www.leiyawu.com/2018/06/25/Kubernetes%E4%BB%8EPrivate-Registry%E4%B8%AD%E6%8B%89%E5%8F%96%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2018-06-25T08:48:00.000Z</published>
    <updated>2021-08-03T08:50:07.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法1：利用Node上的配置访问Private-Registry"><a href="#方法1：利用Node上的配置访问Private-Registry" class="headerlink" title="方法1：利用Node上的配置访问Private Registry"></a>方法1：利用Node上的配置访问Private Registry</h3><p>在玩Docker时，很多朋友都 搭建过自己的Private Registry。Docker访问那些以basic auth方式进行鉴权的Private Registry，只需在本地执行docker login，输入用户名、密码后，就可以自由向Registry Push镜像或pull 镜像到本地了：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif">[root@node3 docker]<span class="hljs-comment"># docker login registry.martin.com:5000</span><br><span class="hljs-attribute">Username (martin)</span>: martin<br><span class="hljs-attribute">Password</span>: <br><span class="hljs-attribute">Login Succeeded</span><br></code></pre></td></tr></table></figure><p>在这一过程结束后，Docker实际上会在~/.docker目录下创建一个config.json文件，保存后续与Registry交互过程中所要使用的鉴权串（这个鉴权串只是一个base64编码结果，安全性欠佳)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  nexus cat ~<span class="hljs-regexp">/.docker/</span>config.json <br>&#123;<br>        <span class="hljs-string">&quot;auths&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;daocloud.io&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;xxxxQ==&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;https://index.docker.io/v1/&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;axxw==&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;registry.martin.com:5000&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;sdxxxxxxB&quot;</span><br>                &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;HttpHeaders&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Docker-Client/17.09.0-ce (linux)&quot;</span><br>        &#125;<br>&#125;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>一但Node上有了这个配置，那么K8s就可以通过docker直接访问Private Registry了，这是<a href="https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry">K8s文档中与私有镜像仓库交互的第一个方法</a> 。考虑到Pod可以被调度到集群中的任意一个Node上，需要在每个Node上执行上述login操作，或者可以简单地将<del>/.docker/config.json scp到各个node上的</del>/.docker目录下。</p><p>但实际效果却不尽人意.</p><h4 id="创建一个Pod-yaml-测试一下是否能run起来"><a href="#创建一个Pod-yaml-测试一下是否能run起来" class="headerlink" title="创建一个Pod.yaml,测试一下是否能run起来:"></a>创建一个Pod.yaml,测试一下是否能run起来:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <span class="hljs-string">cat</span> <span class="hljs-string">test.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-using-node-config</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-using-node-config</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/registry</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-comment">#指定节点启用pod</span><br>    <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <br></code></pre></td></tr></table></figure><h4 id="创建这个Pod并查看Pod的创建状态："><a href="#创建这个Pod并查看Pod的创建状态：" class="headerlink" title="创建这个Pod并查看Pod的创建状态："></a>创建这个Pod并查看Pod的创建状态：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  nexus kubectl <span class="hljs-keyword">create</span> -f test.yaml <br>pod &quot;rbd-rest-api-using-node-config&quot; created<br>➜  nexus kubectl <span class="hljs-keyword">get</span> pods<br><span class="hljs-type">NAME</span>                             READY     STATUS             RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746-vfnf8          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running            <span class="hljs-number">0</span>          <span class="hljs-number">17</span>h<br>rbd-rest-api-<span class="hljs-keyword">using</span>-node-config   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>       ImagePullBackOff   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>s<br></code></pre></td></tr></table></figure><h4 id="通过log查看Pod"><a href="#通过log查看Pod" class="headerlink" title="通过log查看Pod:"></a>通过log查看Pod:</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">➜  nexus kubectl logs pod/rbd-rest-api-using-node-config<br><span class="hljs-keyword">Error </span>from server (BadRequest): container &quot;rbd-rest-api-using-node-config&quot; in pod &quot;rbd-rest-api-using-node-config&quot; is waiting to start: trying and failing to pull image<br>➜  nexus <br></code></pre></td></tr></table></figure><h4 id="通过describe查看pod失败的更加详细的信息："><a href="#通过describe查看pod失败的更加详细的信息：" class="headerlink" title="通过describe查看pod失败的更加详细的信息："></a>通过describe查看pod失败的更加详细的信息：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">➜  nexus kubectl <span class="hljs-keyword">describe</span> pod<span class="hljs-operator">/</span>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span><span class="hljs-keyword">using</span><span class="hljs-operator">-</span>node<span class="hljs-operator">-</span>config<br>....<br>前面部分省略<br>....<br>QoS Class:       BestEffort<br>Node<span class="hljs-operator">-</span>Selectors:  kubernetes.io<span class="hljs-operator">/</span>hostname<span class="hljs-operator">=</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br>Tolerations:     <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>Events:<br>  Type     Reason                 Age                <span class="hljs-keyword">From</span>                   Message<br>  <span class="hljs-comment">----     ------                 ----               ----                   -------</span><br>  Normal   Scheduled              <span class="hljs-number">13</span>m                <span class="hljs-keyword">default</span><span class="hljs-operator">-</span>scheduler      Successfully assigned rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span><span class="hljs-keyword">using</span><span class="hljs-operator">-</span>node<span class="hljs-operator">-</span>config <span class="hljs-keyword">to</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br>  Normal   SuccessfulMountVolume  <span class="hljs-number">13</span>m                kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  MountVolume.SetUp succeeded <span class="hljs-keyword">for</span> volume &quot;default-token-fck44&quot;<br>  Normal   SandboxChanged         <span class="hljs-number">13</span>m                kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Pod sandbox changed, it will be killed <span class="hljs-keyword">and</span> re<span class="hljs-operator">-</span>created.<br>  Warning  Failed                 <span class="hljs-number">12</span>m (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">13</span>m)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Failed <span class="hljs-keyword">to</span> pull image &quot;registry.martin.com:5000/registry&quot;: rpc error: code <span class="hljs-operator">=</span> <span class="hljs-literal">Unknown</span> <span class="hljs-keyword">desc</span> <span class="hljs-operator">=</span> Error response <span class="hljs-keyword">from</span> daemon: <span class="hljs-keyword">Get</span> https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>registry.martin.com:<span class="hljs-number">5000</span><span class="hljs-operator">/</span>v2<span class="hljs-operator">/</span>registry<span class="hljs-operator">/</span>manifests<span class="hljs-operator">/</span>latest: <span class="hljs-keyword">no</span> basic auth credentials<br>  Normal   Pulling                <span class="hljs-number">11</span>m (x4 <span class="hljs-keyword">over</span> <span class="hljs-number">13</span>m)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  pulling image &quot;registry.martin.com:5000/registry&quot;<br>  Warning  Failed                 <span class="hljs-number">11</span>m (x4 <span class="hljs-keyword">over</span> <span class="hljs-number">13</span>m)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Error: ErrImagePull<br>  Normal   BackOff                <span class="hljs-number">8</span>m (x21 <span class="hljs-keyword">over</span> <span class="hljs-number">13</span>m)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Back<span class="hljs-operator">-</span>off pulling image &quot;registry.martin.com:5000/registry&quot;<br>  Warning  Failed                 <span class="hljs-number">3</span>m (x42 <span class="hljs-keyword">over</span> <span class="hljs-number">13</span>m)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Error: ImagePullBackOff<br>➜  nexus <br></code></pre></td></tr></table></figure><p>貌似不能生效,一直提示”no basic auth credentials”，结果是K8s无法从Private Registry获取我们想要的镜像文件.</p><h4 id="删除该Pod-尝试手动pull-registry仓库镜像"><a href="#删除该Pod-尝试手动pull-registry仓库镜像" class="headerlink" title="删除该Pod,尝试手动pull registry仓库镜像"></a>删除该Pod,尝试手动pull registry仓库镜像</h4><ul><li>删除Pod</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">➜  nexus kubectl <span class="hljs-keyword">delete</span> pod rbd-rest-api-<span class="hljs-keyword">using</span>-node-config<br>pod <span class="hljs-string">&quot;rbd-rest-api-using-node-config&quot;</span> deleted<br>➜  nexus kubectl get pods<br>NAME                      READY     STATUS    RESTARTS   AGE<br>已经没有该pod了<br></code></pre></td></tr></table></figure><ul><li>手动pull registry image</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@node3 docker]# docker pull registry.martin.<span class="hljs-keyword">com</span>:<span class="hljs-number">5000</span>/registry  <br>Using default <span class="hljs-keyword">ta</span><span class="hljs-variable">g:</span> latest<br>lates<span class="hljs-variable">t:</span> Pulling from registry<br><span class="hljs-number">81033</span>e7c1d6<span class="hljs-variable">a:</span> Pull <span class="hljs-built_in">complete</span> <br>b235084c2315: Pull <span class="hljs-built_in">complete</span> <br>c692f3a6894<span class="hljs-variable">b:</span> Pull <span class="hljs-built_in">complete</span> <br>ba2177f3a70e: Pull <span class="hljs-built_in">complete</span> <br>a8d793620947: Pull <span class="hljs-built_in">complete</span> <br>Diges<span class="hljs-variable">t:</span> <span class="hljs-built_in">sha256</span>:feb40d14cd33e646b9985e2d6754ed66616fedb840226c4d917ef53d616dcd6c<br>Statu<span class="hljs-variable">s:</span> Downloaded newer image <span class="hljs-keyword">for</span> registry.martin.<span class="hljs-keyword">com</span>:<span class="hljs-number">5000</span>/registry:latest<br>==node3为指定运行pod的节点==<br></code></pre></td></tr></table></figure><h4 id="再次创建rbd-rest-api-using-node-config-pod"><a href="#再次创建rbd-rest-api-using-node-config-pod" class="headerlink" title="再次创建rbd-rest-api-using-node-config pod"></a>再次创建rbd-rest-api-using-node-config pod</h4><p>如果需要借助该image运行某些环境的话，是可以使用了，因为image已经手动拉取了。不然如果自动拉取的话会一直提示没有basic认证</p><hr><h3 id="方法2：通过kubectl创建docker-registry的secret"><a href="#方法2：通过kubectl创建docker-registry的secret" class="headerlink" title="方法2：通过kubectl创建docker-registry的secret"></a>方法2：通过kubectl创建docker-registry的secret</h3><p>K8s提供的第二种方法是通过kubectl创建一个docker-registry的secret，并在Pod描述文件中引用该secret以达到从Private Registry Pull Image的目的。</p><h4 id="操作之前，先删除掉各个Node上的-docker-config-json。"><a href="#操作之前，先删除掉各个Node上的-docker-config-json。" class="headerlink" title="操作之前，先删除掉各个Node上的~/.docker/config.json。"></a>操作之前，先删除掉各个Node上的~/.docker/config.json。</h4><p>执行kubectl create secret docker-registry时需要提供private registry的访问UserName和Password：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">➜  nexus kubectl <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> secret</span><br><span class="hljs-built_in"></span>NAME                 <span class="hljs-built_in"> TYPE </span>                                 DATA      AGE<br>default-token-fck44   kubernetes.io/service-account-token   3         15d<br>可以看到之前已经有个default-token的secret<br>➜  nexus <br>➜  nexus kubectl create<span class="hljs-built_in"> secret </span>docker-registry registrykey-2.6.2 <span class="hljs-attribute">--docker-server</span>=registry.martin.com:5000 <span class="hljs-attribute">--docker-username</span>=martin <span class="hljs-attribute">--docker-password</span>=xxx1 <span class="hljs-attribute">--docker-email</span>=hanniusshine@gmail.com<span class="hljs-built_in"></span><br><span class="hljs-built_in">secret </span><span class="hljs-string">&quot;registrykey-2.6.2&quot;</span> created<br><br>➜  nexus kubectl <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> secret </span>                                               <br>NAME                 <span class="hljs-built_in"> TYPE </span>                                 DATA      AGE<br>default-token-fck44   kubernetes.io/service-account-token   3         15d<br>registrykey-2.6.2     kubernetes.io/dockerconfigjson        1         3s<br>➜  nexus <br></code></pre></td></tr></table></figure><h4 id="secret-registrykey-2-6-2创建成功。测试一下引用这个secret对象的Pod是否能Pull-Image成功并Run起来-引用时Pod的YAML文件中必须指定imagePullSecrets为创建的secrety-Pod-yaml文件如下："><a href="#secret-registrykey-2-6-2创建成功。测试一下引用这个secret对象的Pod是否能Pull-Image成功并Run起来-引用时Pod的YAML文件中必须指定imagePullSecrets为创建的secrety-Pod-yaml文件如下：" class="headerlink" title="secret: registrykey-2.6.2创建成功。测试一下引用这个secret对象的Pod是否能Pull Image成功并Run起来,引用时Pod的YAML文件中必须指定imagePullSecrets为创建的secrety,Pod yaml文件如下："></a>secret: registrykey-2.6.2创建成功。测试一下引用这个secret对象的Pod是否能Pull Image成功并Run起来,引用时Pod的YAML文件中必须指定imagePullSecrets为创建的secrety,Pod yaml文件如下：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <span class="hljs-string">cat</span> <span class="hljs-string">test.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-registrykey-2.6.2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-registrykey-2.6.2</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/registry</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">registrykey-2.6.2</span>  <br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <br></code></pre></td></tr></table></figure><h4 id="创建Pod-查看Pod状态："><a href="#创建Pod-查看Pod状态：" class="headerlink" title="创建Pod,查看Pod状态："></a>创建Pod,查看Pod状态：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">➜  nexus kubectl <span class="hljs-keyword">create</span> -f test.yaml<br>The Pod <span class="hljs-string">&quot;rbd-rest-api-registrykey-m2.6.2-1&quot;</span> <span class="hljs-keyword">is</span> invalid: spec.containers[<span class="hljs-number">0</span>].name: Invalid <span class="hljs-keyword">value</span>: <span class="hljs-string">&quot;rbd-rest-api-registrykey-m2.6.2-1&quot;</span>: a DNS<span class="hljs-number">-1123</span> label must consist of <span class="hljs-built_in">lower</span> <span class="hljs-keyword">case</span> alphanumeric characters <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-keyword">and</span> must <span class="hljs-keyword">start</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> an alphanumeric character (<span class="hljs-built_in">e</span>.g. <span class="hljs-string">&#x27;my-name&#x27;</span>,  <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;123-abc&#x27;</span>, regex used <span class="hljs-keyword">for</span> validation <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;[a-z0-9]([-a-z0-9]*[a-z0-9])?&#x27;</span>)<br>原来container的name命名只能用小写字母和-，不能用.号，所以修改name为：<span class="hljs-string">&quot;rbd-rest-api-registrykey-m262-1&quot;</span><br><br>再次创建ok:<br>➜  nexus kubectl <span class="hljs-keyword">create</span> -f test.yaml<br>pod <span class="hljs-string">&quot;rbd-rest-api-registrykey-m262-1&quot;</span> created<br>➜  nexus <br>➜  nexus kubectl get pods           <br>NAME                              READY     STATUS    RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746-vfnf8           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">18</span>h<br>rbd-rest-api-registrykey-m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>s<br>➜  nexus <br></code></pre></td></tr></table></figure><h4 id="通过describe-pod，查看创建的event序列："><a href="#通过describe-pod，查看创建的event序列：" class="headerlink" title="通过describe pod，查看创建的event序列："></a>通过describe pod，查看创建的event序列：</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">➜  nexus kubectl describe pod/rbd-rest-api-registrykey-m262-1<br><span class="hljs-string">...</span><br>部分省略<br><span class="hljs-string">...</span><br>Events:<br>  Type    Reason                 Age   From                   Message<br>  <span class="hljs-params">----</span>    <span class="hljs-params">------</span>                 <span class="hljs-params">----</span>  <span class="hljs-params">----</span>                   <span class="hljs-params">-------</span><br>  Normal  Scheduled              1m    default-scheduler      Successfully assigned rbd-rest-api-registrykey-m262-1 to 192.168.1.16<br>  Normal  SuccessfulMountVolume  1m    kubelet, 192.168.1.16  MountVolume.SetUp succeeded for volume <span class="hljs-string">&quot;default-token-fck44&quot;</span><br>  Normal  Pulling                1m    kubelet, 192.168.1.16  pulling image <span class="hljs-string">&quot;registry.martin.com:5000/registry&quot;</span><br>  Normal  Pulled                 1m    kubelet, 192.168.1.16  Successfully pulled image <span class="hljs-string">&quot;registry.martin.com:5000/registry&quot;</span><br>  Normal  Created                1m    kubelet, 192.168.1.16  Created container<br>  Normal  Started                1m    kubelet, 192.168.1.16  Started container<br>➜  nexus <br></code></pre></td></tr></table></figure><p>正如期望的那样，引用了secret: registrykey-2.6.2的Pod成功Run起来了。</p><p>查看指定运行pod的节点是否run了对应的image:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@node3 docker]# docker ps<br>CONTAINER ID        IMAGE                                            COMMAND                  CREATED             STATUS              PORTS               NAMES<br>457e48f68bd7        registry.martin.com:5000/registry                &quot;/entrypoint.sh /e...&quot;   6 minutes ago       Up 5 minutes                            k8s_rbd-rest-api-registrykey-m262<span class="hljs-string">-1</span>_rbd-rest-api-registrykey-m262<span class="hljs-string">-1</span>_default_1265c1f5<span class="hljs-string">-75</span>f3<span class="hljs-string">-11</span>e8<span class="hljs-string">-8760</span><span class="hljs-string">-5254004</span>f2222_0<br></code></pre></td></tr></table></figure><hr><h3 id="如果一个pod中有来自不同私有仓库的不同镜像，需要怎么做呢？"><a href="#如果一个pod中有来自不同私有仓库的不同镜像，需要怎么做呢？" class="headerlink" title="如果一个pod中有来自不同私有仓库的不同镜像，需要怎么做呢？"></a>如果一个pod中有来自不同私有仓库的不同镜像，需要怎么做呢？</h3><p>通过kubectl create secret docker-registry一次只能建立一个registrykey，如果要访问两个镜像仓库，就需要分别为每个仓库创建一个registrykey。再来创建一个registrykey，对应的仓库为：registry.martin.com:6000</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">➜  nexus <br>➜  nexus kubectl create<span class="hljs-built_in"> secret </span>docker-registry registrykey-2.6.3 <span class="hljs-attribute">--docker-server</span>=registry.martin.com:6000 <span class="hljs-attribute">--docker-username</span>=martin <span class="hljs-attribute">--docker-password</span>=xxx2 <span class="hljs-attribute">--docker-email</span>=hanniusshine@gmail.com<span class="hljs-built_in"></span><br><span class="hljs-built_in">secret </span><span class="hljs-string">&quot;registrykey-2.6.3&quot;</span> created<br><br>➜  nexus kubectl <span class="hljs-builtin-name">get</span><span class="hljs-built_in"> secret </span>                                               <br>NAME                 <span class="hljs-built_in"> TYPE </span>                                 DATA      AGE<br>default-token-fck44   kubernetes.io/service-account-token   3         15d<br>registrykey-2.6.2     kubernetes.io/dockerconfigjson        1         3s<br>registrykey-2.6.3     kubernetes.io/dockerconfigjson        1         3s<br>➜  nexus <br></code></pre></td></tr></table></figure><h4 id="创建一个包含多个container的Pod："><a href="#创建一个包含多个container的Pod：" class="headerlink" title="创建一个包含多个container的Pod："></a>创建一个包含多个container的Pod：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <span class="hljs-string">cat</span> <span class="hljs-string">test2.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-multi-registrykeys-m262-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-multi-registrykeys-m262-2</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/registry</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-multi-registrykeys-m262-2</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:6000/registry</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>    <span class="hljs-attr">command:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;tail&quot;</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-f&quot;</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/log/bootstrap.log&quot;</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">registrykey-2.6.2</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">registrykey-2.6.3</span><br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <br></code></pre></td></tr></table></figure><h4 id="在secret引用中，将两个key都引用了进来。创建该pod"><a href="#在secret引用中，将两个key都引用了进来。创建该pod" class="headerlink" title="在secret引用中，将两个key都引用了进来。创建该pod"></a>在secret引用中，将两个key都引用了进来。创建该pod</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl create -f test2.yaml</span><br><span class="hljs-attribute">pod</span> <span class="hljs-string">&quot;rbd-rest-api-multi-registrykeys-m262-2&quot;</span> created<br><br><span class="hljs-comment"># kubectl get pod</span><br><span class="hljs-attribute">NAME</span>                                   READY     STATUS             RESTARTS   AGE<br><span class="hljs-attribute">rbd</span>-rest-api-multi-registrykeys-m<span class="hljs-number">262</span>-<span class="hljs-number">2</span>   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>       Running            <span class="hljs-number">0</span>          <span class="hljs-number">5</span>s<br></code></pre></td></tr></table></figure><h4 id="通过pod的event，看下启动的操作顺序："><a href="#通过pod的event，看下启动的操作顺序：" class="headerlink" title="通过pod的event，看下启动的操作顺序："></a>通过pod的event，看下启动的操作顺序：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">Events:</span><br>  Type    Reason                 Age   From                   Message<br>  ----    ------                 ----  ----                   -------<br>  <span class="hljs-keyword">Normal </span> <span class="hljs-keyword">Scheduled </span>             <span class="hljs-number">1</span>m    default-<span class="hljs-keyword">scheduler </span>     Successfully assigned rbd-rest-api-registrykey-m262<span class="hljs-number">-1</span> to <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span><br>  <span class="hljs-keyword">Normal </span> SuccessfulMountVolume  <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  MountVolume.SetUp succeeded for volume <span class="hljs-string">&quot;default-token-fck44&quot;</span><br>  <span class="hljs-keyword">Normal </span> Pulling                <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  pulling image <span class="hljs-string">&quot;registry.martin.com:5000/registry&quot;</span><br>  <span class="hljs-keyword">Normal </span> Pulled                 <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  Successfully pulled image <span class="hljs-string">&quot;registry.martin.com:5000/registry&quot;</span><br>  <span class="hljs-keyword">Normal </span> Created                <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  Created container<br>  <span class="hljs-keyword">Normal </span> Started                <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  Started container<br>  <span class="hljs-keyword">Normal </span> Pulling                <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  pulling image <span class="hljs-string">&quot;registry.martin.com:6000/registry&quot;</span><br>  <span class="hljs-keyword">Normal </span> Pulled                 <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  Successfully pulled image <span class="hljs-string">&quot;registry.martin.com:6000/registry&quot;</span><br>  <span class="hljs-keyword">Normal </span> Created                <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  Created container<br>  <span class="hljs-keyword">Normal </span> Started                <span class="hljs-number">1</span>m    kubelet, <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>  Started container<br>➜  nexus <br></code></pre></td></tr></table></figure><hr><h3 id="方法3：通过secret-yaml文件创建pull-image所用的secret"><a href="#方法3：通过secret-yaml文件创建pull-image所用的secret" class="headerlink" title="方法3：通过secret yaml文件创建pull image所用的secret"></a>方法3：通过secret yaml文件创建pull image所用的secret</h3><p>除了上面通过kubectl可以快捷的创建pull image所用的secret外，还可以使用常规的手段-yaml描述文件来创建需要的secret资源。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  nexus cat registrykey-m262<span class="hljs-number">-3.</span>yaml <br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> registrykey-m262<span class="hljs-number">-3</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">data:</span><br>    <span class="hljs-meta">#.dockerconfigjson: &#123;base64 -w 0 ~/.docker/config.json&#125;</span><br>    .dockerconfigjson: xxxxx<br><span class="hljs-symbol">type:</span> kubernetes.io/dockerconfigjson<br>➜  nexus <br></code></pre></td></tr></table></figure><p>前面说过docker login会在~/.docker下面创建一个config.json文件保存鉴权串，这里secret yaml的.dockerconfigjson后面的数据就是那个json文件的base64编码输出（-w 0让base64输出在单行上，避免折行）。</p><h4 id="创建registrykey-m262-3-secret"><a href="#创建registrykey-m262-3-secret" class="headerlink" title="创建registrykey-m262-3 secret:"></a>创建registrykey-m262-3 secret:</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜  nexus cat ~/.docker/config.json                <br>&#123;<br>        &quot;auths&quot;: &#123;<br>                &quot;daocloud.io&quot;: &#123;<br>                        &quot;auth&quot;: &quot;aGFubml1czppYnhnMVE1QQ==&quot;<br>                &#125;,<br>                &quot;https://index.docker.io/v1/&quot;: &#123;<br>                        &quot;auth&quot;: &quot;aGFubml1czppYnhnMVE1QTg4Ng==&quot;<br>                &#125;,<br>                &quot;registry.martin.com:5000&quot;: &#123;<br>                        &quot;auth&quot;: &quot;bWFydGluOmlieGcxUTVB&quot;<br>                &#125;<br>        &#125;,<br>        &quot;HttpHeaders&quot;: &#123;<br>                &quot;User-Agent&quot;: &quot;Docker-Client/17.09.0-ce (linux)&quot;<br>        &#125;<br>&#125;#<br>➜  nexus<br>因为此处&quot;#&quot;的问题，导致通过base64 -w <span class="hljs-number">0</span> ~/.docker/config.json生成的base转码有问题，一直创建pod失败，原因是zsh模拟器引起的&quot;#&quot;,切换到正常shell下ok<br><br>➜  nexus kubectl <span class="hljs-keyword">create</span> -f registrykey-m262<span class="hljs-number">-3.</span>yaml<br>secret &quot;registrykey-m262-3&quot; created<br>➜  nexus <br><br>➜  nexus kubectl <span class="hljs-keyword">get</span> secret <br><span class="hljs-type">NAME</span>                  <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br><span class="hljs-keyword">default</span>-token-fck44   kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">15</span>d<br>registrykey<span class="hljs-number">-2.6</span><span class="hljs-number">.2</span>     kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">2</span>h<br>registrykey-m262<span class="hljs-number">-3</span>    kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">4</span>m<br><br></code></pre></td></tr></table></figure><p>如果是以前老版本可能出现：<br>两个registrykey secret的类型略有不同，前者是:kubernetes.io/dockercfg，后者是:kubernetes.io/dockerconfigjson</p><h4 id="同样的可以使用describe命令来查看详细信息："><a href="#同样的可以使用describe命令来查看详细信息：" class="headerlink" title="同样的可以使用describe命令来查看详细信息："></a>同样的可以使用describe命令来查看详细信息：</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">➜  nexus kubectl describe secret registrykey-m262-3<br>Name:         registrykey-m262-3<br>Namespace:    default<br>Labels:       &lt;none&gt;<br>Annotations:  &lt;none&gt;<br><br>Type:  kubernetes.io/dockerconfigjson<br><br><span class="hljs-section">Data</span><br><span class="hljs-section">====</span><br><span class="hljs-title">.dockerconfigjson:  305 bytes</span><br></code></pre></td></tr></table></figure><h4 id="可以看到Data区域没有直接展示出来，如果想查看的话可以使用-o-yaml来输出展示出来："><a href="#可以看到Data区域没有直接展示出来，如果想查看的话可以使用-o-yaml来输出展示出来：" class="headerlink" title="可以看到Data区域没有直接展示出来，如果想查看的话可以使用-o yaml来输出展示出来："></a>可以看到Data区域没有直接展示出来，如果想查看的话可以使用-o yaml来输出展示出来：</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  nexus kubectl get secret registrykey-m262<span class="hljs-number">-3</span> -o yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br>  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJkYW9jbG91ZC5pbyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTsdsdcmc9PSIKCQl9LAoJCSJyZWdpc3RyeS5tYXJ0aW4uY29tOjUwMDAiOiB7CgkJCSJhdXRoIjogImJXRnlkR2x1T21saWVHY3hVVFZCIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xNy4wOS4wLWNlIChsaW51eCkiCgl9Cn0=<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2018</span><span class="hljs-number">-06</span><span class="hljs-number">-22</span>T10:<span class="hljs-number">06</span>:<span class="hljs-number">27</span>Z<br><span class="hljs-symbol">  name:</span> registrykey-m262<span class="hljs-number">-3</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;1519892&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-meta-keyword">/api/</span>v1<span class="hljs-meta-keyword">/namespaces/</span>default<span class="hljs-meta-keyword">/secrets/</span>registrykey-m262<span class="hljs-number">-3</span><br><span class="hljs-symbol">  uid:</span> ed2f027e<span class="hljs-number">-7603</span><span class="hljs-number">-11e8</span><span class="hljs-number">-8760</span><span class="hljs-number">-5254004</span>f2222<br><span class="hljs-symbol">type:</span> kubernetes.io/dockerconfigjson<br>➜  nexus <br></code></pre></td></tr></table></figure><h4 id="可以把上面的data-dockerconfigjson下面的数据做一个base64解码，看看里面的数据是怎样的"><a href="#可以把上面的data-dockerconfigjson下面的数据做一个base64解码，看看里面的数据是怎样的" class="headerlink" title="可以把上面的data.dockerconfigjson下面的数据做一个base64解码，看看里面的数据是怎样的:"></a>可以把上面的data.dockerconfigjson下面的数据做一个base64解码，看看里面的数据是怎样的:</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs 1c">nexus echo ewoJImF1dGhzIjogewoJCSJkYW9jbG91ZC5pbyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRUT09IgoJCX0sCgkJImh0dHBzOi8vaW5kZXguZG9ja2VyLmlvL3YxLyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRVGc0Tmc9PSIKCQl9LAoJCSJyZWdpc3RyeS5tYXJ0aW4uY29tOjUwMDAiOiB7CgkJCSJdsddImJXRnlkR2x1T21saWVHY3hVVFZCIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xNy4wOS4wLWNlIChsaW51eCkiCgl9Cn0= <span class="hljs-string">|base64 -d</span><br>&#123;<br>        <span class="hljs-string">&quot;auths&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;daocloud.io&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;aGFubmldffnhnMVE1QQ==&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;https://index.docker.io/v1/&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;aGFubml1czffnhnMVE1QTg4Ng==&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;registry.martin.com:5000&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;bWFydGff4dieGcxUTVB&quot;</span><br>                &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;HttpHeaders&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Docker-Client/17.09.0-ce (linux)&quot;</span><br>        &#125;<br>&#125;<span class="hljs-meta">#                                                                             ➜  nexus</span><br></code></pre></td></tr></table></figure><h4 id="编写引用registrykey-m262-3的pod"><a href="#编写引用registrykey-m262-3的pod" class="headerlink" title="编写引用registrykey-m262-3的pod:"></a>编写引用registrykey-m262-3的pod:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <span class="hljs-string">cat</span> <span class="hljs-string">test3.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-registrykey-m262-3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-rest-api-registrykey-m262-3</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/os/alpine</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">registrykey-m262-3</span>  <br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br><span class="hljs-string">➜</span>  <span class="hljs-string">nexus</span> <br></code></pre></td></tr></table></figure><h4 id="创建运行pod"><a href="#创建运行pod" class="headerlink" title="创建运行pod:"></a>创建运行pod:</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">➜  nexus kubectl <span class="hljs-keyword">create</span> <span class="hljs-operator">-</span>f test3.yaml <br>pod &quot;rbd-rest-api-registrykey-m262-3&quot; created<br>➜  nexus kubectl <span class="hljs-keyword">get</span> pod<br>NAME                              READY     STATUS             RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746<span class="hljs-operator">-</span>vfnf8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>            <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>            <span class="hljs-number">0</span>          <span class="hljs-number">2</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-3</span>   <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       CrashLoopBackOff   <span class="hljs-number">1</span>          <span class="hljs-number">7</span>s<br>➜  nexus <br>➜  nexus kubectl <span class="hljs-keyword">describe</span> pod rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-3</span><br>Events:<br>  Type     Reason                 Age                <span class="hljs-keyword">From</span>                   Message<br>  <span class="hljs-comment">----     ------                 ----               ----                   -------</span><br>  Normal   Scheduled              <span class="hljs-number">39</span>s                <span class="hljs-keyword">default</span><span class="hljs-operator">-</span>scheduler      Successfully assigned rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-3</span> <span class="hljs-keyword">to</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span><br>  Normal   SuccessfulMountVolume  <span class="hljs-number">39</span>s                kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  MountVolume.SetUp succeeded <span class="hljs-keyword">for</span> volume &quot;default-token-fck44&quot;<br>  Normal   Pulling                <span class="hljs-number">22</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">38</span>s)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  pulling image &quot;registry.martin.com:5000/os/alpine&quot;<br>  Normal   Pulled                 <span class="hljs-number">22</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">38</span>s)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Successfully pulled image &quot;registry.martin.com:5000/os/alpine&quot;<br>  Normal   Created                <span class="hljs-number">22</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">38</span>s)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Created container<br>  Normal   Started                <span class="hljs-number">22</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">37</span>s)  kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Started container<br>  Warning  BackOff                <span class="hljs-number">7</span>s (x4 <span class="hljs-keyword">over</span> <span class="hljs-number">36</span>s)   kubelet, <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.16</span>  Back<span class="hljs-operator">-</span>off restarting failed container<br><br>➜  nexus kubectl <span class="hljs-keyword">get</span> pod                                     <br>NAME                              READY     STATUS      RESTARTS   AGE<br>nexus3<span class="hljs-number">-68</span>f55d9746<span class="hljs-operator">-</span>vfnf8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-1</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">2</span>d<br>rbd<span class="hljs-operator">-</span>rest<span class="hljs-operator">-</span>api<span class="hljs-operator">-</span>registrykey<span class="hljs-operator">-</span>m262<span class="hljs-number">-3</span>   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>       <span class="hljs-keyword">Running</span>   <span class="hljs-number">3</span>          <span class="hljs-number">50</span>s<br><br></code></pre></td></tr></table></figure><p>创建成功。</p><h4 id="那么这种方法如何应对含有来自多个镜像仓库container的Pod的呢？"><a href="#那么这种方法如何应对含有来自多个镜像仓库container的Pod的呢？" class="headerlink" title="那么这种方法如何应对含有来自多个镜像仓库container的Pod的呢？"></a>那么这种方法如何应对含有来自多个镜像仓库container的Pod的呢？</h4><p>这里的思路与方法2略有不同。不需要创建并引用两个或多个secret，而是==创建一个可以访问多个私有镜像仓库的secret==，需要将多个镜像仓库的访问鉴权串都放到~/.docker/config.json中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;auths&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;registry.martin.com:5000&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;auth&quot;</span>: <span class="hljs-string">&quot;....省略....&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再docker login registry.martin.com:6000,得到config.json如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;auths&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;registry.martin.com:5000&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;auth&quot;</span>: <span class="hljs-string">&quot;....省略....&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;registry.martin.com:6000&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;auth&quot;</span>: <span class="hljs-string">&quot;....省略....&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到Docker自动将新login的private registry的鉴权串merge到了同一个config.json中了，与云镜像加速器daocloud.io类似</p><h4 id="现在基于该包含了两个库鉴权串的config-json创建一个新secret：registrykey-m262-4："><a href="#现在基于该包含了两个库鉴权串的config-json创建一个新secret：registrykey-m262-4：" class="headerlink" title="现在基于该包含了两个库鉴权串的config.json创建一个新secret：registrykey-m262-4："></a>现在基于该包含了两个库鉴权串的config.json创建一个新secret：registrykey-m262-4：</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts">➜  nexus cat registrykey-m262<span class="hljs-number">-4.</span>yaml <br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> registrykey-m262<span class="hljs-number">-4</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">data:</span><br>  <span class="hljs-meta">#.dockerconfigjson: &#123;base64 -w 0 ~/.docker/config.json&#125; #基于该命令创建下面base64 encode码</span><br>  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJkYW9jbG91ZC5pbyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRUT09IgoJCX0sCgkJImh0dHBzOi8vaW5kZXguZG9ja2VyLmlvL3YxLyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRVGc0Tmc9PSIKCQl9LAoJCSJyZWdpc3RyeS5tYXJ0aW4uY29tOjUwMDAiOiB7CgkJCSJhdXRoIjogImJXRnlkR2x1T21saWVHY3hVVFZCIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xNy4wOS4wLWNlIChsaW51eCkiCgl9Cn0=<br><span class="hljs-symbol">type:</span> kubernetes.io/dockerconfigjson<br></code></pre></td></tr></table></figure><h4 id="创建secret-registrykey-m262-4"><a href="#创建secret-registrykey-m262-4" class="headerlink" title="创建secret:registrykey-m262-4"></a>创建secret:registrykey-m262-4</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># kubectl create -f registrykey-m262-4.yaml </span><br></code></pre></td></tr></table></figure><h4 id="编辑一个包含两个容器，引用secret-“registrykey-m262-4″-的Pod-yaml："><a href="#编辑一个包含两个容器，引用secret-“registrykey-m262-4″-的Pod-yaml：" class="headerlink" title="编辑一个包含两个容器，引用secret “registrykey-m262-4″ 的Pod yaml："></a>编辑一个包含两个容器，引用secret “registrykey-m262-4″ 的Pod yaml：</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts">cat test4.yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> rbd-rest-api-multi-registrykeys-m262<span class="hljs-number">-2</span><br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: rbd-rest-api-multi-registrykeys-m262<span class="hljs-number">-2</span><br><span class="hljs-symbol">    image:</span> registry.martin.com:<span class="hljs-number">5000</span><span class="hljs-meta-keyword">/xxxx/</span>rbd-rest-api:latest<br><span class="hljs-symbol">    imagePullPolicy:</span> Always<br>  - name: test-multi-registrykeys-m262<span class="hljs-number">-2</span><br><span class="hljs-symbol">    image:</span> registry.martin.com:<span class="hljs-number">6000</span><span class="hljs-meta-keyword">/xxxx/</span>test:latest<br><span class="hljs-symbol">    imagePullPolicy:</span> Always<br><span class="hljs-symbol">    command:</span><br>       - <span class="hljs-string">&quot;tail&quot;</span><br>       - <span class="hljs-string">&quot;-f&quot;</span><br>       - <span class="hljs-string">&quot;/var/log/bootstrap.log&quot;</span><br><span class="hljs-symbol">  imagePullSecrets:</span><br>  - name: registrykey-m262<span class="hljs-number">-4</span><br></code></pre></td></tr></table></figure><h4 id="创建改pod"><a href="#创建改pod" class="headerlink" title="创建改pod:"></a>创建改pod:</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl create -f test4.yaml</span><br><span class="hljs-attribute">pod</span> <span class="hljs-string">&quot;rbd-rest-api-multi-registrykeys-m262-2&quot;</span> created<br><br><span class="hljs-comment"># kubectl get pod</span><br><span class="hljs-attribute">NAME</span>                                   READY     STATUS             RESTARTS   AGE<br><span class="hljs-attribute">rbd</span>-rest-api-multi-registrykeys-m<span class="hljs-number">262</span>-<span class="hljs-number">2</span>   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>       Running            <span class="hljs-number">0</span>          <span class="hljs-number">4</span>s<br><br></code></pre></td></tr></table></figure><p>Pod创建成功</p><h3 id="调用API创建registrykey-secret"><a href="#调用API创建registrykey-secret" class="headerlink" title="调用API创建registrykey secret"></a>调用API创建registrykey secret</h3><p>对比了方法2和方法3，方法2更简洁，方法3更强大。但在任何一个产品中，secret都不应该是手动创建的，在这种情况下， API创建 registrykey secret便是必经之路。一旦选择通过API创建，我们显然将依仗着方法2中的原理，将config.json中的内容通过API请求的Body Post给K8s api server。</p><h4 id="如何在远端构建出config-json的内容继而构建出secret-yaml中-dockerconfigjson的值数据呢？"><a href="#如何在远端构建出config-json的内容继而构建出secret-yaml中-dockerconfigjson的值数据呢？" class="headerlink" title="如何在远端构建出config.json的内容继而构建出secret yaml中.dockerconfigjson的值数据呢？"></a>如何在远端构建出config.json的内容继而构建出secret yaml中.dockerconfigjson的值数据呢？</h4><p>我们发现config.json套路中，唯一不确定的就是每个private repository下的auth串，那么这个串是啥？你大可base64 -d一下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># echo -n <span class="hljs-string">&quot;sddfhbfUGFzcgg3dgf=&quot;</span>|base64 -d</span><br><span class="hljs-symbol">UserName:</span>Password<br></code></pre></td></tr></table></figure><p>可以看到实质上这个auth串就是UserName:Password的base64编码值。因此，首先要用某个仓库的UserName和Password按照’UserName:Password’格式进行base64编码，利用编码的结果值构造json内容，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;auths&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;registry.martin.com:5000/xxxx/rbd-rest-api&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;auth&quot;</span>: <span class="hljs-string">&quot;Vsddff3dfFzc3dfgQ=&quot;</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后对这段json数据再做base64编码，所得到的值就是secret yaml中的.dockerconfigjson的值数据。</p><h4 id="通过API创建一个secret："><a href="#通过API创建一个secret：" class="headerlink" title="通过API创建一个secret："></a>通过API创建一个secret：</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs llvm">➜  nexus cat secret_api.sh <br>#!/bin/bash<br>#<span class="hljs-string">&quot;.dockerconfigjson&quot;</span>: <span class="hljs-string">&quot;&#123;cat ~/.docker/config.json |base64 -w 0&#125;&quot;</span><br>curl -v -H <span class="hljs-string">&quot;Content-type: application/json&quot;</span>  -X POST -d &#x27; &#123;<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Secret&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;registrykey-m262-5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;.dockerconfigjson&quot;</span>: <span class="hljs-string">&quot;ewoJImF1dGhzIjogewoJCSJkYW9jbG91ZC5pbyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRUT09IgoJCX0sCgkJImh0dHBzOi8vaW5kZXguZG9ja2VyLmlvL3YxLyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRVGc0Tmc9PSIKCQl9LAoJCSJyZWdpc3RyeS5tYXJ0aW4uY29tOjUwMDAiOiB7CgkJCSJhdXRoIjogImJXRnlkR2x1T21saWVHY3hVVFZCIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xNy4wOS4wLWNlIChsaW51eCkiCgl9Cn0=&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;kubernetes.io/dockerconfigjson&quot;</span><br>&#125;&#x27; http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span>/api/v<span class="hljs-number">1</span>/namespaces/<span class="hljs-keyword">default</span>/secrets<br>➜  nexus<br>➜  nexus ./secret_api.sh  <br>* About <span class="hljs-keyword">to</span> connect() <span class="hljs-keyword">to</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> port <span class="hljs-number">8080</span> (<span class="hljs-variable">#0</span>)<br>*   Trying <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>...<br>* Connected <span class="hljs-keyword">to</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> (<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>) port <span class="hljs-number">8080</span> (<span class="hljs-variable">#0</span>)<br>&gt; POST /api/v<span class="hljs-number">1</span>/namespaces/<span class="hljs-keyword">default</span>/secrets HTTP/<span class="hljs-number">1.1</span><br>&gt; User-Agent: curl/<span class="hljs-number">7.29</span>.<span class="hljs-number">0</span><br>&gt; Host: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><br>&gt; Accept: */*<br>&gt; Content-<span class="hljs-keyword">type</span>: application/json<br>&gt; Content-Length: <span class="hljs-number">624</span><br>&gt; <br>* upload completely sent off: <span class="hljs-number">624</span> out of <span class="hljs-number">624</span> bytes<br>&lt; HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">201</span> Created<br>&lt; Content-Type: application/json<br>&lt; Date: Mon<span class="hljs-punctuation">,</span> <span class="hljs-number">25</span> Jun <span class="hljs-number">2018</span> <span class="hljs-number">07</span>:<span class="hljs-number">01</span>:<span class="hljs-number">04</span> GMT<br>&lt; Content-Length: <span class="hljs-number">830</span><br>&lt; <br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Secret&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;registrykey-m262-5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;selfLink&quot;</span>: <span class="hljs-string">&quot;/api/v1/namespaces/default/secrets/registrykey-m262-5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;86ccae15-7845-11e8-8760-5254004f2222&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;resourceVersion&quot;</span>: <span class="hljs-string">&quot;1815470&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;creationTimestamp&quot;</span>: <span class="hljs-string">&quot;2018-06-25T07:01:04Z&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;.dockerconfigjson&quot;</span>: <span class="hljs-string">&quot;ewoJImF1dGhzIjogewoJCSJkYW9jbG91ZC5pbyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRUT09IgoJCX0sCgkJImh0dHBzOi8vaW5kZXguZG9ja2VyLmlvL3YxLyI6IHsKCQkJImF1dGgiOiAiYUdGdWJtbDFjenBwWW5obk1WRTFRVGc0Tmc9PSIKCQl9LAoJCSJyZWdpc3RyeS5tYXJ0aW4uY29tOjUwMDAiOiB7CgkJCSJhdXRoIjogImJXRnlkR2x1T21saWVHY3hVVFZCIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xNy4wOS4wLWNlIChsaW51eCkiCgl9Cn0=&quot;</span><br>  &#125;<span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;kubernetes.io/dockerconfigjson&quot;</span><br>* Connection <span class="hljs-variable">#0</span> <span class="hljs-keyword">to</span> host <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> left intact<br>&#125;<br>➜  nexus kubectl get secret<br>NAME                  TYPE                                  DATA      AGE<br><span class="hljs-keyword">default</span>-token-fck<span class="hljs-number">44</span>   kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">17</span>d<br>registrykey<span class="hljs-number">-2.6</span>.<span class="hljs-number">2</span>     kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">2</span>d<br>registrykey-m<span class="hljs-number">262</span><span class="hljs-number">-3</span>    kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">2</span>d<br>registrykey-m<span class="hljs-number">262</span><span class="hljs-number">-5</span>    kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">2</span>m<br>➜  nexus <br></code></pre></td></tr></table></figure><h4 id="基于registrykey-m262-5，启动一个Pod："><a href="#基于registrykey-m262-5，启动一个Pod：" class="headerlink" title="基于registrykey-m262-5，启动一个Pod："></a>基于registrykey-m262-5，启动一个Pod：</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> rbd-rest-api-registrykey-m262<span class="hljs-number">-5</span><br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: rbd-rest-api-registrykey-m262<span class="hljs-number">-5</span><br><span class="hljs-symbol">    image:</span> registry.martin.com:<span class="hljs-number">5000</span><span class="hljs-meta-keyword">/xxxx/</span>api:latest<br><span class="hljs-symbol">    imagePullPolicy:</span> Always<br><span class="hljs-symbol">  imagePullSecrets:</span><br>  - name: registrykey-m262<span class="hljs-number">-5</span><br><br><span class="hljs-meta"># kubectl create -f test5.yaml</span><br>pod <span class="hljs-string">&quot;rbd-rest-api-registrykey-m262-5&quot;</span> created<br><br><span class="hljs-meta"># kubectl get pod</span><br>NAME                            READY     STATUS             RESTARTS   AGE<br>rbd-rest-api-registrykey-m262<span class="hljs-number">-5</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running            <span class="hljs-number">0</span>          <span class="hljs-number">5</span>s<br></code></pre></td></tr></table></figure><p>Pod创建成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法1：利用Node上的配置访问Private-Registry&quot;&gt;&lt;a href=&quot;#方法1：利用Node上的配置访问Private-Registry&quot; class=&quot;headerlink&quot; title=&quot;方法1：利用Node上的配置访问Private Regi</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>基于k8s 动态配置及扩容maven nexus私服</title>
    <link href="http://www.leiyawu.com/2018/06/22/%E5%9F%BA%E4%BA%8Ek8s%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%A9%E5%AE%B9maven%20nexus%E7%A7%81%E6%9C%8D/"/>
    <id>http://www.leiyawu.com/2018/06/22/%E5%9F%BA%E4%BA%8Ek8s%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%A9%E5%AE%B9maven%20nexus%E7%A7%81%E6%9C%8D/</id>
    <published>2018-06-22T02:36:00.000Z</published>
    <updated>2021-08-03T08:54:59.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置nexus"><a href="#配置nexus" class="headerlink" title="配置nexus"></a>配置nexus</h3><p>从官网下载了nexus之后还需要进行一些配置。<br>编辑bin/nexus.vmoptions 调整后的如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">Xms600M</span><br><span class="ruby"></span>-<span class="ruby">Xmx600M</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>MaxDirectMemorySize=1G</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>+UnlockDiagnosticVMOptions</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>+UnsyncloadClass</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>+LogVMOutput</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>LogFile=<span class="hljs-regexp">/data/docker</span><span class="hljs-regexp">/soft/nexus</span><span class="hljs-regexp">/log/jvm</span>.log</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-symbol">XX:</span>-OmitStackTraceInFastThrow</span><br><span class="ruby"></span>-<span class="ruby">Djava.net.preferIPv4Stack=<span class="hljs-literal">true</span></span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.home=.</span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.base=.</span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.etc=etc/karaf</span><br><span class="ruby"></span>-<span class="ruby">Djava.util.logging.config.file=etc/karaf/java.util.logging.properties</span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.data=<span class="hljs-regexp">/data/docker</span><span class="hljs-regexp">/soft/nexus</span><span class="hljs-regexp">/data</span></span><br><span class="hljs-regexp"><span class="ruby"></span></span>-<span class="ruby"><span class="hljs-regexp">Djava.io.tmpdir=/data</span><span class="hljs-regexp">/docker/soft</span><span class="hljs-regexp">/nexus/tmp</span></span><br><span class="ruby"></span>-<span class="ruby">Dkaraf.startLocalConsole=<span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p>其中除了1，2行的jvm内存配置之外，最关键的就是，以下几个属性配置：</p><ul><li>-XX:LogFile=/data/docker/soft/nexus/log/jvm.log       # 日志文件生成位置</li><li>-Dkaraf.data=/data/docker/soft/nexus/data             # 仓库数据存放位置(上传的jar包)</li><li>-Djava.io.tmpdir=/data/docker/soft/nexus/tmp          # 临时文件存放位置</li></ul><h3 id="制作Docker镜像"><a href="#制作Docker镜像" class="headerlink" title="制作Docker镜像"></a>制作Docker镜像</h3><p>配置好nexus之后，需要再制作自己的docker镜像，因为k8s就是调度镜像容器的。 </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@master nexus]<span class="hljs-comment"># pwd</span><br>/data/docker/dockerfile/nexus<br>[root@master nexus]<span class="hljs-comment"># ls -lth </span><br>total 223M<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 146 </span>Jun<span class="hljs-number"> 21 </span>16:06 Dockerfile<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root 108M Jun<span class="hljs-number"> 21 </span>16:02 nexus3.tar.gz<br>drwxr-xr-x<span class="hljs-number"> 3 </span>root root 4.0K Jun<span class="hljs-number"> 21 </span>15:53 sonatype-work<br>drwxr-xr-x<span class="hljs-number"> 9 </span>root root 4.0K Jun<span class="hljs-number"> 21 </span>15:53 nexus-3.12.1-01<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root 115M Jun<span class="hljs-number"> 21 </span>15:36 nexus-3.12.1-01-unix.tar.gz.org<br></code></pre></td></tr></table></figure><p>docker镜像的制作很简单，新建一个Dockerfile文件：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">nexus</span>]<span class="hljs-comment"># cat Dockerfile </span><br>FROM registry.cn-hangzhou.aliyuncs.com/luhaoyuan/oracle-jdk8:latest<br><br>ADD nexus3.tar.gz /opt<br><br>ENTRYPOINT [<span class="hljs-string">&quot;/opt/nexus-3.12.1-01/bin/nexus&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li>第一行：nexus的运行是依赖JDK环境的，所以我们这里就使用jdk作为基础镜像；(镜像是基于centos7，比较大，后续可以考虑修改为alpine_3.6)</li><li>第二行：将我们配置过后的nexus(nexus-3.12.1-01)再重新打包一下，添加到容器中； </li><li>第三行：启动容器时，执行的命令，nexus的启动命令有start和run，由于start默认是启动在后台进程的，这样容器一启动就退出了。所以这里必须要使用run命令启动了。</li></ul><p>最后构建Docker镜像：<br>docker build -t registry.martin.com:5000/tools/nexus:3.12.1 .<br>registry.martin.com:5000为我registry地址,构建之后将改image push到私库,当然也可以用harbor<br>如果有做ca校验，需要将证书拷贝到指定的:/etc/docker/certs.d/xxx/ca.crt,然后docker login校验<br>再docker push registry.martin.com:5000/tools/nexus:3.12.1，不然会提示x509认证失败</p><span id="more"></span><h3 id="配置k8s-PV-PVC"><a href="#配置k8s-PV-PVC" class="headerlink" title="配置k8s PV-PVC"></a>配置k8s PV-PVC</h3><p>为了避免容器重启数据丢失，需要挂载主机的卷空间。<br>在k8s中，pod挂载主机的存储卷，就需要使用到了PV（PersistentVolume）和PVC（PersistentVolumeClaim）。<br>新建nexus3-pv-pvc.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># pwd</span><br><span class="hljs-string">/data/k8s/nexus</span><br>[<span class="hljs-string">root@master</span>  <span class="hljs-string">nexus</span>]<span class="hljs-comment"># ls -lth</span><br><span class="hljs-string">total</span> <span class="hljs-string">12K</span><br><span class="hljs-string">-rw-r--r--</span> <span class="hljs-number">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-number">777</span> <span class="hljs-string">Jun</span> <span class="hljs-number">21</span> <span class="hljs-number">18</span><span class="hljs-string">:49</span> <span class="hljs-string">nexus3-deployment.yaml</span><br><span class="hljs-string">-rw-r--r--</span> <span class="hljs-number">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-number">370</span> <span class="hljs-string">Jun</span> <span class="hljs-number">21</span> <span class="hljs-number">17</span><span class="hljs-string">:12</span> <span class="hljs-string">nexus3-service.yaml</span><br><span class="hljs-string">-rw-r--r--</span> <span class="hljs-number">1</span> <span class="hljs-string">root</span> <span class="hljs-string">root</span> <span class="hljs-number">525</span> <span class="hljs-string">Jun</span> <span class="hljs-number">21</span> <span class="hljs-number">16</span><span class="hljs-string">:49</span> <span class="hljs-string">nexus3-pv-pvc.yaml</span><br>[<span class="hljs-string">root@master</span>  <span class="hljs-string">nexus</span>]<span class="hljs-comment"># cat nexus3-pv-pvc.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3-data-pv</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3-data-pv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">500Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">hostPath:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/docker/soft/nexus</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3-data-pvc</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3-data-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">500Gi</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3-data-pv</span><br>[<span class="hljs-string">root@master</span>  <span class="hljs-string">nexus</span>]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>==注意：PV中的hostPath，指定了宿主主机上的挂载路径(node节点最好全部先创建好)==</p><h3 id="配置k8s-Deployment"><a href="#配置k8s-Deployment" class="headerlink" title="配置k8s Deployment"></a>配置k8s Deployment</h3><p>在k8s早期更多的是使用ReplicationController (RC)来控制保障pod，不过后来又出现了Deployment。<br>Deployment不仅包含了RC的所有功能，还具有：版本记录、回滚、暂停和启动等多种额外的强大功能。<br>所以可以尽量都使用Deployment,新建nexus3-deployment.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># cat nexus3-deployment.yaml </span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.martin.com:5000/tools/nexus:3.12.1</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9193</span><br>            <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus-data</span><br>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/docker/soft/nexus</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nexus-data</span><br>          <span class="hljs-attr">persistentVolumeClaim:</span><br>            <span class="hljs-attr">claimName:</span> <span class="hljs-string">nexus3-data-pvc</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span><br></code></pre></td></tr></table></figure><p>需要在volumes结点上引用之前创建的PVC：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">volumes</span>:<br>  - name: nexus-<span class="hljs-class"><span class="hljs-keyword">data</span></span><br>    persistentVolumeClaim:<br>      claimName: nexus3-<span class="hljs-class"><span class="hljs-keyword">data</span>-pvc</span><br></code></pre></td></tr></table></figure><p>在volumeMounts结点上，配置了挂载到容器中的路径：/data/docker/soft/nexus(node节点最好全部先创建好)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">volumeMounts:<br>  - name: nexus-data<br>    mountPath: <span class="hljs-regexp">/data/</span>docker<span class="hljs-regexp">/soft/</span>nexus<br></code></pre></td></tr></table></figure><p>最后的nodeSelector表示pod只在某个主机上运行,可以通过在k8s的master上使用:kubectl get nodes查看</p><h3 id="配置k8s-Service"><a href="#配置k8s-Service" class="headerlink" title="配置k8s Service"></a>配置k8s Service</h3><p>k8s中的pod的访问是不可靠的，随时可能发生pod停止-漂移-创建的过程。<br>所以要想能够稳定的访问，就必须要创建Service进行服务发现了，在Service中是根据selector来寻找pod的。<br>最后k8s上的Service只能在集群节点上访问，如果我们想要在集群外部进行访问的话，只有三种方式：</p><ul><li>NodePort、</li><li>LoadBalancer、</li><li>Ingress。 </li></ul><p>这里使用NodePort，绑定宿主机的端口来进行暴露服务。跟docker run -p 看上去效果相似。<br>新建nexus3-service.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># cat nexus3-service.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nexus3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30031</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web-ui</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nexus3</span><br>[<span class="hljs-string">root@master</span> <span class="hljs-string">nexus</span>]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>其中关键的地方就是spec.type节点配置NodePort类型了。<br>说明下的ports 端口的配置：</p><ul><li>port 属性定义了Service的虚端口；</li><li>targetPort 属性指定了后面pod上提供的端口，如果没有指定则默认与port相同(这里我们显视的指定了)；</li><li>nodePort 属性指定了绑定在宿主机(物理机)上的端口号，我们可以通过宿主机IP + 端口的形式访问到后方pod中的服。</li><li>name 如果有多个port配置的话，必须要为每个port指定一个名称。</li></ul><h3 id="k8s部署访问"><a href="#k8s部署访问" class="headerlink" title="k8s部署访问"></a>k8s部署访问</h3><h4 id="创建-PV-PVC"><a href="#创建-PV-PVC" class="headerlink" title="创建 PV-PVC"></a>创建 PV-PVC</h4><p>根据配置文件，创建PV-PVC：</p><p>kubectl create -f nexus3-pv-pvc.yaml</p><p>创建完成后，查看一下状态，是否正常： </p><p>kubectl get pv</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">NAME</span>             CAPACITY   <span class="hljs-keyword">ACCESS</span> MODES   RECLAIM POLICY   <span class="hljs-keyword">STATUS</span>    CLAIM                     STORAGECLASS   REASON    AGE<br>nexus3-<span class="hljs-keyword">data</span>-pv   <span class="hljs-number">500</span>Gi      RWO            Recycle          Bound     <span class="hljs-keyword">default</span>/nexus3-<span class="hljs-keyword">data</span>-pvc                            <span class="hljs-number">17</span>h<br></code></pre></td></tr></table></figure><h4 id="创建Deployment"><a href="#创建Deployment" class="headerlink" title="创建Deployment"></a>创建Deployment</h4><p>继续创建Deployment，创建完后会自动创建pod的，并维护pod数量始终为1。 </p><p>kubectl create -f nexus3-deployment.yaml </p><p>稍等几秒钟，查看pod状态： </p><p>kubectl get pod -o wide</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NAME</span>                      READY     STATUS    RESTARTS   AGE       IP           NODE<br><span class="hljs-attribute">nexus3</span>-<span class="hljs-number">68</span>f<span class="hljs-number">55</span>d<span class="hljs-number">9746</span>-vfnf<span class="hljs-number">8</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">12</span>h       <span class="hljs-number">10.20.7.12</span>   <span class="hljs-number">192.168.0.15</span><br></code></pre></td></tr></table></figure><p>==注意：默认不用-n指定namespace的都是用的default，-o wide可以看到详细的IP及node信息==</p><h4 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h4><p>创建Service，暴露服务：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> create -f nexus<span class="hljs-number">3</span>-service.yaml<br></code></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">kubectl</span> get svc<br><span class="hljs-attribute">NAME</span>            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                        AGE<br><span class="hljs-attribute">kubernetes</span>      ClusterIP   <span class="hljs-number">10.10.0.1</span>       &lt;none&gt;        <span class="hljs-number">443</span>/TCP                                        <span class="hljs-number">13</span>d<br><span class="hljs-attribute">nexus3</span>          NodePort    <span class="hljs-number">10.10.165.3</span>     &lt;none&gt;        <span class="hljs-number">8081</span>:<span class="hljs-number">30031</span>/TCP,<span class="hljs-number">5000</span>:<span class="hljs-number">30032</span>/TCP,<span class="hljs-number">8889</span>:<span class="hljs-number">30033</span>/TCP   <span class="hljs-number">12</span>h<br><span class="hljs-attribute">nginx</span>-service   ClusterIP   <span class="hljs-number">10.10.147.216</span>   &lt;none&gt;        <span class="hljs-number">80</span>/TCP                                         <span class="hljs-number">10</span>d<br></code></pre></td></tr></table></figure><p>==注意这里的访问，是访问宿主机的IP+端口，至于CLUSTER-IP这些都是虚拟的IP，无法在外部进行访问的==。</p><h3 id="访问Nexus"><a href="#访问Nexus" class="headerlink" title="访问Nexus"></a>访问Nexus</h3><p><a href="http://192.168.1.2:30031/">http://192.168.1.2:30031</a> (pod内container端口为：8081)</p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>借用k8s Deployment的升级方式:</p><ol><li>从官网下载最新的nexus安装包；</li><li>修改nexus配置文件，将上面旧版本的配置覆盖过来就行了；</li><li>修改Dockerfile文件，构建新的Docker镜像，将新打包的nexus放入镜像中。<br>如：docker build -t registry.martin.com:5000/tools/nexus:3.12.2 .<br>Ps: 不要忘记启动命令路径也要调整!</li><li>使用k8s命令升级Deployment：<br>如：kubectl set image deployment/nexus3 nexus3=registry.martin.com:5000/tools/nexus:3.12.2</li><li>回滚升级，如果发现升级了的不好用，或者出现问题，也可以回滚：<br>如：kubectl rollout undo deployment/nexus3</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实这个过程中里复杂了一部分，也简化了一部分。<br>复杂了pv-pvc过程，pv-pvc不用创建直接在Deployment中挂载hostPath也是可以的。<br>简化了Deployment，其实应该还需要加上cpu、内存等资源限制的。<br>这里只是在nexus配置文件中做了限制，如果出现内存泄漏问题，还是没办法解决!</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;配置nexus&quot;&gt;&lt;a href=&quot;#配置nexus&quot; class=&quot;headerlink&quot; title=&quot;配置nexus&quot;&gt;&lt;/a&gt;配置nexus&lt;/h3&gt;&lt;p&gt;从官网下载了nexus之后还需要进行一些配置。&lt;br&gt;编辑bin/nexus.vmoptions 调整后的如下：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs haml&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;Xms600M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Xmx600M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;MaxDirectMemorySize=1G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UnlockDiagnosticVMOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UnsyncloadClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+LogVMOutput&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;LogFile=&lt;span class=&quot;hljs-regexp&quot;&gt;/data/docker&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/soft/nexus&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/log/jvm&lt;/span&gt;.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;-OmitStackTraceInFastThrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Djava.net.preferIPv4Stack=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.home=.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.base=.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.etc=etc/karaf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Djava.util.logging.config.file=etc/karaf/java.util.logging.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.data=&lt;span class=&quot;hljs-regexp&quot;&gt;/data/docker&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/soft/nexus&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;Djava.io.tmpdir=/data&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/docker/soft&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/nexus/tmp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;Dkaraf.startLocalConsole=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中除了1，2行的jvm内存配置之外，最关键的就是，以下几个属性配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-XX:LogFile=/data/docker/soft/nexus/log/jvm.log       # 日志文件生成位置&lt;/li&gt;
&lt;li&gt;-Dkaraf.data=/data/docker/soft/nexus/data             # 仓库数据存放位置(上传的jar包)&lt;/li&gt;
&lt;li&gt;-Djava.io.tmpdir=/data/docker/soft/nexus/tmp          # 临时文件存放位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;制作Docker镜像&quot;&gt;&lt;a href=&quot;#制作Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;制作Docker镜像&quot;&gt;&lt;/a&gt;制作Docker镜像&lt;/h3&gt;&lt;p&gt;配置好nexus之后，需要再制作自己的docker镜像，因为k8s就是调度镜像容器的。 &lt;/p&gt;
&lt;figure class=&quot;highlight tap&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs tap&quot;&gt;[root@master nexus]&lt;span class=&quot;hljs-comment&quot;&gt;# pwd&lt;/span&gt;&lt;br&gt;/data/docker/dockerfile/nexus&lt;br&gt;[root@master nexus]&lt;span class=&quot;hljs-comment&quot;&gt;# ls -lth &lt;/span&gt;&lt;br&gt;total 223M&lt;br&gt;-rw-r--r--&lt;span class=&quot;hljs-number&quot;&gt; 1 &lt;/span&gt;root root &lt;span class=&quot;hljs-number&quot;&gt; 146 &lt;/span&gt;Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;16:06 Dockerfile&lt;br&gt;-rw-r--r--&lt;span class=&quot;hljs-number&quot;&gt; 1 &lt;/span&gt;root root 108M Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;16:02 nexus3.tar.gz&lt;br&gt;drwxr-xr-x&lt;span class=&quot;hljs-number&quot;&gt; 3 &lt;/span&gt;root root 4.0K Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;15:53 sonatype-work&lt;br&gt;drwxr-xr-x&lt;span class=&quot;hljs-number&quot;&gt; 9 &lt;/span&gt;root root 4.0K Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;15:53 nexus-3.12.1-01&lt;br&gt;-rw-r--r--&lt;span class=&quot;hljs-number&quot;&gt; 1 &lt;/span&gt;root root 115M Jun&lt;span class=&quot;hljs-number&quot;&gt; 21 &lt;/span&gt;15:36 nexus-3.12.1-01-unix.tar.gz.org&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;docker镜像的制作很简单，新建一个Dockerfile文件：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs crmsh&quot;&gt;[root@&lt;span class=&quot;hljs-keyword&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nexus&lt;/span&gt;]&lt;span class=&quot;hljs-comment&quot;&gt;# cat Dockerfile &lt;/span&gt;&lt;br&gt;FROM registry.cn-hangzhou.aliyuncs.com/luhaoyuan/oracle-jdk8:latest&lt;br&gt;&lt;br&gt;ADD nexus3.tar.gz /opt&lt;br&gt;&lt;br&gt;ENTRYPOINT [&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/opt/nexus-3.12.1-01/bin/nexus&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第一行：nexus的运行是依赖JDK环境的，所以我们这里就使用jdk作为基础镜像；(镜像是基于centos7，比较大，后续可以考虑修改为alpine_3.6)&lt;/li&gt;
&lt;li&gt;第二行：将我们配置过后的nexus(nexus-3.12.1-01)再重新打包一下，添加到容器中； &lt;/li&gt;
&lt;li&gt;第三行：启动容器时，执行的命令，nexus的启动命令有start和run，由于start默认是启动在后台进程的，这样容器一启动就退出了。所以这里必须要使用run命令启动了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后构建Docker镜像：&lt;br&gt;docker build -t registry.martin.com:5000/tools/nexus:3.12.1 .&lt;br&gt;registry.martin.com:5000为我registry地址,构建之后将改image push到私库,当然也可以用harbor&lt;br&gt;如果有做ca校验，需要将证书拷贝到指定的:/etc/docker/certs.d/xxx/ca.crt,然后docker login校验&lt;br&gt;再docker push registry.martin.com:5000/tools/nexus:3.12.1，不然会提示x509认证失败&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-jenkins-ci-cd</title>
    <link href="http://www.leiyawu.com/2018/06/14/kubernetes-jenkins-ci-cd/"/>
    <id>http://www.leiyawu.com/2018/06/14/kubernetes-jenkins-ci-cd/</id>
    <published>2018-06-14T09:22:00.000Z</published>
    <updated>2021-08-03T08:55:29.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h3><p>基于Jenkins的CI/CD流程如下所示:<br><img src="https://cos.leiyawu.com/docker/k8s/kubernetes-jenkins-ci-cd.png" alt="kubernetes-jenkins-ci-cd"></p><h3 id="流程说明："><a href="#流程说明：" class="headerlink" title="流程说明："></a>流程说明：</h3><ol><li>用户向Gitlab提交代码，代码中必须包含Dockerfile</li><li>将代码提交到远程仓库</li><li>用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建</li><li>Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库</li><li>Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项</li><li>生成应用的kubernetes YAML配置文件</li><li>更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息</li><li>更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看<a href="https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html">边缘节点配置</a></li><li>Jenkins调用kubernetes的API，部署应用</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;流程图：&quot;&gt;&lt;a href=&quot;#流程图：&quot; class=&quot;headerlink&quot; title=&quot;流程图：&quot;&gt;&lt;/a&gt;流程图：&lt;/h3&gt;&lt;p&gt;基于Jenkins的CI/CD流程如下所示:&lt;br&gt;&lt;img src=&quot;https://cos.leiyawu.com/do</summary>
      
    
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://www.leiyawu.com/tags/k8s/"/>
    
  </entry>
  
</feed>
